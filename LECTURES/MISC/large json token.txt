rO0ABXNyACNjb20uZmlsZW5ldC5hcGlpbXBsLmNvcmUuRG9tYWluSW1wbLy8vLwAAAAQAgAAeHIAO2NvbS5maWxlbmV0LmFwaWltcGwuY29yZS5JbmRlcGVuZGVudGx5UGVyc2lzdGFibGVPYmplY3RJbXBs42o7Edmhf9wCAAB4cgAuY29tLmZpbGVuZXQuYXBpaW1wbC5jb3JlLkluZGVwZW5kZW50T2JqZWN0SW1wbAQeqXSEvhKfAgAAeHIAKWNvbS5maWxlbmV0LmFwaWltcGwuY29yZS5FbmdpbmVPYmplY3RJbXBskgcsW9kZXWQDAAB4cHcCAA9zcgAnY29tLmZpbGVuZXQuYXBpaW1wbC5jb3JlLkNvbm5lY3Rpb25JbXBs9nAAgm/pLV8DAAB4cHcEAAAAD3QAImlpb3A6Ly9wOGRldmNlOjk4MTAvRmlsZU5ldC9FbmdpbmVzcgAsY29tLmZpbGVuZXQuYXBpLnV0aWwuQ29uZmlndXJhdGlvblBhcmFtZXRlcnP0LAfNrnlTggMAAHhwdwgAAAAPAAAAAHh4cHcDAAIEdAAGRG9tYWludXIAAltCrPMX+AYIVOACAAB4cAAAABAXb9B9WPVATp2ngpsnJofzdwIAAHNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAABwILc3EAfgANAAABF3cIAAAAIwABAAh0ABZPYmplY3RTdG9yZVNjaGVtYU15U1FMdLxBLS0gR2VuZXJhdGVkIGZvciBNeVNRTCBkYXRhYmFzZXMgb246IFRodSBTZXAgMDUgMTc6NDA6MzYgQ0RUIDIwMTkKLS0gVGhlIGZvbGxvd2luZyBTY2hlbWFSZXZpc2lvbiBjb21tZW50IG11c3QgYmUgcHJlc2VudCBhbmQgbXVzdCBjb3JyZXNwb25kIHRvCi0tIHRoZSBwcm9wZXIgc2NoZW1hIHJldmlzaW9uIGxldmVsIGF0IHRoZSB0aW1lIHRoZSBPYmplY3RTdG9yZSBpcyBjcmVhdGVkLgotLSBTY2hlbWFSZXZpc2lvbjogMjQuMS41Ci0tIApDUkVBVEUgVEFCTEUgRG9jVmVyc2lvbihvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCBiaW5hcnkoMTYpICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIHN0b3JhZ2VfY2xhc3MgYmluYXJ5KDE2KSAsIGlzX3Jlc2VydmVkIHRpbnlpbnQgTk9UIE5VTEwgLCBpc19jdXJyZW50IHRpbnlpbnQgTk9UIE5VTEwgLCBpc19mcm96ZW4gdGlueWludCBOT1QgTlVMTCAsIHZlcnNpb25fc2VyaWVzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBjb250ZW50X3NpemUgZG91YmxlICwgbG9ja190b2tlbiBiaW5hcnkoMTYpICwgbG9ja190aW1lb3V0IGludGVnZXIgLCBsb2NrX293bmVyIHZhcmNoYXIoNjQpICwgZG9jX2xpZmVjeWNsZV9wb2xpY3kgYmluYXJ5KDE2KSAsIGRvY19zdGF0ZSB2YXJjaGFyKDY0KSAsIGlzX2luX2V4Y2VwdGlvbl9zdGF0ZSB0aW55aW50ICwgc3RvcmFnZV9sb2NhdGlvbiB2YXJjaGFyKDEpICwgY29tcG9uZW50X3R5cGVzIHZhcmJpbmFyeSgxMDApICwgcmV0cmlldmFsX25hbWVzIHZhcmJpbmFyeSgyMDApICwgY29tcG9uZW50X3R5cGVzXzIgbG9uZ2Jsb2IgLCByZXRyaWV2YWxfbmFtZXNfMiBsb25nYmxvYiAsIG1pbWVfdHlwZSB2YXJjaGFyKDk2KSAsIGNvbnRlbnRfaW5mbyB2YXJiaW5hcnkoOTYpICwgY29udGVudF9pbmZvXzIgbG9uZ2Jsb2IgLCBuZXh0X2NvbnRlbnRfdW5pcXVlX2lkIGludGVnZXIgLCB2d192ZXJzaW9uIHZhcmNoYXIoMjU1KSAsIHZlcnNpb25pbmdfZW5hYmxlZCB0aW55aW50IE5PVCBOVUxMICwgeG1sX2RvY190eXBlIHZhcmNoYXIoMjU2KSAsIHhtbF90YXJnZXRfY2xhc3MgYmluYXJ5KDE2KSAsIGNsYXNzaWZpY2F0aW9uX3N0YXRlIGludGVnZXIgLCByZXBsaWNhdGlvbl9ncm91cF9pZCBiaW5hcnkoMTYpICwgcmVjb3ZlcnlfaXRlbV9pZCBiaW5hcnkoMTYpICwgbG9ja19zaWQgbG9uZ2Jsb2IgLCBtYWpvcl92ZXJzaW9uX251bWJlciBpbnRlZ2VyIE5PVCBOVUxMICwgbWlub3JfdmVyc2lvbl9udW1iZXIgaW50ZWdlciBOT1QgTlVMTCAsIHZlcnNpb25fc3RhdHVzIGludGVnZXIgTk9UIE5VTEwgLCBzZWN1cml0eV9wb2xpY3lfaWQgYmluYXJ5KDE2KSAsIHJlc2VydmF0aW9uX3R5cGUgaW50ZWdlciAsIHJlc2VydmF0aW9uX293bmVyX3NpZCBsb25nYmxvYiAsIGNvbnRlbnRfbGFzdF9hY2Nlc3NlZF9kYXRlIGRhdGV0aW1lICwgY29udGVudF9yZWZlcnJhbF9ibG9iIGxvbmdibG9iICwgY29udGVudF9yZXRlbnRpb25fZGF0ZSBkYXRldGltZSAsIHN0b3JhZ2VfYXJlYV9pZCBiaW5hcnkoMTYpICwgaW5kZXhhdGlvbl9pZCBiaW5hcnkoMTYpICwgaW5kZXhfZmFpbHVyZV9jb2RlIGludGVnZXIgLCBjb21wb3VuZF9kb2N1bWVudF9zdGF0ZSBpbnRlZ2VyICwgZHluYW1pY19jcl91cGRhdGVfc3RhdHVzIGludGVnZXIgLCBzZWN1cml0eV9mb2xkZXJfaWQgYmluYXJ5KDE2KSAsIGNoZWNrZWRfaW5fZGF0ZSBkYXRldGltZSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfRG9jVmVyc2lvbjIyIE9OIERvY1ZlcnNpb24gKHZlcnNpb25fc2VyaWVzX2lkLCBtYWpvcl92ZXJzaW9uX251bWJlciBERVNDLCBtaW5vcl92ZXJzaW9uX251bWJlciBERVNDKSAgCkNSRUFURSBJTkRFWCBJX0RvY1ZlcnNpb243MyBPTiBEb2NWZXJzaW9uIChzZWN1cml0eV9mb2xkZXJfaWQpICAKQ1JFQVRFIFRBQkxFIENvbnRlbnQoZWxlbWVudF9pZCB2YXJjaGFyKDQ4KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBleHRlbnNpb24gdmFyY2hhcigzKSAsIGNvbnRlbnQgbG9uZ2Jsb2IgLCBjb250ZW50X3NpemUgaW50ZWdlciBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgcmVmY291bnQgaW50ZWdlciAsIHNjZl9kYXRhIHZhcmJpbmFyeSgzMikgKSAKQ1JFQVRFIFRBQkxFIEdlbmVyaWMob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBsb2NrX3Rva2VuIGJpbmFyeSgxNikgLCBsb2NrX3RpbWVvdXQgaW50ZWdlciAsIGxvY2tfb3duZXIgdmFyY2hhcig2NCkgLCBsb2NrX3NpZCBsb25nYmxvYiAsIHNlY3VyaXR5X3BvbGljeV9pZCBiaW5hcnkoMTYpICwgaW5kZXhhdGlvbl9pZCBiaW5hcnkoMTYpICwgaW5kZXhfZmFpbHVyZV9jb2RlIGludGVnZXIgLCBzZWN1cml0eV9mb2xkZXJfaWQgYmluYXJ5KDE2KSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIGJpbmFyeSgxNikgLCByZXRlbnRpb25fZGF0ZSBkYXRldGltZSAsIHJlY292ZXJ5X2l0ZW1faWQgYmluYXJ5KDE2KSApIApDUkVBVEUgSU5ERVggSV9HZW5lcmljNzQgT04gR2VuZXJpYyAoc2VjdXJpdHlfZm9sZGVyX2lkKSAgCkNSRUFURSBUQUJMRSBDbGFzc0RlZmluaXRpb24ob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBzdXBlcmNsYXNzX2lkIGJpbmFyeSgxNikgLCByb290X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzdXBfdXNlcl9pbnN0YW5jZXMgdGlueWludCBOT1QgTlVMTCAsIHBlcnNpc3RlbnRfYm9vbCB0aW55aW50IE5PVCBOVUxMICwgc3lzX293bmVkX2Jvb2wgdGlueWludCBOT1QgTlVMTCAsIHRhYmxlX2lkIGJpbmFyeSgxNikgLCBzdXBfdXNlcl9zdWJjbGFzc2VzIHRpbnlpbnQgTk9UIE5VTEwgLCBkZWZhdWx0X2luc3RhbmNlX3NlY3VyaXR5X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzdXBfdXNlcl9wcm9wcyB0aW55aW50IE5PVCBOVUxMICwgc3ltYm9saWNfbmFtZSB2YXJjaGFyKDY0KSAsIGlzX2hpZGRlbiB0aW55aW50ICwgaXNfY2JyX2VuYWJsZWQgdGlueWludCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIGJpbmFyeSgxNikgLCBhZGRvbl9pZCBiaW5hcnkoMTYpICwgcmV0ZW50aW9uX3BlcmlvZCBpbnRlZ2VyICwgcmV0ZW50aW9uX3VuaXRzIGludGVnZXIgLCBhY3Rpb25faWQgYmluYXJ5KDE2KSApIApDUkVBVEUgSU5ERVggSV9DbGFzc0RlZmluaXRpb24yOSBPTiBDbGFzc0RlZmluaXRpb24gKHN1cGVyY2xhc3NfaWQpICAKQ1JFQVRFIFRBQkxFIEdsb2JhbFByb3BlcnR5RGVmKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgZGF0YXR5cGUgaW50ZWdlciBOT1QgTlVMTCAsIGNhcmRpbmFsaXR5IGludGVnZXIgTk9UIE5VTEwgLCB2YWx1ZV9yZXF1aXJlZF9ib29sIHRpbnlpbnQgLCBoaWRkZW5fYm9vbCB0aW55aW50ICwgbmFtZV9wcm9wZXJ0eV9ib29sIHRpbnlpbnQgLCBtYXhfbGVuZ3RoX3N0cmluZyBpbnRlZ2VyICwgbWF4X2xlbmd0aF9iaW5hcnkgaW50ZWdlciAsIGRlZmF1bHRfYmluYXJ5IGxvbmdibG9iICwgZGVmYXVsdF9ib29sIHRpbnlpbnQgLCBkZWZhdWx0X2RhdGV0aW1lIGRhdGV0aW1lICwgZGVmYXVsdF9pZCBiaW5hcnkoMTYpICwgZGVmYXVsdF9pbnQzMiBpbnRlZ2VyICwgZGVmYXVsdF9mbG9hdDY0IGRvdWJsZSAsIGRlZmF1bHRfc3RyaW5nIHZhcmNoYXIoNDAwMCkgLCBtaW5pbXVtX2RhdGV0aW1lIGRhdGV0aW1lICwgbWluaW11bV9pbnQzMiBpbnRlZ2VyICwgbWluaW11bV9mbG9hdDY0IGRvdWJsZSAsIG1heGltdW1fZGF0ZXRpbWUgZGF0ZXRpbWUgLCBtYXhpbXVtX2ludDMyIGludGVnZXIgLCBtYXhpbXVtX2Zsb2F0NjQgZG91YmxlICwgY3ZsX2lkIGJpbmFyeSgxNikgLCBsaXN0X2lzX3NldF9ib29sIHRpbnlpbnQgLCBzeW1ib2xpY19uYW1lIHZhcmNoYXIoNjQpICwgc2V0dGFiaWxpdHkgaW50ZWdlciAsIGRpc3BsYXlfY2F0ZWdvcnkgdmFyY2hhcig2NCkgLCBtb2RpZmljYXRpb25fYWNjZXNzIGludGVnZXIgLCBhbGxvd3NfZm9yZWlnbl9vYmplY3QgdGlueWludCAsIHNlY3VyaXR5X3Byb3h5X3R5cGUgaW50ZWdlciAsIG1hcmtpbmdfc2V0X2lkIGJpbmFyeSgxNikgLCB1c2VfbG9uZ19jb2x1bW4gdGlueWludCAsIHBlcnNpc3RlbmNlX3R5cGUgaW50ZWdlciAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIGJpbmFyeSgxNikgLCBhZGRvbl9pZCBiaW5hcnkoMTYpICwgYXVkaXRfYXNfaWQgYmluYXJ5KDE2KSAsIGxvbmdfZGVmYXVsdF9zdHJpbmcgbG9uZ3RleHQgLCBkYXRlX29ubHlfYm9vbCB0aW55aW50ICwgcmVhZF9wcm90ZWN0ZWRfYm9vbCB0aW55aW50ICwgY2JyX3Byb3BhZ2F0aW9uIGludGVnZXIgKSAKQ1JFQVRFIFRBQkxFIFByb3BlcnR5RGVmaW5pdGlvbihvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgZGJnX2Rpc3BsYXlfbmFtZSB2YXJjaGFyKDMyKSAsIGRiZ19jbGFzc19uYW1lIHZhcmNoYXIoMzIpICwgc3lzX293bmVkX2Jvb2wgdGlueWludCBOT1QgTlVMTCAsIHByaW1hcnlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGdsb2JhbF9wcm9wX2lkIGJpbmFyeSgxNikgLCBpbmhlcml0ZWRfYm9vbCB0aW55aW50IE5PVCBOVUxMICwgZGF0YXR5cGUgaW50ZWdlciBOT1QgTlVMTCAsIGNhcmRpbmFsaXR5IGludGVnZXIgTk9UIE5VTEwgLCB2YWx1ZV9yZXF1aXJlZF9ib29sIHRpbnlpbnQgTk9UIE5VTEwgLCBoaWRkZW5fYm9vbCB0aW55aW50IE5PVCBOVUxMICwgbmFtZV9wcm9wZXJ0eV9ib29sIHRpbnlpbnQgTk9UIE5VTEwgLCBtYXhfbGVuZ3RoIGludGVnZXIgLCBkZWZhdWx0X2JpbmFyeSBsb25nYmxvYiAsIGRlZmF1bHRfYm9vbCB0aW55aW50ICwgZGVmYXVsdF9kYXRldGltZSBkYXRldGltZSAsIGRlZmF1bHRfaWQgYmluYXJ5KDE2KSAsIGRlZmF1bHRfaW50MzIgaW50ZWdlciAsIGRlZmF1bHRfZmxvYXQ2NCBkb3VibGUgLCBkZWZhdWx0X29iamVjdF9pZCBiaW5hcnkoMTYpICwgZGVmYXVsdF9vYmplY3RfaWRfY2xhc3MgYmluYXJ5KDE2KSAsIGRlZmF1bHRfc3RyaW5nIHZhcmNoYXIoNDAwMCkgLCBtaW5pbXVtX2RhdGV0aW1lIGRhdGV0aW1lICwgbWluaW11bV9pbnQzMiBpbnRlZ2VyICwgbWluaW11bV9mbG9hdDY0IGRvdWJsZSAsIG1heGltdW1fZGF0ZXRpbWUgZGF0ZXRpbWUgLCBtYXhpbXVtX2ludDMyIGludGVnZXIgLCBtYXhpbXVtX2Zsb2F0NjQgZG91YmxlICwgY3ZsX2lkIGJpbmFyeSgxNikgLCByZXF1aXJlZF9jbGFzc19pZCBiaW5hcnkoMTYpICwgcmVmbGVjdGl2ZV9wcm9wX2lkIGJpbmFyeSgxNikgLCBkZWxldGlvbl9hY3Rpb24gaW50ZWdlciAsIHNlY3VyaXR5X3Byb3BhZ2F0aW9uIGludGVnZXIgLCB0YWJsZV9pZCBiaW5hcnkoMTYpICwgY29sdW1uX2lkIGJpbmFyeSgxNikgLCBsaXN0X2lzX3NldF9ib29sIHRpbnlpbnQgLCByZXF1aXJlZF9hY2Nlc3MgaW50ZWdlciAsIGFsbG93ZWRfY2hhbmdlcyBpbnRlZ2VyIE5PVCBOVUxMICwgc2V0dGFiaWxpdHkgaW50ZWdlciAsIGNvcHlfdG9fcmVzZXJ2YXRpb24gdGlueWludCAsIG1vZGlmaWNhdGlvbl9hY2Nlc3MgaW50ZWdlciAsIGFsbG93c19mb3JlaWduX29iamVjdCB0aW55aW50ICwgbWFya2luZ19zZXRfaWQgYmluYXJ5KDE2KSAsIHVzZV9sb25nX2NvbHVtbiB0aW55aW50ICwgaXNfY2JyX2VuYWJsZWQgdGlueWludCAsIHBlcnNpc3RlbmNlX3R5cGUgaW50ZWdlciAsIGF1ZGl0X2FzX2lkIGJpbmFyeSgxNikgLCBsb25nX2RlZmF1bHRfc3RyaW5nIGxvbmd0ZXh0ICwgZGF0ZV9vbmx5X2Jvb2wgdGlueWludCAsIHJlYWRfcHJvdGVjdGVkX2Jvb2wgdGlueWludCAsIGNicl9wcm9wYWdhdGlvbiBpbnRlZ2VyICkgCkNSRUFURSBJTkRFWCBJX1Byb3BlcnR5RGVmaW5pdGlvbjE5IE9OIFByb3BlcnR5RGVmaW5pdGlvbiAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgVEFCTEUgVGFibGVEZWZpbml0aW9uKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgdGFibGVfbmFtZSB2YXJjaGFyKDMwKSBOT1QgTlVMTCAsIHRhYmxlX3R5cGUgaW50ZWdlciBOT1QgTlVMTCAsIG92ZXJmbG93X3RhYmxlX2lkIGJpbmFyeSgxNikgKSAKQ1JFQVRFIFRBQkxFIENvbHVtbkRlZmluaXRpb24ob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgYmluYXJ5KDE2KSAsIGRiZ190YWJsZV9uYW1lIHZhcmNoYXIoMzApICwgY29sdW1uX25hbWUgdmFyY2hhcigzMCkgTk9UIE5VTEwgLCBjb2x1bW5fZGF0YXR5cGUgaW50ZWdlciBOT1QgTlVMTCAsIGNvbHVtbl9zaXplIGludGVnZXIgLCBhbGxvd3NfbnVsbF9ib29sIHRpbnlpbnQgTk9UIE5VTEwgLCBhbGxvd3NfdXNlcl9pbmRleCB0aW55aW50ICwgcHJvcF9pZCBiaW5hcnkoMTYpICwgaXNfc2luZ2xlX2luZGV4ZWQgdGlueWludCAsIGlzX3N5c3RlbV9vd25lZCB0aW55aW50ICkgCkNSRUFURSBJTkRFWCBJX0NvbHVtbkRlZmluaXRpb243IE9OIENvbHVtbkRlZmluaXRpb24gKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpICAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0NvbHVtbkRlZmluaXRpb24yMyBPTiBDb2x1bW5EZWZpbml0aW9uIChwYXJlbnRfaWQsIHByb3BfaWQpICAKQ1JFQVRFIFRBQkxFIExvY2FsaXplZFN0cmluZyhvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgbG9jYWxlX25hbWUgdmFyY2hhcigxNikgTk9UIE5VTEwgLCB0ZXh0IHZhcmNoYXIoNDAwMCkgTk9UIE5VTEwgKSAKQ1JFQVRFIElOREVYIElfTG9jYWxpemVkU3RyaW5nMTggT04gTG9jYWxpemVkU3RyaW5nIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgCkNSRUFURSBUQUJMRSBBbGlhc0lkKHBhcmVudF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIGFsaWFzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBjbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9BbGlhc0lkNiBPTiBBbGlhc0lkIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgCkNSRUFURSBJTkRFWCBJX0FsaWFzSWQzNiBPTiBBbGlhc0lkIChjbGFzc19pZCkgIApDUkVBVEUgVEFCTEUgUmVsYXRpb25zaGlwKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgaGVhZF9pZCBiaW5hcnkoMTYpICwgaGVhZF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgdGFpbF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgdmVyc2lvbl9zZXJpZXNfaWQgYmluYXJ5KDE2KSAsIHByb3BhZ2F0ZV9zZWN1cml0eSB0aW55aW50ICwgbmFtZSB2YXJjaGFyKDI1NSkgLCByZXBsaWNhdGlvbl9ncm91cF9pZCBiaW5hcnkoMTYpICwgcmVjb3ZlcnlfaXRlbV9pZCBiaW5hcnkoMTYpICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9SZWxhdGlvbnNoaXAyNyBPTiBSZWxhdGlvbnNoaXAgKHRhaWxfaWQsIG5hbWUpICAKQ1JFQVRFIElOREVYIElfUmVsYXRpb25zaGlwMjggT04gUmVsYXRpb25zaGlwIChoZWFkX2lkKSAgCkNSRUFURSBJTkRFWCBJX1JlbGF0aW9uc2hpcDQxIE9OIFJlbGF0aW9uc2hpcCAodmVyc2lvbl9zZXJpZXNfaWQpICAKQ1JFQVRFIFRBQkxFIEN2bChvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCBiaW5hcnkoMTYpICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyKDY0KSBOT1QgTlVMTCAsIGN2bF9kYXRhX3R5cGUgaW50ZWdlciAsIGRlc2NyaXB0aW9uIHZhcmNoYXIoMjU1KSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIGJpbmFyeSgxNikgLCBhZGRvbl9pZCBiaW5hcnkoMTYpICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9DdmwzMiBPTiBDdmwgKGRpc3BsYXlfbmFtZSkgIApDUkVBVEUgVEFCTEUgQ3ZsRWxlbWVudChvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9jdmxfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgdmFsX2ludGVnZXIgaW50ZWdlciAsIHZhbF9zdHJpbmcgdmFyY2hhcigxMDI0KSAsIGNob2ljZV90eXBlIGludGVnZXIgTk9UIE5VTEwgLCBuZXN0aW5nX2xldmVsIGludGVnZXIgKSAKQ1JFQVRFIElOREVYIElfQ3ZsRWxlbWVudDExIE9OIEN2bEVsZW1lbnQgKHBhcmVudF9jdmxfaWQpICAKQ1JFQVRFIFRBQkxFIENvbnRhaW5lcihvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCBiaW5hcnkoMTYpICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIHBhcmVudF9jb250YWluZXJfaWQgYmluYXJ5KDE2KSAsIG5hbWUgdmFyY2hhcigyNTUpICwgaW5pdF9jb250YWluZXJfYm9vbCB0aW55aW50ICwgbG9ja190b2tlbiBiaW5hcnkoMTYpICwgbG9ja190aW1lb3V0IGludGVnZXIgLCBsb2NrX293bmVyIHZhcmNoYXIoNjQpICwgbG9ja19zaWQgbG9uZ2Jsb2IgLCBzZWN1cml0eV9wb2xpY3lfaWQgYmluYXJ5KDE2KSAsIGluZGV4YXRpb25faWQgYmluYXJ5KDE2KSAsIGluZGV4X2ZhaWx1cmVfY29kZSBpbnRlZ2VyICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgYmluYXJ5KDE2KSAsIHJldGVudGlvbl9kYXRlIGRhdGV0aW1lICwgcmVjb3ZlcnlfaXRlbV9pZCBiaW5hcnkoMTYpICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9Db250YWluZXIyNCBPTiBDb250YWluZXIgKHBhcmVudF9jb250YWluZXJfaWQsIG5hbWUpICAKQ1JFQVRFIFRBQkxFIEdsb2JhbFByb3BBbGlhc0lkKHBhcmVudF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgcGFyZW50X2lkX2NsYXNzIGJpbmFyeSgxNikgLCBhbGlhc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9HbG9iYWxQcm9wQWxpYXNJZDkgT04gR2xvYmFsUHJvcEFsaWFzSWQgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpICAKQ1JFQVRFIFRBQkxFIExpc3RPZkJpbmFyeShwYXJlbnRfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBlbGVtZW50X3ZhbHVlIGxvbmdibG9iIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBwYXJlbnRfaWRfY2xhc3MgYmluYXJ5KDE2KSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mQmluYXJ5MTAgT04gTGlzdE9mQmluYXJ5IChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsLCBwYXJlbnRfaWRfY2xhc3MpICAKQ1JFQVRFIFRBQkxFIExpc3RPZkJvb2xlYW4ocGFyZW50X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSB0aW55aW50IE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBwYXJlbnRfaWRfY2xhc3MgYmluYXJ5KDE2KSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mQm9vbGVhbjEyIE9OIExpc3RPZkJvb2xlYW4gKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwsIHBhcmVudF9pZF9jbGFzcykgIApDUkVBVEUgVEFCTEUgTGlzdE9mRGF0ZVRpbWUocGFyZW50X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSBkYXRldGltZSBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgcGFyZW50X2lkX2NsYXNzIGJpbmFyeSgxNikgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0xpc3RPZkRhdGVUaW1lMTMgT04gTGlzdE9mRGF0ZVRpbWUgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwsIHBhcmVudF9pZF9jbGFzcykgIApDUkVBVEUgVEFCTEUgTGlzdE9mRmxvYXQ2NChwYXJlbnRfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBlbGVtZW50X3ZhbHVlIGRvdWJsZSBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgcGFyZW50X2lkX2NsYXNzIGJpbmFyeSgxNikgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0xpc3RPZkZsb2F0NjQxNCBPTiBMaXN0T2ZGbG9hdDY0IChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsLCBwYXJlbnRfaWRfY2xhc3MpICAKQ1JFQVRFIFRBQkxFIExpc3RPZklkKHBhcmVudF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIGVsZW1lbnRfdmFsdWUgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgcGFyZW50X2lkX2NsYXNzIGJpbmFyeSgxNikgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0xpc3RPZklkMTUgT04gTGlzdE9mSWQgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwsIHBhcmVudF9pZF9jbGFzcykgIApDUkVBVEUgVEFCTEUgTGlzdE9mSW50ZWdlcjMyKHBhcmVudF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIGVsZW1lbnRfdmFsdWUgaW50ZWdlciBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgcGFyZW50X2lkX2NsYXNzIGJpbmFyeSgxNikgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0xpc3RPZkludGVnZXIzMjE2IE9OIExpc3RPZkludGVnZXIzMiAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCwgcGFyZW50X2lkX2NsYXNzKSAgCkNSRUFURSBUQUJMRSBMaXN0T2ZTdHJpbmcocGFyZW50X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSB2YXJjaGFyKDQwMDApIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBwYXJlbnRfaWRfY2xhc3MgYmluYXJ5KDE2KSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mU3RyaW5nMTcgT04gTGlzdE9mU3RyaW5nIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsLCBwYXJlbnRfaWRfY2xhc3MpICAKQ1JFQVRFIFRBQkxFIFNlY3VyaXR5RGVzYyhzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIHJlZmVyZW5jZV9jb3VudCBpbnRlZ2VyIE5PVCBOVUxMICwgaGFzaCBpbnRlZ2VyIE5PVCBOVUxMICwgbnRfc2VjdXJpdHlfZGVzY3JpcHRvciBsb25nYmxvYiBOT1QgTlVMTCAsIGNhY2hlX3ByZV9sb2FkIHRpbnlpbnQgKSAKQ1JFQVRFIElOREVYIElfU2VjdXJpdHlEZXNjMzcgT04gU2VjdXJpdHlEZXNjIChoYXNoKSAgCkNSRUFURSBUQUJMRSBERFN0YXRlKGlkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzY2hlbWFfcmV2aXNpb25fc3RyaW5nIHZhcmNoYXIoNjQpICwgZm9sZGVyX2NhY2hlX2Vwb2NoIGludGVnZXIgTk9UIE5VTEwgLCBsYXN0X2dvb2RfY2lfc24gaW50ZWdlciBOT1QgTlVMTCAsIGxhc3RfZ29vZF9waV9zbiBpbnRlZ2VyIE5PVCBOVUxMICwgbGFzdF9nb29kX2Fubm9fcGlfc24gaW50ZWdlciBOT1QgTlVMTCAsIGluZGV4X2hvc3RfbmFtZSB2YXJjaGFyKDE1KSAsIGluZGV4X2xlYXNlX2V4cGlyeSBkYXRldGltZSAsIGluZGV4X2FyZWFfZXBvY2ggaW50ZWdlciAsIHN0b3JhZ2VfYXJlYV9lcG9jaCBpbnRlZ2VyICwgc3RvcmFnZV9wb2xpY3lfZXBvY2ggaW50ZWdlciAsIGFzeW5jX3VwZ3JhZGVfc3RhdGUgaW50ZWdlciAsIGlzX2N1c3RvbV9zY2hlbWEgdGlueWludCAsIHNjaGVtYV9zY3JpcHQgbG9uZ3RleHQgLCBleHRlcm5hbF9tZF9lcG9jaCBiaW5hcnkoMTYpICwgc3FsX3RyYW5zbGF0aW9uX2Vwb2NoIGludGVnZXIgLCBsYXN0X3B1cmdlX3RpbWUgZGF0ZXRpbWUgLCBldmVudF9hY3Rpb25fZXBvY2ggaW50ZWdlciAsIGF1ZGl0X2Rpc3BfbGVhc2VfZXhwaXJ5IGRhdGV0aW1lICwgYXVkaXRfZGlzcF9yZXN0YXJ0IGJpZ2ludCAsIGNvbnRpbnVpdHlfZGF0YSBsb25nYmxvYiAsIHN0b3JlX2lkIGJpbmFyeSgxNikgLCBzdWJzY3JpcHRpb25fZXBvY2ggaW50ZWdlciAsIGluZGV4aW5nX2JhbGFuY2luZ190aW1lIGRhdGV0aW1lICkgCkNSRUFURSBUQUJMRSBTdG9yYWdlQ2xhc3Mob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkaXNwbGF5X25hbWUgdmFyY2hhcig2NCkgTk9UIE5VTEwgLCBkZXNjcmlwdGlvbiB2YXJjaGFyKDI1NSkgLCByZXBvc2l0b3J5X3R5cGUgdmFyY2hhcigxNikgLCBmc19hZHNfcGF0aCB2YXJjaGFyKDEyMDApICwgZGJfb3B0X2hpbnQgaW50ZWdlciAsIGNvbnRlbnRfY2FjaGVkIGludGVnZXIgLCBhcmVhX3N0YXR1cyBpbnRlZ2VyICwgY2xvc3VyZV9kYXRlIGRhdGV0aW1lICwgZWxlbWVudF9jb3VudCBkb3VibGUgLCBlbGVtZW50c19jcmVhdGVkIGRvdWJsZSAsIGVsZW1lbnRzX2RlbGV0ZWQgZG91YmxlICwgZWxlbWVudF9rYnl0ZXMgZG91YmxlICwgbWF4X2VsZW1lbnRzIGRvdWJsZSAsIG1heF9zaXplIGRvdWJsZSAsIGRhdGFiYXNlX3R5cGUgaW50ZWdlciAsIGpuZGlfZGF0YV9zb3VyY2UgdmFyY2hhcig2NCkgLCBqbmRpX3hhX2RhdGFfc291cmNlIHZhcmNoYXIoNjQpICwgZGVsZXRlX21ldGhvZCBpbnRlZ2VyICwgZnJlZV90aHJlc2hvbGQgaW50ZWdlciAsIGZyZWVfd2FybmluZyBpbnRlZ2VyICwgZmlsdGVyX2V4cHJlc3Npb24gbG9uZ3RleHQgLCBmaXhlZF9jb250ZW50X2RldmljZV9pZCBiaW5hcnkoMTYpICwgc2l0ZV9pZCBiaW5hcnkoMTYpICwgcmVzb3VyY2Vfc3RyaW5nIHZhcmNoYXIoNTEyKSAsIGFsbG93c19kZWxldGUgdGlueWludCAsIGluZGV4X2FyZWFfaWQgYmluYXJ5KDE2KSAsIG9yaWdpbmFsX2ZpbGVzdG9yZV9pZCBiaW5hcnkoMTYpICwgZGlyZWN0b3J5X3N0cnVjdHVyZSBpbnRlZ2VyICwgc3RhbmRieV9hY3RpdmF0aW9uX3ByaW9yaXR5IGludGVnZXIgLCByZXRlbnRpb25fcGVyaW9kIGludGVnZXIgLCByZXBsaWNhdGlvbl9ncm91cF9pZCBiaW5hcnkoMTYpICwgc2lzX2VuYWJsZWQgdGlueWludCAsIHNpc190YWJsZV9uYW1lIHZhcmNoYXIoMzApICwgcmV0ZW50aW9uX21vZGUgaW50ZWdlciAsIGVuY3J5cHRpb25fZW5hYmxlZCB0aW55aW50ICwgc2NmX2luZGV4IGludGVnZXIgLCBjb21wcmVzc2lvbl9lbmFibGVkIHRpbnlpbnQgLCBjb21wcmVzc2lvbl90aHJlc2hvbGQgaW50ZWdlciAsIHZlcmlmaWNhdGlvbl9tb2RlIGludGVnZXIgLCBpZF9iYXRjaF9zaXplIGludGVnZXIgLCBzeW5jX3JlcXVpcmVkIGludGVnZXIgLCBzeW5jX2Rlc2lyZWQgaW50ZWdlciAsIGJhdGNoX3R0bCBpbnRlZ2VyICwgb3Blbl90aW1lX2xpbWl0IGludGVnZXIgLCBlbmNyeXB0aW9uX21ldGhvZCBpbnRlZ2VyICwgdXNlX2RldmljZV9ob2xkIHRpbnlpbnQgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1N0b3JhZ2VDbGFzczI1IE9OIFN0b3JhZ2VDbGFzcyAoZGlzcGxheV9uYW1lKSAgCkNSRUFURSBUQUJMRSBDb250ZW50U2VhcmNoKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBxdWVyaWVkX29iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgY29udGVudCB2YXJjaGFyKDEwKSAsIHJhbmsgZG91YmxlICwgaGl0Y291bnQgaW50ZWdlciAsIGNvbnRlbnRfc2l6ZSBkb3VibGUgLCBzZXFfbnVtYmVyIGludGVnZXIgLCBzdW1tYXJ5IHZhcmNoYXIoNTEyKSAsIGhpZ2hsaWdodF9ibG9iIGxvbmdibG9iICkgCkNSRUFURSBUQUJMRSBBbm5vdGF0aW9uKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgc3RvcmFnZV9jbGFzcyBiaW5hcnkoMTYpICwgY29udGVudF9zaXplIGRvdWJsZSAsIGFubm90YXRlZF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgYW5ub3RhdGVkX2lkX2NsYXNzIGJpbmFyeSgxNikgLCBhbm5vdGF0ZWRfZWxlbWVudCBpbnRlZ2VyICwgZGVzY3JpcHRpb24gdmFyY2hhcigyNTUpICwgc3RvcmFnZV9sb2NhdGlvbiB2YXJjaGFyKDEpICwgY29tcG9uZW50X3R5cGVzIHZhcmJpbmFyeSgxMDApICwgcmV0cmlldmFsX25hbWVzIHZhcmJpbmFyeSgyMDApICwgY29tcG9uZW50X3R5cGVzXzIgbG9uZ2Jsb2IgLCByZXRyaWV2YWxfbmFtZXNfMiBsb25nYmxvYiAsIG1pbWVfdHlwZSB2YXJjaGFyKDk2KSAsIGNvbnRlbnRfaW5mbyB2YXJiaW5hcnkoOTYpICwgY29udGVudF9pbmZvXzIgbG9uZ2Jsb2IgLCBuZXh0X2NvbnRlbnRfdW5pcXVlX2lkIGludGVnZXIgLCBjb250ZW50X2xhc3RfYWNjZXNzZWRfZGF0ZSBkYXRldGltZSAsIHN0b3JhZ2VfYXJlYV9pZCBiaW5hcnkoMTYpICwgaW5kZXhhdGlvbl9pZCBiaW5hcnkoMTYpICwgaW5kZXhfZmFpbHVyZV9jb2RlIGludGVnZXIgLCByZXBsaWNhdGlvbl9ncm91cF9pZCBiaW5hcnkoMTYpICwgcmV0ZW50aW9uX2RhdGUgZGF0ZXRpbWUgLCByZWNvdmVyeV9pdGVtX2lkIGJpbmFyeSgxNikgKSAKQ1JFQVRFIElOREVYIElfQW5ub3RhdGlvbjMxIE9OIEFubm90YXRpb24gKGFubm90YXRlZF9pZCkgIApDUkVBVEUgVEFCTEUgU3Vic2NyaXB0aW9uKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgZGlzcGxheV9uYW1lIHZhcmNoYXIoNjQpICwgZGVzY3JpcHRpb24gdmFyY2hhcigyNTUpICwgdGFyZ2V0X2lkIGJpbmFyeSgxNikgLCB0YXJnZXRfaWRfY2xhc3MgYmluYXJ5KDE2KSAsIGluY2x1ZGVfc3ViY2xhc3NlcyB0aW55aW50ICwgcHJpb3JpdHkgaW50ZWdlciAsIGFjdGlvbl9pZCBiaW5hcnkoMTYpICwgaXNfZW5hYmxlZCB0aW55aW50ICwgaXNfc3luY2hyb25vdXMgdGlueWludCAsIHVzZXJfc3RyaW5nIHZhcmNoYXIoMjUwKSAsIHByb2dfaWRfc3RyaW5nIHZhcmNoYXIoMjU1KSAsIHNjcmlwdF90ZXh0IGxvbmd0ZXh0ICwgcmVzZXRfbGlmZWN5Y2xlX29uX2NoZWNraW4gdGlueWludCAsIGNsYXNzaWZ5X21pbWVfdHlwZSB2YXJjaGFyKDk2KSAsIHdvcmtmbG93X2RlZmluaXRpb25faWQgYmluYXJ5KDE2KSAsIGlzb2xhdGVkX3JlZ2lvbiBpbnRlZ2VyICwgZXhwcmVzc2lvbiB2YXJjaGFyKDI1NSkgLCBzdWJqZWN0IHZhcmNoYXIoODApICwgdndfdmVyc2lvbiB2YXJjaGFyKDI1NSkgLCBlbmFibGVfbWFudWFsX2xhdW5jaCB0aW55aW50ICwgZmlsdGVyX2V4cHJlc3Npb24gbG9uZ3RleHQgLCBmaWx0ZXJlZF9wcm9wZXJ0eV9uYW1lIHZhcmNoYXIoNjQpICwgY29tcGlsZWRfZmlsdGVyIGxvbmdibG9iICwgcHJlc2VydmVfZGlyZWN0X3Blcm1pc3Npb25zIHRpbnlpbnQgLCByZXBsaWNhdGlvbl9ncm91cF9pZCBiaW5hcnkoMTYpICwgc2VhcmNoX2Z1bmN0aW9uX25hbWUgdmFyY2hhcigxMzApICwgY29udmVyc2lvbl9jbGFzc19pZCBiaW5hcnkoMTYpICkgCkNSRUFURSBJTkRFWCBJX1N1YnNjcmlwdGlvbjQ2IE9OIFN1YnNjcmlwdGlvbiAodGFyZ2V0X2lkKSAgCkNSRUFURSBUQUJMRSBRdWV1ZUl0ZW0ob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkZXF1ZXVlX2hvc3QgdmFyY2hhcigxNSkgLCByZXRyeV9jb3VudCBpbnRlZ2VyIE5PVCBOVUxMICwgcXVldWVkX29iamVjdF9pZCBiaW5hcnkoMTYpICwgcXVldWVkX29iamVjdF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgc2VyaWFsaXplZF9kYXRhIGxvbmdibG9iICwgZXZlbnRfb3BlcmF0aW9uIGludGVnZXIgLCBuZXh0X3JldHJ5X2RhdGUgZGF0ZXRpbWUgLCBsZWFzZV9leHBpcnlfZGF0ZSBkYXRldGltZSAsIGltcGVyc29uYXRpb25fdXNlciB2YXJjaGFyKDQwMDApICkgCkNSRUFURSBJTkRFWCBJX1F1ZXVlSXRlbTQ5IE9OIFF1ZXVlSXRlbSAobmV4dF9yZXRyeV9kYXRlKSAgCkNSRUFURSBUQUJMRSBEb2N1bWVudFN0YXRlKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIGJpbmFyeSgxNikgLCBzdGF0ZV9uYW1lIHZhcmNoYXIoNDAwMCkgLCBjYW5fYmVfZGVtb3RlZCB0aW55aW50ICwgZW5hYmxlX3N0YXRlX3Blcm1pc3Npb25zIHRpbnlpbnQgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICkgCkNSRUFURSBJTkRFWCBJX0RvY3VtZW50U3RhdGUzNSBPTiBEb2N1bWVudFN0YXRlIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgCkNSRUFURSBUQUJMRSBMaW5rKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgaGVhZF9pZCBiaW5hcnkoMTYpICwgaGVhZF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgdGFpbF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgdGFpbF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgYmluYXJ5KDE2KSAsIHJlY292ZXJ5X2l0ZW1faWQgYmluYXJ5KDE2KSApIApDUkVBVEUgSU5ERVggSV9MaW5rMzggT04gTGluayAodGFpbF9pZCkgIApDUkVBVEUgSU5ERVggSV9MaW5rMzkgT04gTGluayAoaGVhZF9pZCkgIApDUkVBVEUgVEFCTEUgU2VjdXJpdHlQb2xpY3kob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkaXNwbGF5X25hbWUgdmFyY2hhcig2NCkgLCBkZXNjcmlwdGlvbiB2YXJjaGFyKDI1NSkgLCBwcmVzZXJ2ZV9kaXJlY3RfcGVybWlzc2lvbnMgdGlueWludCBOT1QgTlVMTCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIGJpbmFyeSgxNikgKSAKQ1JFQVRFIFRBQkxFIFNlY3VyaXR5VGVtcGxhdGUob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgYmluYXJ5KDE2KSAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyKDY0KSAsIGlzX2VuYWJsZWQgdGlueWludCBOT1QgTlVMTCAsIGFwcGx5X3N0YXRlX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9TZWN1cml0eVRlbXBsYXRlNDUgT04gU2VjdXJpdHlUZW1wbGF0ZSAocGFyZW50X2lkLCBhcHBseV9zdGF0ZV9pZCkgIApDUkVBVEUgVEFCTEUgRXZlbnQob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBzb3VyY2Vfb2JqZWN0X2lkIGJpbmFyeSgxNikgLCBzb3VyY2Vfb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgLCBzdGF0dXMgaW50ZWdlciAsIHNlcmlhbGl6ZWRfc291cmNlX29iamVjdCBsb25nYmxvYiAsIHF1ZXJ5X3RleHQgbG9uZ3RleHQgLCB2ZXJzaW9uX3Nlcmllc19pZCBiaW5hcnkoMTYpICwgbGlmZWN5Y2xlX2NoYW5nZSBpbnRlZ2VyICwgZWxlbWVudF9uYW1lIHZhcmNoYXIoMjU1KSAsIGF1ZGl0X2xldmVsIGludGVnZXIgLCBpbml0aWF0aW5nX3VzZXIgdmFyY2hhcigyNTUpICwgc2VxdWVuY2VfbnVtYmVyIGludGVnZXIgLCBzZXJpYWxpemVkX29yaWdfb2JqZWN0IGxvbmdibG9iICwgYXVkaXRfc2VxdWVuY2UgYmlnaW50ICwgc291cmNlX3N0b3JhZ2VfYXJlYV9pZCBiaW5hcnkoMTYpICwgdGFyZ2V0X3N0b3JhZ2VfYXJlYV9pZCBiaW5hcnkoMTYpICwgcmVjb3ZlcnlfaXRlbV9pZCBiaW5hcnkoMTYpICwgc291cmNlX3JldGFpbmVkIHRpbnlpbnQgKSAKQ1JFQVRFIElOREVYIElfRXZlbnQ0OCBPTiBFdmVudCAoc291cmNlX29iamVjdF9pZCwgY3JlYXRlX2RhdGUgREVTQykgIApDUkVBVEUgSU5ERVggSV9FdmVudDgzIE9OIEV2ZW50IChhdWRpdF9zZXF1ZW5jZSkgIApDUkVBVEUgVEFCTEUgQXVkaXREZWZpbml0aW9uKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIGJpbmFyeSgxNikgLCBldmVudF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgYXVkaXRfc3VjY2VzcyB0aW55aW50IE5PVCBOVUxMICwgYXVkaXRfZmFpbHVyZSB0aW55aW50IE5PVCBOVUxMICwgaW5jbHVkZV9zdWJjbGFzc2VzIHRpbnlpbnQgTk9UIE5VTEwgLCByZWNvcmRpbmdfbGV2ZWwgaW50ZWdlciAsIGZpbHRlcl9leHByZXNzaW9uIGxvbmd0ZXh0ICwgZmlsdGVyZWRfcHJvcGVydHlfbmFtZSB2YXJjaGFyKDY0KSAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyKDY0KSAsIGVuYWJsZWRfYm9vbCB0aW55aW50ICkgCkNSRUFURSBJTkRFWCBJX0F1ZGl0RGVmaW5pdGlvbjQ3IE9OIEF1ZGl0RGVmaW5pdGlvbiAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgVEFCTEUgU3Vic2NyaWJlZEV2ZW50KG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIGJpbmFyeSgxNikgLCBldmVudF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICkgCkNSRUFURSBJTkRFWCBJX1N1YnNjcmliZWRFdmVudDUwIE9OIFN1YnNjcmliZWRFdmVudCAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgSU5ERVggSV9TdWJzY3JpYmVkRXZlbnQ1MSBPTiBTdWJzY3JpYmVkRXZlbnQgKGV2ZW50X2NsYXNzX2lkKSAgCkNSRUFURSBUQUJMRSBJbmRleEFyZWEob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkaXNwbGF5X25hbWUgdmFyY2hhcig2NCkgTk9UIE5VTEwgLCBkZXNjcmlwdGlvbiB2YXJjaGFyKDI1NSkgLCBhcmVhX3N0YXR1cyBpbnRlZ2VyIE5PVCBOVUxMICwgc2l0ZV9pZCBiaW5hcnkoMTYpICwgdGVtcGxhdGVfdHlwZSB2YXJjaGFyKDEyOCkgLCByb290X2RpcmVjdG9yeV9wYXRoIHZhcmNoYXIoMjU1KSAsIHNlYXJjaF9zZXJ2ZXJzX3RvX2F0dGFjaCBpbnRlZ2VyICwgbWF4X2NvbGxlY3Rpb25zIGludGVnZXIgLCB0ZW1wX2RpcmVjdG9yeV9wYXRoIHZhcmNoYXIoMjU1KSAsIG1heF9vYmplY3RzX3Blcl9pbmRleCBkb3VibGUgLCBtYXhfc2l6ZV9wZXJfaW5kZXhfa2IgZG91YmxlICwgc3RhbmRieV9hY3RpdmF0aW9uX3ByaW9yaXR5IGludGVnZXIgLCBhZmZpbml0eV9ncm91cF9pZCBiaW5hcnkoMTYpICkgCkNSRUFURSBUQUJMRSBJbmRleFJlcXVlc3RzKHRhcmdldF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgdGFyZ2V0X2lkX2NsYXNzIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBvcGVyYXRpb24gaW50ZWdlciBOT1QgTlVMTCAsIGluZGV4YXRpb25faWQgYmluYXJ5KDE2KSAsIHN0YXR1cyBpbnRlZ2VyIE5PVCBOVUxMICwgcmVxdWVzdF90aW1lIGRhdGV0aW1lIE5PVCBOVUxMICwgc2VxbnVtX2lkZW50aXR5IGJpZ2ludCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCByZXRyeV9jb3VudCBpbnRlZ2VyIE5PVCBOVUxMICwgZWxlbWVudF9zZXF1ZW5jZV9udW1iZXIgaW50ZWdlciAsIHJldHJpZXZhbF9uYW1lX2V4dCB2YXJjaGFyKDY0KSAsIGluZGV4X2pvYl9pZCBiaW5hcnkoMTYpICwgaW5kZXhfYXJlYV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgb2JqZWN0X2lkIGJpbmFyeSgxNikgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSAsIHNlY3VyaXR5X2lkIGJpbmFyeSgxNikgLCBlcG9jaF9pZCBpbnRlZ2VyICwgaG9tZV9pZCBiaW5hcnkoMTYpICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGxhc3RfZmFpbHVyZV9yZWFzb24gbG9uZ3RleHQgLCBpbmRleGluZ19mYWlsdXJlX2NvZGUgaW50ZWdlciAsIHJlbW92YWxfaW5kZXhhdGlvbl9pZCBiaW5hcnkoMTYpICkgCkNSRUFURSBJTkRFWCBJX0luZGV4UmVxdWVzdHM1OSBPTiBJbmRleFJlcXVlc3RzICh0YXJnZXRfaWQpICAKQ1JFQVRFIElOREVYIElfSW5kZXhSZXF1ZXN0czg0IE9OIEluZGV4UmVxdWVzdHMgKG9iamVjdF9pZCkgIApDUkVBVEUgSU5ERVggSV9JbmRleFJlcXVlc3RzODUgT04gSW5kZXhSZXF1ZXN0cyAoaW5kZXhfam9iX2lkKSAgCkNSRUFURSBJTkRFWCBJX0luZGV4UmVxdWVzdHM5NCBPTiBJbmRleFJlcXVlc3RzIChpbmRleF9hcmVhX2lkLCBpbmRleGF0aW9uX2lkLCB0YXJnZXRfaWQsIHNlcW51bV9pZGVudGl0eSkgIApDUkVBVEUgVEFCTEUgQ29tcG9uZW50UmVsYXRpb24ob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSBOT1QgTlVMTCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApIE5PVCBOVUxMICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgTk9UIE5VTEwgLCBjaGlsZF9jb21wb25lbnRfaWQgYmluYXJ5KDE2KSAsIGNoaWxkX3ZlcnNpb25fc2VyaWVzX2lkIGJpbmFyeSgxNikgLCBwYXJlbnRfY29tcG9uZW50X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBjb3B5X3RvX3Jlc2VydmF0aW9uIHRpbnlpbnQgTk9UIE5VTEwgLCBuYW1lIHZhcmNoYXIoMjU1KSAsIGxhYmVsX2JpbmRfdmFsdWUgdmFyY2hhcig2NCkgLCBjb21wb25lbnRfcmVsYXRpb25zaGlwX3R5cGUgaW50ZWdlciBOT1QgTlVMTCAsIHVyaV92YWx1ZSB2YXJjaGFyKDIwODMpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgYmluYXJ5KDE2KSAsIGNvbXBvbmVudF9zb3J0X29yZGVyIGludGVnZXIgTk9UIE5VTEwgLCB2ZXJzaW9uX2JpbmRfdHlwZSBpbnRlZ2VyICwgY2FzY2FkZV9kZWxldGUgaW50ZWdlciBOT1QgTlVMTCAsIHByZXZlbnRfZGVsZXRlIGludGVnZXIgTk9UIE5VTEwgLCBjaGlsZF9jb21wb25lbnRfaWRfaG9tZSBiaW5hcnkoMTYpICwgY2hpbGRfdmVyc2lvbl9zZXJpZXNfaWRfaG9tZSBiaW5hcnkoMTYpICkgCkNSRUFURSBJTkRFWCBJX0NvbXBvbmVudFJlbGF0aW9uNjkgT04gQ29tcG9uZW50UmVsYXRpb24gKGNoaWxkX3ZlcnNpb25fc2VyaWVzX2lkKSAgCkNSRUFURSBJTkRFWCBJX0NvbXBvbmVudFJlbGF0aW9uNzAgT04gQ29tcG9uZW50UmVsYXRpb24gKGNoaWxkX2NvbXBvbmVudF9pZCkgIApDUkVBVEUgSU5ERVggSV9Db21wb25lbnRSZWxhdGlvbjcxIE9OIENvbXBvbmVudFJlbGF0aW9uIChwYXJlbnRfY29tcG9uZW50X2lkKSAgCkNSRUFURSBVTklRVUUgSU5ERVggSV9Db21wb25lbnRSZWxhdGlvbjcyIE9OIENvbXBvbmVudFJlbGF0aW9uIChjb21wb25lbnRfc29ydF9vcmRlciwgb2JqZWN0X2lkKSAgCkNSRUFURSBUQUJMRSBQdWJsaXNoUmVxdWVzdChvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpICwgaG9tZV9pZCBiaW5hcnkoMTYpICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIHB1Ymxpc2hpbmdfc3RhdHVzIGludGVnZXIgTk9UIE5VTEwgLCBzdGF0dXNfZGVzY3JpcHRpb24gdmFyY2hhcigyNTUpICwgaW5wdXRfZG9jdW1lbnQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIG91dHB1dF9mb2xkZXIgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHB1Ymxpc2hfcmVxdWVzdF90eXBlIGludGVnZXIgLCBwdWJsaXNoX3RlbXBsYXRlIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwdWJsaWNhdGlvbl9kb2N1bWVudCBiaW5hcnkoMTYpICwgcHVibGlzaF9zdHlsZV90ZW1wbGF0ZSBiaW5hcnkoMTYpICwgYXBwbHlfZGVmaW5pdGlvbiBsb25ndGV4dCAsIGluaXRpYXRpbmdfdXNlciB2YXJjaGFyKDI1NSkgLCBlcnJvcl9jb2RlIHZhcmNoYXIoMjU1KSAsIGVycm9yX2Rlc2NyaXB0aW9uIHZhcmNoYXIoMjU1KSAsIHJldHJ5X2NvdW50IGludGVnZXIgTk9UIE5VTEwgLCBuZXh0X3JldHJ5X2RhdGUgZGF0ZXRpbWUgLCBkZXF1ZXVlX2hvc3QgdmFyY2hhcigxNSkgLCBsZWFzZV9leHBpcnlfZGF0ZSBkYXRldGltZSApIApDUkVBVEUgSU5ERVggSV9QdWJsaXNoUmVxdWVzdDYwIE9OIFB1Ymxpc2hSZXF1ZXN0IChuZXh0X3JldHJ5X2RhdGUpICAKQ1JFQVRFIFRBQkxFIEhpZXJhcmNoeUluZGV4KHBhcmVudF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgY2hpbGRfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCApIApDUkVBVEUgSU5ERVggSV9IaWVyYXJjaHlJbmRleDYxIE9OIEhpZXJhcmNoeUluZGV4IChwYXJlbnRfaWQsIGNoaWxkX2lkKSAgCkNSRUFURSBJTkRFWCBJX0hpZXJhcmNoeUluZGV4NjIgT04gSGllcmFyY2h5SW5kZXggKGNoaWxkX2lkKSAgCkNSRUFURSBUQUJMRSBJbmRleEpvYihvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCBiaW5hcnkoMTYpICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGRlc2NyaXB0aW9uIHZhcmNoYXIoMjU1KSAsIHRpbWVfbGFzdF9wcm9jZXNzZWQgZGF0ZXRpbWUgLCB0aW1lX2FsbF9zdWJtaXR0ZWQgZGF0ZXRpbWUgLCBqb2Jfc3RhdHVzIGludGVnZXIgTk9UIE5VTEwgLCBqb2JfYWJvcnRfcmVxdWVzdGVkIHRpbnlpbnQgTk9UIE5VTEwgLCBzdWJtaXR0ZWRfY291bnQgaW50ZWdlciAsIHBoYXNlX251bSBpbnRlZ2VyICwgaXRlbV9udW0gaW50ZWdlciAsIHByaW9yX29iamVjdF9pZCBiaW5hcnkoMTYpICwgbGFzdF9tYXhfc2VxX251bSBiaWdpbnQgLCBhY3RpdmVfc2VydmVyIHZhcmNoYXIoMTI4KSAsIHNlcmlhbGl6ZWRfZGF0YSBsb25nYmxvYiAsIGpvYl9wYXVzZV9yZXF1ZXN0ZWQgdGlueWludCAsIGlzX21pZ3JhdGlvbl9qb2IgdGlueWludCAsIGxhc3RfZmFpbHVyZV9kZXNjIGxvbmd0ZXh0ICwgbWF4X3JlcXVlc3RfcXVldWVfc2l6ZSBpbnRlZ2VyICkgCkNSRUFURSBUQUJMRSBJbmRleEpvYkl0ZW0ob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgYmluYXJ5KDE2KSAsIGluZGV4YXRpb25faWQgYmluYXJ5KDE2KSAsIGluZGV4X2FyZWFfaWQgYmluYXJ5KDE2KSAsIGNsYXNzX2RlZmluaXRpb25faWQgYmluYXJ5KDE2KSAsIHNpbmdsZV9pdGVtX2lkIGJpbmFyeSgxNikgLCBzaW5nbGVfaXRlbV9pZF9jbGFzcyBiaW5hcnkoMTYpICwgaW5jbHVkZV9zdWJjbGFzc2VzIHRpbnlpbnQgLCByZXN5bmNfbW9kaWZpY2F0aW9uX2RhdGUgZGF0ZXRpbWUgKSAKQ1JFQVRFIFRBQkxFIENvbnRlbnRRdWV1ZShvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHNlcW51bV9pZGVudGl0eSBiaWdpbnQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBsZWFzZV9leHBpcnlfZGF0ZSBkYXRldGltZSBOT1QgTlVMTCAsIHNlc3Npb25faWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVsZW1lbnRfc2VxdWVuY2VfbnVtYmVyIGludGVnZXIgTk9UIE5VTEwgLCBjb21tYW5kX3R5cGUgaW50ZWdlciBOT1QgTlVMTCAsIHByb2Nlc3NfYXR0ZW1wdHMgaW50ZWdlciAsIHNvdXJjZV9vYmplY3RfaWQgYmluYXJ5KDE2KSAsIHN0b3JhZ2VfYXJlYV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgY29udGVudF9zaXplIGRvdWJsZSBOT1QgTlVMTCAsIHNlcmlhbGl6ZWRfZGF0YSBsb25nYmxvYiBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lIE5PVCBOVUxMICkgCkNSRUFURSBJTkRFWCBJX0NvbnRlbnRRdWV1ZTYzIE9OIENvbnRlbnRRdWV1ZSAoc2Vzc2lvbl9pZCkgIApDUkVBVEUgSU5ERVggSV9Db250ZW50UXVldWU2NCBPTiBDb250ZW50UXVldWUgKG9iamVjdF9pZCkgIApDUkVBVEUgSU5ERVggSV9Db250ZW50UXVldWU2NSBPTiBDb250ZW50UXVldWUgKGxlYXNlX2V4cGlyeV9kYXRlKSAgCkNSRUFURSBUQUJMRSBDb250ZW50VXBsb2FkKGVsZW1lbnRfaWQgdmFyY2hhcig0OCkgTk9UIE5VTEwgLCBvZmZzZXQgaW50ZWdlciBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgY29udGVudCBsb25nYmxvYiApIApDUkVBVEUgVU5JUVVFIElOREVYIElfQ29udGVudFVwbG9hZDY2IE9OIENvbnRlbnRVcGxvYWQgKGVsZW1lbnRfaWQsIG9mZnNldCkgIApDUkVBVEUgVEFCTEUgRXh0ZXJuYWxJZGVudGl0eShvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgcmVwb3NpdG9yeV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXh0ZXJuYWxfaWQgdmFyY2hhcigyNTYpIE5PVCBOVUxMICwgcmVwbGljYXRpb25fZGF0YSBsb25nYmxvYiApIApDUkVBVEUgSU5ERVggSV9FeHRlcm5hbElkZW50aXR5NzUgT04gRXh0ZXJuYWxJZGVudGl0eSAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgVU5JUVVFIElOREVYIElfRXh0ZXJuYWxJZGVudGl0eTc2IE9OIEV4dGVybmFsSWRlbnRpdHkgKGV4dGVybmFsX2lkLCByZXBvc2l0b3J5X2lkKSAgCkNSRUFURSBUQUJMRSBSZXBsaWNhdGlvblF1ZXVlKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgc291cmNlX29iamVjdF9pZCBiaW5hcnkoMTYpICwgc291cmNlX29iamVjdF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgZGVzdGluYXRpb25faWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGRlc3RpbmF0aW9uX2lkX2NsYXNzIGJpbmFyeSgxNikgLCByZXBsaWNhdGlvbl9ncm91cF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgb3BlcmF0aW9uIGludGVnZXIgLCBzZXJpYWxpemVkX2RhdGEgbG9uZ2Jsb2IgLCBzZXFudW1faWRlbnRpdHkgYmlnaW50IE5PVCBOVUxMICwgaGVsZF91bnRpbF9kYXRlIGRhdGV0aW1lICwgcmV0cnlfY291bnQgaW50ZWdlciAsIGxlYXNlX2hvbGRlcl9pZCBiaW5hcnkoMTYpICwgbGVhc2VfY291bnQgaW50ZWdlciAsIHN0YXR1cyBpbnRlZ2VyICwgbGFzdF9mYWlsdXJlX2Rlc2MgbG9uZ3RleHQgLCBleGNsdXNpb25faWQgYmluYXJ5KDE2KSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfUmVwbGljYXRpb25RdWV1ZTc3IE9OIFJlcGxpY2F0aW9uUXVldWUgKHNlcW51bV9pZGVudGl0eSkgIApDUkVBVEUgVEFCTEUgRXh0ZXJuYWxBbGlhcyhvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgZXh0ZXJuYWxfcmVwb19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgYWxpYXNfZGlyZWN0aW9uIGludGVnZXIgTk9UIE5VTEwgLCBjbGFzc19pZGVudGl0eSB2YXJjaGFyKDEyOCkgTk9UIE5VTEwgLCBwcm9wZXJ0eV9pZGVudGl0eSB2YXJjaGFyKDEyOCkgKSAKQ1JFQVRFIElOREVYIElfRXh0ZXJuYWxBbGlhczc4IE9OIEV4dGVybmFsQWxpYXMgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpICAKQ1JFQVRFIFRBQkxFIFRhc2sob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCByZXBsaWNhdGlvbl9ncm91cF9pZCBiaW5hcnkoMTYpICwgc3RhdGUgaW50ZWdlciAsIGNvb3JkaW5hdG9yX2lkIGJpbmFyeSgxNikgLCBjb29yZGluYXRvcl9pZF9jbGFzcyBiaW5hcnkoMTYpICwgc3RhcnRfZGF0ZSBkYXRldGltZSAsIGNvbXBsZXRlX2RhdGUgZGF0ZXRpbWUgLCBsYXN0X2ZhaWx1cmVfZGVzYyBsb25ndGV4dCAsIHJlY292ZXJ5X2l0ZW1faWQgYmluYXJ5KDE2KSApIApDUkVBVEUgSU5ERVggSV9UYXNrODAgT04gVGFzayAoY29vcmRpbmF0b3JfaWQpICAKQ1JFQVRFIFRBQkxFIFRhc2tSZWxhdGlvbnNoaXAob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCByZXBsaWNhdGlvbl9ncm91cF9pZCBiaW5hcnkoMTYpICwgcHJlZGVjZXNzb3JfaWQgYmluYXJ5KDE2KSAsIHN1Y2Nlc3Nvcl9pZCBiaW5hcnkoMTYpICwgZGVmaW5lc19hbHRfcHJlZGVjZXNzb3IgdGlueWludCAsIHJlY292ZXJ5X2l0ZW1faWQgYmluYXJ5KDE2KSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfVGFza1JlbGF0aW9uc2hpcDgxIE9OIFRhc2tSZWxhdGlvbnNoaXAgKHByZWRlY2Vzc29yX2lkLCBzdWNjZXNzb3JfaWQpICAKQ1JFQVRFIElOREVYIElfVGFza1JlbGF0aW9uc2hpcDgyIE9OIFRhc2tSZWxhdGlvbnNoaXAgKHN1Y2Nlc3Nvcl9pZCkgIApDUkVBVEUgVEFCTEUgVGV4dEluZGV4KG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIGJpbmFyeSgxNikgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIGluZGV4X25hbWUgdmFyY2hhcig0MDAwKSBOT1QgTlVMTCAsIHN0YXR1cyBpbnRlZ2VyIE5PVCBOVUxMICwgY3VycmVudF9pbmRleF9zZXJ2ZXIgYmluYXJ5KDE2KSAsIGxlYXNlX2V4cGlyeV90aW1lIGRhdGV0aW1lICwgaW5kZXhfb2JqZWN0X2NvdW50IGRvdWJsZSAsIGluZGV4X3NpemVfa2IgZG91YmxlICwgaW5kZXhpbmdfc3RhdHVzIGludGVnZXIgLCByZWNlbnRfb3BzX3N1Ym1pdHRlZCBpbnRlZ2VyICwgcmVjZW50X29wc19kdXJhdGlvbiBkb3VibGUgKSAKQ1JFQVRFIFRBQkxFIEF1ZGl0UG9saWN5KG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgYmluYXJ5KDE2KSAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyKDY0KSBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGRpc3Bvc2l0aW9uX3J1bGUgdmFyY2hhcigyNTUpICwgZW5hYmxlZF9ib29sIHRpbnlpbnQgTk9UIE5VTEwgLCBjb21wbGV0aW9uX3dhaXRfaW50ZXJ2YWwgaW50ZWdlciApIApDUkVBVEUgVEFCTEUgQXVkaXRQcm9jZXNzaW5nKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgZGlzcGxheV9uYW1lIHZhcmNoYXIoNjQpIE5PVCBOVUxMICwgaG9tZV9pZCBiaW5hcnkoMTYpICwgbGFzdF9wcm9jZXNzZWQgZG91YmxlIE5PVCBOVUxMICkgCkNSRUFURSBUQUJMRSBUZXh0SW5kZXhQYXJ0aXRpb24ob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgYmluYXJ5KDE2KSAsIHBhcnRpdGlvbl9wcm9wX25hbWUgdmFyY2hhcig0MDAwKSBOT1QgTlVMTCAsIGRhdGF0eXBlIGludGVnZXIgTk9UIE5VTEwgLCBwYXJ0aXRpb25fc3RhcnRfZGF0ZSBkYXRldGltZSAsIHBhcnRpdGlvbl9lbmRfZGF0ZSBkYXRldGltZSAsIHBhcnRpdGlvbl9zdHJpbmdfdmFsIHZhcmNoYXIoNDAwMCkgKSAKQ1JFQVRFIFRBQkxFIFByZXByb2Nlc3NvckRlZmluaXRpb24ob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgYmluYXJ5KDE2KSAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyKDY0KSBOT1QgTlVMTCAsIGVuYWJsZWRfYm9vbCB0aW55aW50IE5PVCBOVUxMICwgYWN0aW9uX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgKSAKQ1JFQVRFIFRBQkxFIFNjZkRhdGEoc2NmX2lkIGludGVnZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgYmluYXJ5X2RhdGEgdmFyYmluYXJ5KDUxMikgKSAKQ1JFQVRFIFRBQkxFIEhvbGRPYmplY3Qob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkaXNwbGF5X25hbWUgdmFyY2hhcig2NCkgLCBkZXNjcmlwdGlvbiB2YXJjaGFyKDI1NSkgLCByZXBsaWNhdGlvbl9ncm91cF9pZCBiaW5hcnkoMTYpICkgCkNSRUFURSBUQUJMRSBIb2xkUmVsYXRpb25zaGlwKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgYmluYXJ5KDE2KSAsIGhvbGRfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGhlbGRfb2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBoZWxkX29iamVjdF9pZF9jbGFzcyBiaW5hcnkoMTYpIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9Ib2xkUmVsYXRpb25zaGlwODYgT04gSG9sZFJlbGF0aW9uc2hpcCAoaGVsZF9vYmplY3RfaWQsIGhvbGRfaWQpICAKQ1JFQVRFIFRBQkxFIFN3ZWVwKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgZGlzcGxheV9uYW1lIHZhcmNoYXIoNjQpICwgZGVzY3JpcHRpb24gdmFyY2hhcigyNTUpICwgbGFzdF9vYmplY3RfaWQgYmluYXJ5KDE2KSAsIGhlbGRfdW50aWxfZGF0ZSBkYXRldGltZSAsIHN0YXJ0X2RhdGUgZGF0ZXRpbWUgLCBlbmRfZGF0ZSBkYXRldGltZSAsIG5leHRfc3RhcnRfdGltZSBkYXRldGltZSAsIG1heGltdW1fd29ya2VycyBpbnRlZ2VyICwgaW50ZXJfc3dlZXBfZGVsYXkgaW50ZWdlciAsIG9iamVjdHNfZXhhbWluZWQgZG91YmxlICwgb2JqZWN0c19wcm9jZXNzZWQgZG91YmxlICwgb2JqZWN0c19mYWlsZWQgZG91YmxlICwgaXNfZW5hYmxlZCB0aW55aW50ICwgbWF4aW11bV9mYWlsdXJlcyBpbnRlZ2VyICwgZWZmZWN0aXZlX2JlZ2luX2RhdGUgZGF0ZXRpbWUgLCBlZmZlY3RpdmVfZW5kX2RhdGUgZGF0ZXRpbWUgLCBzdG9yYWdlX3BvbGljeV9pZCBiaW5hcnkoMTYpICwgc3dlZXBfdGFyZ2V0X2lkIGJpbmFyeSgxNikgLCBpbmNsdWRlX3N1YmNsYXNzZXMgdGlueWludCAsIGZpbHRlcl9leHByZXNzaW9uIGxvbmd0ZXh0ICwgbGVhc2VfaG9sZGVyX2lkIGJpbmFyeSgxNikgLCBpbWFnZV9mb3JtYXQgaW50ZWdlciAsIGltYWdlX3NpemUgaW50ZWdlciAsIGltYWdlX2NvbG9yIGludGVnZXIgLCByZXRyeV93YWl0X2ludGVydmFsIGludGVnZXIgLCBiYXRjaF9zaXplIGludGVnZXIgLCBzd2VlcF9hY3Rpb25faWQgYmluYXJ5KDE2KSAsIGN1cnJlbnRfb2JqZWN0c19leGFtaW5lZCBkb3VibGUgLCBjdXJyZW50X29iamVjdHNfcHJvY2Vzc2VkIGRvdWJsZSAsIGN1cnJlbnRfb2JqZWN0c19mYWlsZWQgZG91YmxlICwgcmV0ZW50aW9uX2R1cmF0aW9uIGludGVnZXIgLCByZXRlbnRpb25fdXBkYXRlX3RpbWVfdW5pdCBpbnRlZ2VyICwgc3BlY2lmaWNfZGF0ZSBkYXRldGltZSAsIGJhc2VfZGF0ZV9wcm9wZXJ0eV9uYW1lIHZhcmNoYXIoNjQpICwgY29tcGxldGVkX2l0ZXJhdGlvbnMgaW50ZWdlciAsIHJlY29yZF9mYWlsdXJlcyB0aW55aW50ICwgZW5kX3JlcGxpY2F0aW9uX2FmdGVyX21vdmUgdGlueWludCAsIGludGVyX2JhdGNoX2RlbGF5IGludGVnZXIgLCBzd2VlcF9tb2RlIGludGVnZXIgLCBxdWVyeV90aW1lb3V0IGludGVnZXIgLCBlZmZlY3RpdmVfc3FsIGxvbmd0ZXh0ICwgbGFzdF9mYWlsdXJlX3JlYXNvbiBsb25ndGV4dCAsIGZhaWx1cmVfY291bnQgaW50ZWdlciAsIHNlYXJjaF9jb250aW51YXRpb25fY29va2llIGxvbmd0ZXh0ICwgc2VhcmNoX29iamVjdF9zdG9yZV9pZCBiaW5hcnkoMTYpICwgbWF4aW11bV9yb3dfY291bnQgaW50ZWdlciAsIGN1cnJlbnRfb2JqZWN0c19kZWZlcnJlZCBkb3VibGUgLCBvYmplY3RzX2RlZmVycmVkIGRvdWJsZSAsIGNvcHlfcmV0YWluZWQgdGlueWludCAsIHVwZGF0ZV9zdG9yYWdlX3BvbGljeSB0aW55aW50ICkgCkNSRUFURSBUQUJMRSBTd2VlcFJlbGF0aW9uc2hpcChvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCBiaW5hcnkoMTYpICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIHBvbGljeV9pZCBiaW5hcnkoMTYpICwgcG9saWN5X2lkX2NsYXNzIGJpbmFyeSgxNikgLCBzd2VlcF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9Td2VlcFJlbGF0aW9uc2hpcDg3IE9OIFN3ZWVwUmVsYXRpb25zaGlwIChwb2xpY3lfaWQsIHN3ZWVwX2lkKSAgCkNSRUFURSBUQUJMRSBTd2VlcFBvbGljeShvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCBiaW5hcnkoMTYpICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyKDY0KSAsIGRlc2NyaXB0aW9uIHZhcmNoYXIoMjU1KSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIGJpbmFyeSgxNikgLCBpc19lbmFibGVkIHRpbnlpbnQgLCBpbmNsdWRlX3N1YmNsYXNzZXMgdGlueWludCAsIGVmZmVjdGl2ZV9iZWdpbl9kYXRlIGRhdGV0aW1lICwgZWZmZWN0aXZlX2VuZF9kYXRlIGRhdGV0aW1lICwgc3RvcmFnZV9wb2xpY3lfaWQgYmluYXJ5KDE2KSAsIGZpbHRlcl9leHByZXNzaW9uIGxvbmd0ZXh0ICwgcmV0ZW50aW9uX2R1cmF0aW9uIGludGVnZXIgLCBzd2VlcF90YXJnZXRfaWQgYmluYXJ5KDE2KSAsIHNwZWNpZmljX2RhdGUgZGF0ZXRpbWUgLCBiYXNlX2RhdGVfcHJvcGVydHlfbmFtZSB2YXJjaGFyKDY0KSAsIHJldGVudGlvbl91cGRhdGVfdGltZV91bml0IGludGVnZXIgLCBvYmplY3RzX2V4YW1pbmVkIGRvdWJsZSAsIG9iamVjdHNfcHJvY2Vzc2VkIGRvdWJsZSAsIHN3ZWVwX2FjdGlvbl9pZCBiaW5hcnkoMTYpICwgb2JqZWN0c19mYWlsZWQgZG91YmxlICwgY3VycmVudF9vYmplY3RzX2V4YW1pbmVkIGRvdWJsZSAsIGN1cnJlbnRfb2JqZWN0c19wcm9jZXNzZWQgZG91YmxlICwgY3VycmVudF9vYmplY3RzX2ZhaWxlZCBkb3VibGUgLCBjb21wbGV0ZWRfaXRlcmF0aW9ucyBpbnRlZ2VyICwgZmFpbF9yZWNvcmRfaXRlcmF0aW9uX2tlZXAgaW50ZWdlciAsIGVuZF9yZXBsaWNhdGlvbl9hZnRlcl9tb3ZlIHRpbnlpbnQgLCBzd2VlcF9tb2RlIGludGVnZXIgLCB1cGRhdGVfc3RvcmFnZV9wb2xpY3kgdGlueWludCAsIGF1dGhvcml6YXRpb25fbW9kZSBpbnRlZ2VyICkgCkNSRUFURSBUQUJMRSBUaHVtYm5haWwob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCByZXBsaWNhdGlvbl9ncm91cF9pZCBiaW5hcnkoMTYpICwgaW5wdXRfZG9jdW1lbnQgYmluYXJ5KDE2KSAsIGVsZW1lbnRfc2VxdWVuY2VfbnVtYmVyIGludGVnZXIgLCBpbWFnZSBsb25nYmxvYiAsIGltYWdlX3NpemUgaW50ZWdlciAsIG1pbWVfdHlwZSB2YXJjaGFyKDk2KSAsIGlzX3N5c3RlbV9nZW5lcmF0ZWQgdGlueWludCAsIHJlY292ZXJ5X2l0ZW1faWQgYmluYXJ5KDE2KSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfVGh1bWJuYWlsODggT04gVGh1bWJuYWlsIChpbnB1dF9kb2N1bWVudCwgZWxlbWVudF9zZXF1ZW5jZV9udW1iZXIpICAKQ1JFQVRFIFRBQkxFIFRodW1ibmFpbFJlcXVlc3Qob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBoZWxkX3VudGlsX2RhdGUgZGF0ZXRpbWUgLCBsZWFzZV9ob2xkZXJfaWQgYmluYXJ5KDE2KSAsIGZhaWx1cmVfY291bnQgaW50ZWdlciAsIGxhc3RfZmFpbHVyZV9yZWFzb24gbG9uZ3RleHQgLCBlbnRyeV9zdGF0dXMgaW50ZWdlciAsIGRlZmVycmFsX2NvdW50IGludGVnZXIgLCBkZWZlcnJhbF9kYXRhIGxvbmdibG9iICwgaW5wdXRfZG9jdW1lbnQgYmluYXJ5KDE2KSAsIGVsZW1lbnRfc2VxdWVuY2VfbnVtYmVyIGludGVnZXIgKSAKQ1JFQVRFIElOREVYIElfVGh1bWJuYWlsUmVxdWVzdDkzIE9OIFRodW1ibmFpbFJlcXVlc3QgKGxlYXNlX2hvbGRlcl9pZCkgIApDUkVBVEUgVEFCTEUgUmVjb3ZlcnlCaW4ob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkaXNwbGF5X25hbWUgdmFyY2hhcig2NCkgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgKSAKQ1JFQVRFIFRBQkxFIFJlY292ZXJ5SXRlbShvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIHJlY292ZXJ5X2Jpbl9pZCBiaW5hcnkoMTYpICwgZGVsZXRlZF9vYmplY3RfYmxvYiBsb25nYmxvYiAsIGNsZWFudXBfY29tbWFuZHMgbG9uZ2Jsb2IgLCByZWNvdmVyYWJsZV9jb3VudCBpbnRlZ2VyICwgb3JpZ2luYWxfb2JqZWN0X2lkIGJpbmFyeSgxNikgLCBvcmlnaW5hbF9jbGFzc19pZCBiaW5hcnkoMTYpICwgb3JpZ2luYWxfbmFtZSB2YXJjaGFyKDI1NSkgLCBvcmlnaW5hbF9jcmVhdG9yIHZhcmNoYXIoODApICwgb3JpZ2luYWxfY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBvcmlnaW5hbF9tb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG9yaWdpbmFsX21vZGlmeV9kYXRlIGRhdGV0aW1lICwgb3JpZ2luYWxfb2JqZWN0X2lkX2NsYXNzIGJpbmFyeSgxNikgKSAKQ1JFQVRFIElOREVYIElfUmVjb3ZlcnlJdGVtODkgT04gUmVjb3ZlcnlJdGVtIChyZWNvdmVyeV9iaW5faWQpICAKQ1JFQVRFIFRBQkxFIFRpbWVzbG90KG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIGJpbmFyeSgxNikgLCBzbG90X3dlZWtkYXkgaW50ZWdlciAsIHN0YXJ0X21pbnNfcGFzdF9taWRuaWdodCBpbnRlZ2VyICwgc2xvdF9kdXJhdGlvbiBpbnRlZ2VyICkgCkNSRUFURSBJTkRFWCBJX1RpbWVzbG90OTAgT04gVGltZXNsb3QgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpICAKQ1JFQVRFIFRBQkxFIFN3ZWVwUmVzdWx0KG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgc291cmNlX29iamVjdF9pZCBiaW5hcnkoMTYpICwgc291cmNlX29iamVjdF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgY29udHJvbGxpbmdfb2JqZWN0X2lkIGJpbmFyeSgxNikgLCBjb250cm9sbGluZ19vYmplY3RfaWRfY2xhc3MgYmluYXJ5KDE2KSAsIGZhaWx1cmVfZGVzY3JpcHRpb24gdmFyY2hhcigxMDI0KSAsIGl0ZXJhdGlvbl9udW1iZXIgaW50ZWdlciAsIHN3ZWVwX3Jlc3VsdF90eXBlIGludGVnZXIgKSAKQ1JFQVRFIFRBQkxFIEFkZE9uUmVjb3JkKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIGJpbmFyeSgxNikgLCBpbnN0YWxsZXIgdmFyY2hhcig4MCkgLCBpbnN0YWxsX2RhdGUgZGF0ZXRpbWUgLCBpbnN0YWxsX3N0YXR1cyBpbnRlZ2VyICwgaW5zdGFsbF9yZXBvcnQgbG9uZ3RleHQgLCBhZGRvbl9pZCBiaW5hcnkoMTYpICkgCkNSRUFURSBUQUJMRSBJbmRleGVkQ29sdW1uKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIGJpbmFyeSgxNikgLCB0YWJsZV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgY29sdW1uX25hbWUgdmFyY2hhcigzMCkgTk9UIE5VTEwgLCBzb3J0X29yZGVyIGludGVnZXIgTk9UIE5VTEwgKSAKQ1JFQVRFIFRBQkxFIEluZGV4RGVmaW5pdGlvbihvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgaW5kZXhfbmFtZSB2YXJjaGFyKDEyOCkgTk9UIE5VTEwgLCBzeXNfb3duZWRfYm9vbCB0aW55aW50IE5PVCBOVUxMICwgc3RvcmFnZV9sb2NhdGlvbiB2YXJjaGFyKDEyOCkgLCB1bmlxdWVfYm9vbCB0aW55aW50IE5PVCBOVUxMICwgY2FzZV9pbnNlbnNpdGl2ZSB0aW55aW50ICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9JbmRleERlZmluaXRpb245NiBPTiBJbmRleERlZmluaXRpb24gKGluZGV4X25hbWUpICAKQ1JFQVRFIFRBQkxFIFN0b3JhZ2VEZXZpY2Uob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkaXNwbGF5X25hbWUgdmFyY2hhcig2NCkgTk9UIE5VTEwgLCBkZXNjcmlwdGlvbiB2YXJjaGFyKDI1NSkgLCBzaXRlX2lkIGJpbmFyeSgxNikgLCBwcm9nX2lkX3N0cmluZyB2YXJjaGFyKDI1NSkgLCBjb2RlX21vZHVsZV9pZCBiaW5hcnkoMTYpICwgZnNfYWRzX3BhdGggdmFyY2hhcigxMjAwKSAsIHRvcF9ub2RlcyBpbnRlZ2VyICwgYm90dG9tX25vZGVzIGludGVnZXIgLCB1c2VybmFtZSB2YXJjaGFyKDEyOCkgLCBwYXNzd29yZCB2YXJiaW5hcnkoMTI4KSAsIGRldmljZV91cmwgdmFyY2hhcigxMDI0KSAsIGF1dGhlbnRpY2F0aW9uX3VybCB2YXJjaGFyKDEwMjQpICwgY29udGFpbmVyX25hbWUgdmFyY2hhcigxMjgpICwgc3luY19yZXBsX3N1cHBvcnRlZCB0aW55aW50ICwgZGVsZXRlX21ldGhvZF9zdXBwb3J0ZWQgaW50ZWdlciAsIGNlcnRfdmFsaWRhdGlvbiB0aW55aW50ICwgcmVnaW9uX25hbWUgdmFyY2hhcigxMjgpICwgc2VjdXJpdHlfdG9rZW4gbG9uZ2Jsb2IgKSAKQ1JFQVRFIFRBQkxFIERldmljZUNvbm5lY3Rpb24ob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBwYXJlbnRfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgYmluYXJ5KDE2KSAsIGRldmljZV9pZCBiaW5hcnkoMTYpICwgcmVwbGljYV90eXBlIGludGVnZXIgKSAKQ1JFQVRFIElOREVYIElfRGV2aWNlQ29ubmVjdGlvbjk3IE9OIERldmljZUNvbm5lY3Rpb24gKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpICAKQ1JFQVRFIFRBQkxFIFNpdGVTZXR0aW5ncyhvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgc2l0ZV9pZCBiaW5hcnkoMTYpICwgcmVwbGljYV90eXBlIGludGVnZXIgKSAKQ1JFQVRFIElOREVYIElfU2l0ZVNldHRpbmdzOTggT04gU2l0ZVNldHRpbmdzIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgCkNSRUFURSBUQUJMRSBDb250ZW50QmFja291dFF1ZXVlKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgaGVsZF91bnRpbF9kYXRlIGRhdGV0aW1lICwgbGVhc2VfaG9sZGVyX2lkIGJpbmFyeSgxNikgLCBmYWlsdXJlX2NvdW50IGludGVnZXIgLCBsYXN0X2ZhaWx1cmVfcmVhc29uIGxvbmd0ZXh0ICwgZW50cnlfc3RhdHVzIGludGVnZXIgLCBkZWZlcnJhbF9jb3VudCBpbnRlZ2VyICwgZGVmZXJyYWxfZGF0YSBsb25nYmxvYiAsIGV4cGlyYXRpb25fdGltZSBkYXRldGltZSAsIHN0b3JhZ2VfYXJlYV9pZCBiaW5hcnkoMTYpICwgYmF0Y2hfaWQgYmluYXJ5KDE2KSAsIG9wZXJhdGlvbl9kYXRhIGxvbmdibG9iICwgcmVwbGljYV9kYXRhIGxvbmdibG9iICkgCkNSRUFURSBJTkRFWCBJX0NvbnRlbnRCYWNrb3V0UXVldWU5OSBPTiBDb250ZW50QmFja291dFF1ZXVlIChsZWFzZV9ob2xkZXJfaWQpICAKQ1JFQVRFIFRBQkxFIENvbnRlbnREZWxldGlvblF1ZXVlKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgaGVsZF91bnRpbF9kYXRlIGRhdGV0aW1lICwgbGVhc2VfaG9sZGVyX2lkIGJpbmFyeSgxNikgLCBmYWlsdXJlX2NvdW50IGludGVnZXIgLCBsYXN0X2ZhaWx1cmVfcmVhc29uIGxvbmd0ZXh0ICwgZW50cnlfc3RhdHVzIGludGVnZXIgLCBkZWZlcnJhbF9jb3VudCBpbnRlZ2VyICwgZGVmZXJyYWxfZGF0YSBsb25nYmxvYiAsIHJlcGxpY2FfZGF0YSBsb25nYmxvYiAsIG9wZXJhdGlvbl9kYXRhIGxvbmdibG9iICwgc3RvcmFnZV9hcmVhX2lkIGJpbmFyeSgxNikgKSAKQ1JFQVRFIElOREVYIElfQ29udGVudERlbGV0aW9uUXVldWUxMDAgT04gQ29udGVudERlbGV0aW9uUXVldWUgKGxlYXNlX2hvbGRlcl9pZCkgIApDUkVBVEUgVEFCTEUgQ29udGVudFJlcGxpY2F0aW9uUXVldWUob2JqZWN0X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCBiaW5hcnkoMTYpICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgYmluYXJ5KDE2KSAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBoZWxkX3VudGlsX2RhdGUgZGF0ZXRpbWUgLCBsZWFzZV9ob2xkZXJfaWQgYmluYXJ5KDE2KSAsIGZhaWx1cmVfY291bnQgaW50ZWdlciAsIGxhc3RfZmFpbHVyZV9yZWFzb24gbG9uZ3RleHQgLCBlbnRyeV9zdGF0dXMgaW50ZWdlciAsIGRlZmVycmFsX2NvdW50IGludGVnZXIgLCBkZWZlcnJhbF9kYXRhIGxvbmdibG9iICwgY29udGVudF9pZCBiaW5hcnkoMTYpICwgaGFzaF9zZXF1ZW5jZSBkb3VibGUgLCBzdG9yYWdlX2FyZWFfaWQgYmluYXJ5KDE2KSAsIHJlcGxpY2FfZGF0YSBsb25nYmxvYiAsIGNvbnRlbnRfc2l6ZSBkb3VibGUgLCBzaWduYXR1cmUgdmFyYmluYXJ5KDMyKSAsIG9wZXJhdGlvbl9kYXRhIGxvbmdibG9iICkgCkNSRUFURSBJTkRFWCBJX0NvbnRlbnRSZXBsaWNhdGlvblF1ZXVlMTAxIE9OIENvbnRlbnRSZXBsaWNhdGlvblF1ZXVlIChsZWFzZV9ob2xkZXJfaWQpICAKQ1JFQVRFIFRBQkxFIFNpZFRvR3VpZChvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBzaWQgdmFyYmluYXJ5KDc1MCkgTk9UIE5VTEwgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1NpZFRvR3VpZDEwMyBPTiBTaWRUb0d1aWQgKHNpZCkgIApDUkVBVEUgVEFCTEUgQ29udmVyc2lvblNldHRpbmdzKG9iamVjdF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIGJpbmFyeSgxNikgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgZGlzcGxheV9uYW1lIHZhcmNoYXIoNjQpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgYmluYXJ5KDE2KSAsIHJlY292ZXJ5X2l0ZW1faWQgYmluYXJ5KDE2KSApIApDUkVBVEUgVEFCTEUgUm9sZUFjY2Vzc0RlZihvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCBiaW5hcnkoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyBiaW5hcnkoMTYpICwgYWNjZXNzX2NsYXNzX2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBhY2Nlc3NfbWFzayBpbnRlZ2VyICkgCkNSRUFURSBJTkRFWCBJX1JvbGVBY2Nlc3NEZWYxMDUgT04gUm9sZUFjY2Vzc0RlZiAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgVEFCTEUgUm9sZU9iamVjdChvYmplY3RfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgYmluYXJ5KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIGJpbmFyeSgxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCBiaW5hcnkoMTYpICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyKDY0KSBOT1QgTlVMTCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIGJpbmFyeSgxNikgLCByZWNvdmVyeV9pdGVtX2lkIGJpbmFyeSgxNikgLCBzZXJpYWxpemVkX2RhdGEgbG9uZ2Jsb2IgLCBjYWNoZV91c24gYmlnaW50ICwgdXNuX2luZGV4IGludGVnZXIgLCBkZXNjcmlwdGlvbiB2YXJjaGFyKDI1NSkgKSAKQ1JFQVRFIElOREVYIElfUm9sZU9iamVjdDEwNiBPTiBSb2xlT2JqZWN0ICh1c25faW5kZXgsIGNhY2hlX3Vzbiwgb2JqZWN0X2lkLCBlcG9jaF9pZCkgIApDUkVBVEUgVEFCTEUgUm9sZUNhY2hlVVNOKHVzbl9pbmRleCBpbnRlZ2VyIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIGNhY2hlX3VzbiBiaWdpbnQgTk9UIE5VTEwgKSAKQUxURVIgVEFCTEUgSW5kZXhSZXF1ZXN0cyBNT0RJRlkgQ09MVU1OIHNlcW51bV9pZGVudGl0eSBCSUdJTlQgQVVUT19JTkNSRU1FTlQgCkFMVEVSIFRBQkxFIENvbnRlbnRRdWV1ZSBNT0RJRlkgQ09MVU1OIHNlcW51bV9pZGVudGl0eSBCSUdJTlQgQVVUT19JTkNSRU1FTlQgCkFMVEVSIFRBQkxFIFJlcGxpY2F0aW9uUXVldWUgTU9ESUZZIENPTFVNTiBzZXFudW1faWRlbnRpdHkgQklHSU5UIEFVVE9fSU5DUkVNRU5UIApBTFRFUiBUQUJMRSBFdmVudCBNT0RJRlkgQ09MVU1OIGF1ZGl0X3NlcXVlbmNlIEJJR0lOVCBBVVRPX0lOQ1JFTUVOVCAKQUxURVIgVEFCTEUgU2NmRGF0YSBNT0RJRlkgQ09MVU1OIHNjZl9pZCBJTlQgQVVUT19JTkNSRU1FTlQgCncEAEEAB3QAEVRleHRTZWFyY2hTZXJ2ZXJzdwYACQcFAgRxAH4ACnVxAH4ACwAAABAXb9B9WPVATp2ngpsnJofzcQB+ABN3BABBAAd0ABNGaXhlZENvbnRlbnREZXZpY2VzdwYACQcFAgRxAH4ACnVxAH4ACwAAABAXb9B9WPVATp2ngpsnJofzcQB+ABV3BABBAAd0ABJQRUNvbm5lY3Rpb25Qb2ludHN3BgAJBwUCBHEAfgAKdXEAfgALAAAAEBdv0H1Y9UBOnaeCmycmh/NxAH4AF3cEAEEAB3QABVNpdGVzdwYACQcFAgRxAH4ACnVxAH4ACwAAABAXb9B9WPVATp2ngpsnJofzcQB+ABl3BAABAAd0ABBDbGFzc0Rlc2NyaXB0aW9udwQACQIEcQB+ABt1cQB+AAsAAAAQi+3u/BeuHEStBFblYCVTMXcEAEEAB3QABkFkZE9uc3cGAAkHBQIEcQB+AAp1cQB+AAsAAAAQF2/QfVj1QE6dp4KbJyaH83EAfgAddwQAAQAIdAAWT2JqZWN0U3RvcmVTY2hlbWFNU1NRTHTF4i0tIEdlbmVyYXRlZCBmb3IgU1FMIFNlcnZlciBkYXRhYmFzZXMgb246IFRodSBTZXAgMDUgMTc6NDA6MzYgQ0RUIDIwMTkKLS0gVGhlIGZvbGxvd2luZyBTY2hlbWFSZXZpc2lvbiBjb21tZW50IG11c3QgYmUgcHJlc2VudCBhbmQgbXVzdCBjb3JyZXNwb25kIHRvCi0tIHRoZSBwcm9wZXIgc2NoZW1hIHJldmlzaW9uIGxldmVsIGF0IHRoZSB0aW1lIHRoZSBPYmplY3RTdG9yZSBpcyBjcmVhdGVkLgotLSBTY2hlbWFSZXZpc2lvbjogMjQuMS41Ci0tIApDUkVBVEUgVEFCTEUgRG9jVmVyc2lvbihvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGhvbWVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIHN0b3JhZ2VfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIGlzX3Jlc2VydmVkIHRpbnlpbnQgTk9UIE5VTEwgLCBpc19jdXJyZW50IHRpbnlpbnQgTk9UIE5VTEwgLCBpc19mcm96ZW4gdGlueWludCBOT1QgTlVMTCAsIHZlcnNpb25fc2VyaWVzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBjb250ZW50X3NpemUgZmxvYXQgLCBsb2NrX3Rva2VuIHVuaXF1ZWlkZW50aWZpZXIgLCBsb2NrX3RpbWVvdXQgaW50ICwgbG9ja19vd25lciBudmFyY2hhcig2NCkgLCBkb2NfbGlmZWN5Y2xlX3BvbGljeSB1bmlxdWVpZGVudGlmaWVyICwgZG9jX3N0YXRlIG52YXJjaGFyKDY0KSAsIGlzX2luX2V4Y2VwdGlvbl9zdGF0ZSB0aW55aW50ICwgc3RvcmFnZV9sb2NhdGlvbiBudmFyY2hhcigxKSAsIGNvbXBvbmVudF90eXBlcyB2YXJiaW5hcnkoMTAwKSAsIHJldHJpZXZhbF9uYW1lcyB2YXJiaW5hcnkoMjAwKSAsIGNvbXBvbmVudF90eXBlc18yIGltYWdlICwgcmV0cmlldmFsX25hbWVzXzIgaW1hZ2UgLCBtaW1lX3R5cGUgbnZhcmNoYXIoOTYpICwgY29udGVudF9pbmZvIHZhcmJpbmFyeSg5NikgLCBjb250ZW50X2luZm9fMiBpbWFnZSAsIG5leHRfY29udGVudF91bmlxdWVfaWQgaW50ICwgdndfdmVyc2lvbiBudmFyY2hhcigyNTUpICwgdmVyc2lvbmluZ19lbmFibGVkIHRpbnlpbnQgTk9UIE5VTEwgLCB4bWxfZG9jX3R5cGUgbnZhcmNoYXIoMjU2KSAsIHhtbF90YXJnZXRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIGNsYXNzaWZpY2F0aW9uX3N0YXRlIGludCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCByZWNvdmVyeV9pdGVtX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBsb2NrX3NpZCBpbWFnZSAsIG1ham9yX3ZlcnNpb25fbnVtYmVyIGludCBOT1QgTlVMTCAsIG1pbm9yX3ZlcnNpb25fbnVtYmVyIGludCBOT1QgTlVMTCAsIHZlcnNpb25fc3RhdHVzIGludCBOT1QgTlVMTCAsIHNlY3VyaXR5X3BvbGljeV9pZCB1bmlxdWVpZGVudGlmaWVyICwgcmVzZXJ2YXRpb25fdHlwZSBpbnQgLCByZXNlcnZhdGlvbl9vd25lcl9zaWQgaW1hZ2UgLCBjb250ZW50X2xhc3RfYWNjZXNzZWRfZGF0ZSBkYXRldGltZSAsIGNvbnRlbnRfcmVmZXJyYWxfYmxvYiBpbWFnZSAsIGNvbnRlbnRfcmV0ZW50aW9uX2RhdGUgZGF0ZXRpbWUgLCBzdG9yYWdlX2FyZWFfaWQgdW5pcXVlaWRlbnRpZmllciAsIGluZGV4YXRpb25faWQgdW5pcXVlaWRlbnRpZmllciAsIGluZGV4X2ZhaWx1cmVfY29kZSBpbnQgLCBjb21wb3VuZF9kb2N1bWVudF9zdGF0ZSBpbnQgLCBkeW5hbWljX2NyX3VwZGF0ZV9zdGF0dXMgaW50ICwgc2VjdXJpdHlfZm9sZGVyX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjaGVja2VkX2luX2RhdGUgZGF0ZXRpbWUgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0RvY1ZlcnNpb24yMiBPTiBEb2NWZXJzaW9uICh2ZXJzaW9uX3Nlcmllc19pZCwgbWFqb3JfdmVyc2lvbl9udW1iZXIgREVTQywgbWlub3JfdmVyc2lvbl9udW1iZXIgREVTQykgCkNSRUFURSBJTkRFWCBJX0RvY1ZlcnNpb243MyBPTiBEb2NWZXJzaW9uIChzZWN1cml0eV9mb2xkZXJfaWQpIApDUkVBVEUgVEFCTEUgQ29udGVudChlbGVtZW50X2lkIG52YXJjaGFyKDQ4KSBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBleHRlbnNpb24gbmNoYXIoMykgLCBjb250ZW50IGltYWdlICwgY29udGVudF9zaXplIGludCBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgcmVmY291bnQgaW50ICwgc2NmX2RhdGEgdmFyYmluYXJ5KDMyKSApIApDUkVBVEUgVEFCTEUgR2VuZXJpYyhvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBsb2NrX3Rva2VuIHVuaXF1ZWlkZW50aWZpZXIgLCBsb2NrX3RpbWVvdXQgaW50ICwgbG9ja19vd25lciBudmFyY2hhcig2NCkgLCBsb2NrX3NpZCBpbWFnZSAsIHNlY3VyaXR5X3BvbGljeV9pZCB1bmlxdWVpZGVudGlmaWVyICwgaW5kZXhhdGlvbl9pZCB1bmlxdWVpZGVudGlmaWVyICwgaW5kZXhfZmFpbHVyZV9jb2RlIGludCAsIHNlY3VyaXR5X2ZvbGRlcl9pZCB1bmlxdWVpZGVudGlmaWVyICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdW5pcXVlaWRlbnRpZmllciAsIHJldGVudGlvbl9kYXRlIGRhdGV0aW1lICwgcmVjb3ZlcnlfaXRlbV9pZCB1bmlxdWVpZGVudGlmaWVyICkgCkNSRUFURSBJTkRFWCBJX0dlbmVyaWM3NCBPTiBHZW5lcmljIChzZWN1cml0eV9mb2xkZXJfaWQpIApDUkVBVEUgVEFCTEUgQ2xhc3NEZWZpbml0aW9uKG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGhvbWVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIHN1cGVyY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciAsIHJvb3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHN1cF91c2VyX2luc3RhbmNlcyB0aW55aW50IE5PVCBOVUxMICwgcGVyc2lzdGVudF9ib29sIHRpbnlpbnQgTk9UIE5VTEwgLCBzeXNfb3duZWRfYm9vbCB0aW55aW50IE5PVCBOVUxMICwgdGFibGVfaWQgdW5pcXVlaWRlbnRpZmllciAsIHN1cF91c2VyX3N1YmNsYXNzZXMgdGlueWludCBOT1QgTlVMTCAsIGRlZmF1bHRfaW5zdGFuY2Vfc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHN1cF91c2VyX3Byb3BzIHRpbnlpbnQgTk9UIE5VTEwgLCBzeW1ib2xpY19uYW1lIG52YXJjaGFyKDY0KSAsIGlzX2hpZGRlbiB0aW55aW50ICwgaXNfY2JyX2VuYWJsZWQgdGlueWludCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBhZGRvbl9pZCB1bmlxdWVpZGVudGlmaWVyICwgcmV0ZW50aW9uX3BlcmlvZCBpbnQgLCByZXRlbnRpb25fdW5pdHMgaW50ICwgYWN0aW9uX2lkIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIElOREVYIElfQ2xhc3NEZWZpbml0aW9uMjkgT04gQ2xhc3NEZWZpbml0aW9uIChzdXBlcmNsYXNzX2lkKSAKQ1JFQVRFIFRBQkxFIEdsb2JhbFByb3BlcnR5RGVmKG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGhvbWVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGRhdGF0eXBlIGludCBOT1QgTlVMTCAsIGNhcmRpbmFsaXR5IGludCBOT1QgTlVMTCAsIHZhbHVlX3JlcXVpcmVkX2Jvb2wgdGlueWludCAsIGhpZGRlbl9ib29sIHRpbnlpbnQgLCBuYW1lX3Byb3BlcnR5X2Jvb2wgdGlueWludCAsIG1heF9sZW5ndGhfc3RyaW5nIGludCAsIG1heF9sZW5ndGhfYmluYXJ5IGludCAsIGRlZmF1bHRfYmluYXJ5IGltYWdlICwgZGVmYXVsdF9ib29sIHRpbnlpbnQgLCBkZWZhdWx0X2RhdGV0aW1lIGRhdGV0aW1lICwgZGVmYXVsdF9pZCB1bmlxdWVpZGVudGlmaWVyICwgZGVmYXVsdF9pbnQzMiBpbnQgLCBkZWZhdWx0X2Zsb2F0NjQgZmxvYXQgLCBkZWZhdWx0X3N0cmluZyBudmFyY2hhcig0MDAwKSAsIG1pbmltdW1fZGF0ZXRpbWUgZGF0ZXRpbWUgLCBtaW5pbXVtX2ludDMyIGludCAsIG1pbmltdW1fZmxvYXQ2NCBmbG9hdCAsIG1heGltdW1fZGF0ZXRpbWUgZGF0ZXRpbWUgLCBtYXhpbXVtX2ludDMyIGludCAsIG1heGltdW1fZmxvYXQ2NCBmbG9hdCAsIGN2bF9pZCB1bmlxdWVpZGVudGlmaWVyICwgbGlzdF9pc19zZXRfYm9vbCB0aW55aW50ICwgc3ltYm9saWNfbmFtZSBudmFyY2hhcig2NCkgLCBzZXR0YWJpbGl0eSBpbnQgLCBkaXNwbGF5X2NhdGVnb3J5IG52YXJjaGFyKDY0KSAsIG1vZGlmaWNhdGlvbl9hY2Nlc3MgaW50ICwgYWxsb3dzX2ZvcmVpZ25fb2JqZWN0IHRpbnlpbnQgLCBzZWN1cml0eV9wcm94eV90eXBlIGludCAsIG1hcmtpbmdfc2V0X2lkIHVuaXF1ZWlkZW50aWZpZXIgLCB1c2VfbG9uZ19jb2x1bW4gdGlueWludCAsIHBlcnNpc3RlbmNlX3R5cGUgaW50ICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdW5pcXVlaWRlbnRpZmllciAsIGFkZG9uX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBhdWRpdF9hc19pZCB1bmlxdWVpZGVudGlmaWVyICwgbG9uZ19kZWZhdWx0X3N0cmluZyBudGV4dCAsIGRhdGVfb25seV9ib29sIHRpbnlpbnQgLCByZWFkX3Byb3RlY3RlZF9ib29sIHRpbnlpbnQgLCBjYnJfcHJvcGFnYXRpb24gaW50ICkgCkNSRUFURSBUQUJMRSBQcm9wZXJ0eURlZmluaXRpb24ob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBvcmRpbmFsIGludCBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1bmlxdWVpZGVudGlmaWVyICwgZGJnX2Rpc3BsYXlfbmFtZSBudmFyY2hhcigzMikgLCBkYmdfY2xhc3NfbmFtZSBudmFyY2hhcigzMikgLCBzeXNfb3duZWRfYm9vbCB0aW55aW50IE5PVCBOVUxMICwgcHJpbWFyeV9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgZ2xvYmFsX3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciAsIGluaGVyaXRlZF9ib29sIHRpbnlpbnQgTk9UIE5VTEwgLCBkYXRhdHlwZSBpbnQgTk9UIE5VTEwgLCBjYXJkaW5hbGl0eSBpbnQgTk9UIE5VTEwgLCB2YWx1ZV9yZXF1aXJlZF9ib29sIHRpbnlpbnQgTk9UIE5VTEwgLCBoaWRkZW5fYm9vbCB0aW55aW50IE5PVCBOVUxMICwgbmFtZV9wcm9wZXJ0eV9ib29sIHRpbnlpbnQgTk9UIE5VTEwgLCBtYXhfbGVuZ3RoIGludCAsIGRlZmF1bHRfYmluYXJ5IGltYWdlICwgZGVmYXVsdF9ib29sIHRpbnlpbnQgLCBkZWZhdWx0X2RhdGV0aW1lIGRhdGV0aW1lICwgZGVmYXVsdF9pZCB1bmlxdWVpZGVudGlmaWVyICwgZGVmYXVsdF9pbnQzMiBpbnQgLCBkZWZhdWx0X2Zsb2F0NjQgZmxvYXQgLCBkZWZhdWx0X29iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyICwgZGVmYXVsdF9vYmplY3RfaWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIGRlZmF1bHRfc3RyaW5nIG52YXJjaGFyKDQwMDApICwgbWluaW11bV9kYXRldGltZSBkYXRldGltZSAsIG1pbmltdW1faW50MzIgaW50ICwgbWluaW11bV9mbG9hdDY0IGZsb2F0ICwgbWF4aW11bV9kYXRldGltZSBkYXRldGltZSAsIG1heGltdW1faW50MzIgaW50ICwgbWF4aW11bV9mbG9hdDY0IGZsb2F0ICwgY3ZsX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCByZXF1aXJlZF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyICwgcmVmbGVjdGl2ZV9wcm9wX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBkZWxldGlvbl9hY3Rpb24gaW50ICwgc2VjdXJpdHlfcHJvcGFnYXRpb24gaW50ICwgdGFibGVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNvbHVtbl9pZCB1bmlxdWVpZGVudGlmaWVyICwgbGlzdF9pc19zZXRfYm9vbCB0aW55aW50ICwgcmVxdWlyZWRfYWNjZXNzIGludCAsIGFsbG93ZWRfY2hhbmdlcyBpbnQgTk9UIE5VTEwgLCBzZXR0YWJpbGl0eSBpbnQgLCBjb3B5X3RvX3Jlc2VydmF0aW9uIHRpbnlpbnQgLCBtb2RpZmljYXRpb25fYWNjZXNzIGludCAsIGFsbG93c19mb3JlaWduX29iamVjdCB0aW55aW50ICwgbWFya2luZ19zZXRfaWQgdW5pcXVlaWRlbnRpZmllciAsIHVzZV9sb25nX2NvbHVtbiB0aW55aW50ICwgaXNfY2JyX2VuYWJsZWQgdGlueWludCAsIHBlcnNpc3RlbmNlX3R5cGUgaW50ICwgYXVkaXRfYXNfaWQgdW5pcXVlaWRlbnRpZmllciAsIGxvbmdfZGVmYXVsdF9zdHJpbmcgbnRleHQgLCBkYXRlX29ubHlfYm9vbCB0aW55aW50ICwgcmVhZF9wcm90ZWN0ZWRfYm9vbCB0aW55aW50ICwgY2JyX3Byb3BhZ2F0aW9uIGludCApIApDUkVBVEUgQ0xVU1RFUkVEIElOREVYIElfUHJvcGVydHlEZWZpbml0aW9uMTkgT04gUHJvcGVydHlEZWZpbml0aW9uIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFRBQkxFIFRhYmxlRGVmaW5pdGlvbihvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCB0YWJsZV9uYW1lIG52YXJjaGFyKDMwKSBOT1QgTlVMTCAsIHRhYmxlX3R5cGUgaW50IE5PVCBOVUxMICwgb3ZlcmZsb3dfdGFibGVfaWQgdW5pcXVlaWRlbnRpZmllciApIApDUkVBVEUgVEFCTEUgQ29sdW1uRGVmaW5pdGlvbihvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9yZGluYWwgaW50IE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBkYmdfdGFibGVfbmFtZSBudmFyY2hhcigzMCkgLCBjb2x1bW5fbmFtZSBudmFyY2hhcigzMCkgTk9UIE5VTEwgLCBjb2x1bW5fZGF0YXR5cGUgaW50IE5PVCBOVUxMICwgY29sdW1uX3NpemUgaW50ICwgYWxsb3dzX251bGxfYm9vbCB0aW55aW50IE5PVCBOVUxMICwgYWxsb3dzX3VzZXJfaW5kZXggdGlueWludCAsIHByb3BfaWQgdW5pcXVlaWRlbnRpZmllciAsIGlzX3NpbmdsZV9pbmRleGVkIHRpbnlpbnQgLCBpc19zeXN0ZW1fb3duZWQgdGlueWludCApIApDUkVBVEUgSU5ERVggSV9Db2x1bW5EZWZpbml0aW9uNyBPTiBDb2x1bW5EZWZpbml0aW9uIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0NvbHVtbkRlZmluaXRpb24yMyBPTiBDb2x1bW5EZWZpbml0aW9uIChwYXJlbnRfaWQsIHByb3BfaWQpIApDUkVBVEUgVEFCTEUgTG9jYWxpemVkU3RyaW5nKG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgb3JkaW5hbCBpbnQgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIGxvY2FsZV9uYW1lIG52YXJjaGFyKDE2KSBOT1QgTlVMTCAsIHRleHQgbnZhcmNoYXIoNDAwMCkgTk9UIE5VTEwgKSAKQ1JFQVRFIElOREVYIElfTG9jYWxpemVkU3RyaW5nMTggT04gTG9jYWxpemVkU3RyaW5nIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFRBQkxFIEFsaWFzSWQocGFyZW50X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgb3JkaW5hbCBpbnQgTk9UIE5VTEwgLCBhbGlhc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCApIApDUkVBVEUgVU5JUVVFIENMVVNURVJFRCBJTkRFWCBJX0FsaWFzSWQ2IE9OIEFsaWFzSWQgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpIApDUkVBVEUgSU5ERVggSV9BbGlhc0lkMzYgT04gQWxpYXNJZCAoY2xhc3NfaWQpIApDUkVBVEUgVEFCTEUgUmVsYXRpb25zaGlwKG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGhvbWVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGhlYWRfaWQgdW5pcXVlaWRlbnRpZmllciAsIGhlYWRfaWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIHRhaWxfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHZlcnNpb25fc2VyaWVzX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBwcm9wYWdhdGVfc2VjdXJpdHkgdGlueWludCAsIG5hbWUgbnZhcmNoYXIoMjU1KSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCByZWNvdmVyeV9pdGVtX2lkIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIFVOSVFVRSBDTFVTVEVSRUQgSU5ERVggSV9SZWxhdGlvbnNoaXAyNyBPTiBSZWxhdGlvbnNoaXAgKHRhaWxfaWQsIG5hbWUpIApDUkVBVEUgSU5ERVggSV9SZWxhdGlvbnNoaXAyOCBPTiBSZWxhdGlvbnNoaXAgKGhlYWRfaWQpIApDUkVBVEUgSU5ERVggSV9SZWxhdGlvbnNoaXA0MSBPTiBSZWxhdGlvbnNoaXAgKHZlcnNpb25fc2VyaWVzX2lkKSAKQ1JFQVRFIFRBQkxFIEN2bChvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkaXNwbGF5X25hbWUgbnZhcmNoYXIoNjQpIE5PVCBOVUxMICwgY3ZsX2RhdGFfdHlwZSBpbnQgLCBkZXNjcmlwdGlvbiBudmFyY2hhcigyNTUpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdW5pcXVlaWRlbnRpZmllciAsIGFkZG9uX2lkIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0N2bDMyIE9OIEN2bCAoZGlzcGxheV9uYW1lKSAKQ1JFQVRFIFRBQkxFIEN2bEVsZW1lbnQob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBvcmRpbmFsIGludCBOT1QgTlVMTCAsIHBhcmVudF9jdmxfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1bmlxdWVpZGVudGlmaWVyICwgdmFsX2ludGVnZXIgaW50ICwgdmFsX3N0cmluZyBudmFyY2hhcigxMDI0KSAsIGNob2ljZV90eXBlIGludCBOT1QgTlVMTCAsIG5lc3RpbmdfbGV2ZWwgaW50ICkgCkNSRUFURSBJTkRFWCBJX0N2bEVsZW1lbnQxMSBPTiBDdmxFbGVtZW50IChwYXJlbnRfY3ZsX2lkKSAKQ1JFQVRFIFRBQkxFIENvbnRhaW5lcihvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBwYXJlbnRfY29udGFpbmVyX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBuYW1lIG52YXJjaGFyKDI1NSkgLCBpbml0X2NvbnRhaW5lcl9ib29sIHRpbnlpbnQgLCBsb2NrX3Rva2VuIHVuaXF1ZWlkZW50aWZpZXIgLCBsb2NrX3RpbWVvdXQgaW50ICwgbG9ja19vd25lciBudmFyY2hhcig2NCkgLCBsb2NrX3NpZCBpbWFnZSAsIHNlY3VyaXR5X3BvbGljeV9pZCB1bmlxdWVpZGVudGlmaWVyICwgaW5kZXhhdGlvbl9pZCB1bmlxdWVpZGVudGlmaWVyICwgaW5kZXhfZmFpbHVyZV9jb2RlIGludCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCByZXRlbnRpb25fZGF0ZSBkYXRldGltZSAsIHJlY292ZXJ5X2l0ZW1faWQgdW5pcXVlaWRlbnRpZmllciApIApDUkVBVEUgVU5JUVVFIENMVVNURVJFRCBJTkRFWCBJX0NvbnRhaW5lcjI0IE9OIENvbnRhaW5lciAocGFyZW50X2NvbnRhaW5lcl9pZCwgbmFtZSkgCkNSRUFURSBUQUJMRSBHbG9iYWxQcm9wQWxpYXNJZChwYXJlbnRfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBvcmRpbmFsIGludCBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgcGFyZW50X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBhbGlhc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9HbG9iYWxQcm9wQWxpYXNJZDkgT04gR2xvYmFsUHJvcEFsaWFzSWQgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpIApDUkVBVEUgVEFCTEUgTGlzdE9mQmluYXJ5KHBhcmVudF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9yZGluYWwgaW50IE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSBpbWFnZSBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgcGFyZW50X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0xpc3RPZkJpbmFyeTEwIE9OIExpc3RPZkJpbmFyeSAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCwgcGFyZW50X2lkX2NsYXNzKSAKQ1JFQVRFIFRBQkxFIExpc3RPZkJvb2xlYW4ocGFyZW50X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgb3JkaW5hbCBpbnQgTk9UIE5VTEwgLCBlbGVtZW50X3ZhbHVlIHRpbnlpbnQgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIHBhcmVudF9pZF9jbGFzcyB1bmlxdWVpZGVudGlmaWVyICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9MaXN0T2ZCb29sZWFuMTIgT04gTGlzdE9mQm9vbGVhbiAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCwgcGFyZW50X2lkX2NsYXNzKSAKQ1JFQVRFIFRBQkxFIExpc3RPZkRhdGVUaW1lKHBhcmVudF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9yZGluYWwgaW50IE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSBkYXRldGltZSBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgcGFyZW50X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0xpc3RPZkRhdGVUaW1lMTMgT04gTGlzdE9mRGF0ZVRpbWUgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwsIHBhcmVudF9pZF9jbGFzcykgCkNSRUFURSBUQUJMRSBMaXN0T2ZGbG9hdDY0KHBhcmVudF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9yZGluYWwgaW50IE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSBmbG9hdCBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgcGFyZW50X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0xpc3RPZkZsb2F0NjQxNCBPTiBMaXN0T2ZGbG9hdDY0IChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsLCBwYXJlbnRfaWRfY2xhc3MpIApDUkVBVEUgVEFCTEUgTGlzdE9mSWQocGFyZW50X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgb3JkaW5hbCBpbnQgTk9UIE5VTEwgLCBlbGVtZW50X3ZhbHVlIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIHBhcmVudF9pZF9jbGFzcyB1bmlxdWVpZGVudGlmaWVyICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9MaXN0T2ZJZDE1IE9OIExpc3RPZklkIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsLCBwYXJlbnRfaWRfY2xhc3MpIApDUkVBVEUgVEFCTEUgTGlzdE9mSW50ZWdlcjMyKHBhcmVudF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9yZGluYWwgaW50IE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSBpbnQgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIHBhcmVudF9pZF9jbGFzcyB1bmlxdWVpZGVudGlmaWVyICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9MaXN0T2ZJbnRlZ2VyMzIxNiBPTiBMaXN0T2ZJbnRlZ2VyMzIgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwsIHBhcmVudF9pZF9jbGFzcykgCkNSRUFURSBUQUJMRSBMaXN0T2ZTdHJpbmcocGFyZW50X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgb3JkaW5hbCBpbnQgTk9UIE5VTEwgLCBlbGVtZW50X3ZhbHVlIG52YXJjaGFyKDQwMDApIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBwYXJlbnRfaWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mU3RyaW5nMTcgT04gTGlzdE9mU3RyaW5nIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsLCBwYXJlbnRfaWRfY2xhc3MpIApDUkVBVEUgVEFCTEUgU2VjdXJpdHlEZXNjKHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgcmVmZXJlbmNlX2NvdW50IGludCBOT1QgTlVMTCAsIGhhc2ggaW50IE5PVCBOVUxMICwgbnRfc2VjdXJpdHlfZGVzY3JpcHRvciBpbWFnZSBOT1QgTlVMTCAsIGNhY2hlX3ByZV9sb2FkIHRpbnlpbnQgKSAKQ1JFQVRFIElOREVYIElfU2VjdXJpdHlEZXNjMzcgT04gU2VjdXJpdHlEZXNjIChoYXNoKSAKQ1JFQVRFIFRBQkxFIEREU3RhdGUoaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNjaGVtYV9yZXZpc2lvbl9zdHJpbmcgbnZhcmNoYXIoNjQpICwgZm9sZGVyX2NhY2hlX2Vwb2NoIGludCBOT1QgTlVMTCAsIGxhc3RfZ29vZF9jaV9zbiBpbnQgTk9UIE5VTEwgLCBsYXN0X2dvb2RfcGlfc24gaW50IE5PVCBOVUxMICwgbGFzdF9nb29kX2Fubm9fcGlfc24gaW50IE5PVCBOVUxMICwgaW5kZXhfaG9zdF9uYW1lIG52YXJjaGFyKDE1KSAsIGluZGV4X2xlYXNlX2V4cGlyeSBkYXRldGltZSAsIGluZGV4X2FyZWFfZXBvY2ggaW50ICwgc3RvcmFnZV9hcmVhX2Vwb2NoIGludCAsIHN0b3JhZ2VfcG9saWN5X2Vwb2NoIGludCAsIGFzeW5jX3VwZ3JhZGVfc3RhdGUgaW50ICwgaXNfY3VzdG9tX3NjaGVtYSB0aW55aW50ICwgc2NoZW1hX3NjcmlwdCBudGV4dCAsIGV4dGVybmFsX21kX2Vwb2NoIHVuaXF1ZWlkZW50aWZpZXIgLCBzcWxfdHJhbnNsYXRpb25fZXBvY2ggaW50ICwgbGFzdF9wdXJnZV90aW1lIGRhdGV0aW1lICwgZXZlbnRfYWN0aW9uX2Vwb2NoIGludCAsIGF1ZGl0X2Rpc3BfbGVhc2VfZXhwaXJ5IGRhdGV0aW1lICwgYXVkaXRfZGlzcF9yZXN0YXJ0IGJpZ2ludCAsIGNvbnRpbnVpdHlfZGF0YSBpbWFnZSAsIHN0b3JlX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBzdWJzY3JpcHRpb25fZXBvY2ggaW50ICwgaW5kZXhpbmdfYmFsYW5jaW5nX3RpbWUgZGF0ZXRpbWUgKSAKQ1JFQVRFIFRBQkxFIFN0b3JhZ2VDbGFzcyhvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkaXNwbGF5X25hbWUgbnZhcmNoYXIoNjQpIE5PVCBOVUxMICwgZGVzY3JpcHRpb24gbnZhcmNoYXIoMjU1KSAsIHJlcG9zaXRvcnlfdHlwZSBudmFyY2hhcigxNikgLCBmc19hZHNfcGF0aCBudmFyY2hhcigxMjAwKSAsIGRiX29wdF9oaW50IGludCAsIGNvbnRlbnRfY2FjaGVkIGludCAsIGFyZWFfc3RhdHVzIGludCAsIGNsb3N1cmVfZGF0ZSBkYXRldGltZSAsIGVsZW1lbnRfY291bnQgZmxvYXQgLCBlbGVtZW50c19jcmVhdGVkIGZsb2F0ICwgZWxlbWVudHNfZGVsZXRlZCBmbG9hdCAsIGVsZW1lbnRfa2J5dGVzIGZsb2F0ICwgbWF4X2VsZW1lbnRzIGZsb2F0ICwgbWF4X3NpemUgZmxvYXQgLCBkYXRhYmFzZV90eXBlIGludCAsIGpuZGlfZGF0YV9zb3VyY2UgbnZhcmNoYXIoNjQpICwgam5kaV94YV9kYXRhX3NvdXJjZSBudmFyY2hhcig2NCkgLCBkZWxldGVfbWV0aG9kIGludCAsIGZyZWVfdGhyZXNob2xkIGludCAsIGZyZWVfd2FybmluZyBpbnQgLCBmaWx0ZXJfZXhwcmVzc2lvbiBudGV4dCAsIGZpeGVkX2NvbnRlbnRfZGV2aWNlX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBzaXRlX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCByZXNvdXJjZV9zdHJpbmcgbnZhcmNoYXIoNTEyKSAsIGFsbG93c19kZWxldGUgdGlueWludCAsIGluZGV4X2FyZWFfaWQgdW5pcXVlaWRlbnRpZmllciAsIG9yaWdpbmFsX2ZpbGVzdG9yZV9pZCB1bmlxdWVpZGVudGlmaWVyICwgZGlyZWN0b3J5X3N0cnVjdHVyZSBpbnQgLCBzdGFuZGJ5X2FjdGl2YXRpb25fcHJpb3JpdHkgaW50ICwgcmV0ZW50aW9uX3BlcmlvZCBpbnQgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1bmlxdWVpZGVudGlmaWVyICwgc2lzX2VuYWJsZWQgdGlueWludCAsIHNpc190YWJsZV9uYW1lIG52YXJjaGFyKDMwKSAsIHJldGVudGlvbl9tb2RlIGludCAsIGVuY3J5cHRpb25fZW5hYmxlZCB0aW55aW50ICwgc2NmX2luZGV4IGludCAsIGNvbXByZXNzaW9uX2VuYWJsZWQgdGlueWludCAsIGNvbXByZXNzaW9uX3RocmVzaG9sZCBpbnQgLCB2ZXJpZmljYXRpb25fbW9kZSBpbnQgLCBpZF9iYXRjaF9zaXplIGludCAsIHN5bmNfcmVxdWlyZWQgaW50ICwgc3luY19kZXNpcmVkIGludCAsIGJhdGNoX3R0bCBpbnQgLCBvcGVuX3RpbWVfbGltaXQgaW50ICwgZW5jcnlwdGlvbl9tZXRob2QgaW50ICwgdXNlX2RldmljZV9ob2xkIHRpbnlpbnQgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1N0b3JhZ2VDbGFzczI1IE9OIFN0b3JhZ2VDbGFzcyAoZGlzcGxheV9uYW1lKSAKQ1JFQVRFIFRBQkxFIENvbnRlbnRTZWFyY2gob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50IE5PVCBOVUxMICwgcXVlcmllZF9vYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGNvbnRlbnQgbnZhcmNoYXIoMTApICwgcmFuayBmbG9hdCAsIGhpdGNvdW50IGludCAsIGNvbnRlbnRfc2l6ZSBmbG9hdCAsIHNlcV9udW1iZXIgaW50ICwgc3VtbWFyeSBudmFyY2hhcig1MTIpICwgaGlnaGxpZ2h0X2Jsb2IgaW1hZ2UgKSAKQ1JFQVRFIFRBQkxFIEFubm90YXRpb24ob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50IE5PVCBOVUxMICwgaG9tZV9pZCB1bmlxdWVpZGVudGlmaWVyICwgY3JlYXRvciBudmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIG52YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgc3RvcmFnZV9jbGFzcyB1bmlxdWVpZGVudGlmaWVyICwgY29udGVudF9zaXplIGZsb2F0ICwgYW5ub3RhdGVkX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBhbm5vdGF0ZWRfaWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIGFubm90YXRlZF9lbGVtZW50IGludCAsIGRlc2NyaXB0aW9uIG52YXJjaGFyKDI1NSkgLCBzdG9yYWdlX2xvY2F0aW9uIG52YXJjaGFyKDEpICwgY29tcG9uZW50X3R5cGVzIHZhcmJpbmFyeSgxMDApICwgcmV0cmlldmFsX25hbWVzIHZhcmJpbmFyeSgyMDApICwgY29tcG9uZW50X3R5cGVzXzIgaW1hZ2UgLCByZXRyaWV2YWxfbmFtZXNfMiBpbWFnZSAsIG1pbWVfdHlwZSBudmFyY2hhcig5NikgLCBjb250ZW50X2luZm8gdmFyYmluYXJ5KDk2KSAsIGNvbnRlbnRfaW5mb18yIGltYWdlICwgbmV4dF9jb250ZW50X3VuaXF1ZV9pZCBpbnQgLCBjb250ZW50X2xhc3RfYWNjZXNzZWRfZGF0ZSBkYXRldGltZSAsIHN0b3JhZ2VfYXJlYV9pZCB1bmlxdWVpZGVudGlmaWVyICwgaW5kZXhhdGlvbl9pZCB1bmlxdWVpZGVudGlmaWVyICwgaW5kZXhfZmFpbHVyZV9jb2RlIGludCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCByZXRlbnRpb25fZGF0ZSBkYXRldGltZSAsIHJlY292ZXJ5X2l0ZW1faWQgdW5pcXVlaWRlbnRpZmllciApIApDUkVBVEUgSU5ERVggSV9Bbm5vdGF0aW9uMzEgT04gQW5ub3RhdGlvbiAoYW5ub3RhdGVkX2lkKSAKQ1JFQVRFIFRBQkxFIFN1YnNjcmlwdGlvbihvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkaXNwbGF5X25hbWUgbnZhcmNoYXIoNjQpICwgZGVzY3JpcHRpb24gbnZhcmNoYXIoMjU1KSAsIHRhcmdldF9pZCB1bmlxdWVpZGVudGlmaWVyICwgdGFyZ2V0X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBpbmNsdWRlX3N1YmNsYXNzZXMgdGlueWludCAsIHByaW9yaXR5IGludCAsIGFjdGlvbl9pZCB1bmlxdWVpZGVudGlmaWVyICwgaXNfZW5hYmxlZCB0aW55aW50ICwgaXNfc3luY2hyb25vdXMgdGlueWludCAsIHVzZXJfc3RyaW5nIG52YXJjaGFyKDI1MCkgLCBwcm9nX2lkX3N0cmluZyBudmFyY2hhcigyNTUpICwgc2NyaXB0X3RleHQgbnRleHQgLCByZXNldF9saWZlY3ljbGVfb25fY2hlY2tpbiB0aW55aW50ICwgY2xhc3NpZnlfbWltZV90eXBlIG52YXJjaGFyKDk2KSAsIHdvcmtmbG93X2RlZmluaXRpb25faWQgdW5pcXVlaWRlbnRpZmllciAsIGlzb2xhdGVkX3JlZ2lvbiBpbnQgLCBleHByZXNzaW9uIG52YXJjaGFyKDI1NSkgLCBzdWJqZWN0IG52YXJjaGFyKDgwKSAsIHZ3X3ZlcnNpb24gbnZhcmNoYXIoMjU1KSAsIGVuYWJsZV9tYW51YWxfbGF1bmNoIHRpbnlpbnQgLCBmaWx0ZXJfZXhwcmVzc2lvbiBudGV4dCAsIGZpbHRlcmVkX3Byb3BlcnR5X25hbWUgbnZhcmNoYXIoNjQpICwgY29tcGlsZWRfZmlsdGVyIGltYWdlICwgcHJlc2VydmVfZGlyZWN0X3Blcm1pc3Npb25zIHRpbnlpbnQgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1bmlxdWVpZGVudGlmaWVyICwgc2VhcmNoX2Z1bmN0aW9uX25hbWUgbnZhcmNoYXIoMTMwKSAsIGNvbnZlcnNpb25fY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciApIApDUkVBVEUgQ0xVU1RFUkVEIElOREVYIElfU3Vic2NyaXB0aW9uNDYgT04gU3Vic2NyaXB0aW9uICh0YXJnZXRfaWQpIApDUkVBVEUgVEFCTEUgUXVldWVJdGVtKG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGhvbWVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGRlcXVldWVfaG9zdCBudmFyY2hhcigxNSkgLCByZXRyeV9jb3VudCBpbnQgTk9UIE5VTEwgLCBxdWV1ZWRfb2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBxdWV1ZWRfb2JqZWN0X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBzZXJpYWxpemVkX2RhdGEgaW1hZ2UgLCBldmVudF9vcGVyYXRpb24gaW50ICwgbmV4dF9yZXRyeV9kYXRlIGRhdGV0aW1lICwgbGVhc2VfZXhwaXJ5X2RhdGUgZGF0ZXRpbWUgLCBpbXBlcnNvbmF0aW9uX3VzZXIgbnZhcmNoYXIoNDAwMCkgKSAKQ1JFQVRFIElOREVYIElfUXVldWVJdGVtNDkgT04gUXVldWVJdGVtIChuZXh0X3JldHJ5X2RhdGUpIApDUkVBVEUgVEFCTEUgRG9jdW1lbnRTdGF0ZShvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9yZGluYWwgaW50IE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBzdGF0ZV9uYW1lIG52YXJjaGFyKDQwMDApICwgY2FuX2JlX2RlbW90ZWQgdGlueWludCAsIGVuYWJsZV9zdGF0ZV9wZXJtaXNzaW9ucyB0aW55aW50ICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCApIApDUkVBVEUgSU5ERVggSV9Eb2N1bWVudFN0YXRlMzUgT04gRG9jdW1lbnRTdGF0ZSAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgCkNSRUFURSBUQUJMRSBMaW5rKG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGhvbWVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGhlYWRfaWQgdW5pcXVlaWRlbnRpZmllciAsIGhlYWRfaWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIHRhaWxfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHRhaWxfaWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCByZWNvdmVyeV9pdGVtX2lkIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIElOREVYIElfTGluazM4IE9OIExpbmsgKHRhaWxfaWQpIApDUkVBVEUgSU5ERVggSV9MaW5rMzkgT04gTGluayAoaGVhZF9pZCkgCkNSRUFURSBUQUJMRSBTZWN1cml0eVBvbGljeShvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkaXNwbGF5X25hbWUgbnZhcmNoYXIoNjQpICwgZGVzY3JpcHRpb24gbnZhcmNoYXIoMjU1KSAsIHByZXNlcnZlX2RpcmVjdF9wZXJtaXNzaW9ucyB0aW55aW50IE5PVCBOVUxMICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdW5pcXVlaWRlbnRpZmllciApIApDUkVBVEUgVEFCTEUgU2VjdXJpdHlUZW1wbGF0ZShvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9yZGluYWwgaW50IE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBkaXNwbGF5X25hbWUgbnZhcmNoYXIoNjQpICwgaXNfZW5hYmxlZCB0aW55aW50IE5PVCBOVUxMICwgYXBwbHlfc3RhdGVfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1NlY3VyaXR5VGVtcGxhdGU0NSBPTiBTZWN1cml0eVRlbXBsYXRlIChwYXJlbnRfaWQsIGFwcGx5X3N0YXRlX2lkKSAKQ1JFQVRFIFRBQkxFIEV2ZW50KG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGhvbWVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIHNvdXJjZV9vYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciAsIHNvdXJjZV9vYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciAsIHN0YXR1cyBpbnQgLCBzZXJpYWxpemVkX3NvdXJjZV9vYmplY3QgaW1hZ2UgLCBxdWVyeV90ZXh0IG50ZXh0ICwgdmVyc2lvbl9zZXJpZXNfaWQgdW5pcXVlaWRlbnRpZmllciAsIGxpZmVjeWNsZV9jaGFuZ2UgaW50ICwgZWxlbWVudF9uYW1lIG52YXJjaGFyKDI1NSkgLCBhdWRpdF9sZXZlbCBpbnQgLCBpbml0aWF0aW5nX3VzZXIgbnZhcmNoYXIoMjU1KSAsIHNlcXVlbmNlX251bWJlciBpbnQgLCBzZXJpYWxpemVkX29yaWdfb2JqZWN0IGltYWdlICwgYXVkaXRfc2VxdWVuY2UgYmlnaW50IElERU5USVRZKDEsMSksIHNvdXJjZV9zdG9yYWdlX2FyZWFfaWQgdW5pcXVlaWRlbnRpZmllciAsIHRhcmdldF9zdG9yYWdlX2FyZWFfaWQgdW5pcXVlaWRlbnRpZmllciAsIHJlY292ZXJ5X2l0ZW1faWQgdW5pcXVlaWRlbnRpZmllciAsIHNvdXJjZV9yZXRhaW5lZCB0aW55aW50ICkgCkNSRUFURSBJTkRFWCBJX0V2ZW50NDggT04gRXZlbnQgKHNvdXJjZV9vYmplY3RfaWQsIGNyZWF0ZV9kYXRlIERFU0MpIApDUkVBVEUgSU5ERVggSV9FdmVudDgzIE9OIEV2ZW50IChhdWRpdF9zZXF1ZW5jZSkgCkNSRUFURSBUQUJMRSBBdWRpdERlZmluaXRpb24ob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBvcmRpbmFsIGludCBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1bmlxdWVpZGVudGlmaWVyICwgZXZlbnRfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGF1ZGl0X3N1Y2Nlc3MgdGlueWludCBOT1QgTlVMTCAsIGF1ZGl0X2ZhaWx1cmUgdGlueWludCBOT1QgTlVMTCAsIGluY2x1ZGVfc3ViY2xhc3NlcyB0aW55aW50IE5PVCBOVUxMICwgcmVjb3JkaW5nX2xldmVsIGludCAsIGZpbHRlcl9leHByZXNzaW9uIG50ZXh0ICwgZmlsdGVyZWRfcHJvcGVydHlfbmFtZSBudmFyY2hhcig2NCkgLCBkaXNwbGF5X25hbWUgbnZhcmNoYXIoNjQpICwgZW5hYmxlZF9ib29sIHRpbnlpbnQgKSAKQ1JFQVRFIElOREVYIElfQXVkaXREZWZpbml0aW9uNDcgT04gQXVkaXREZWZpbml0aW9uIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFRBQkxFIFN1YnNjcmliZWRFdmVudChvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9yZGluYWwgaW50IE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBldmVudF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICkgCkNSRUFURSBJTkRFWCBJX1N1YnNjcmliZWRFdmVudDUwIE9OIFN1YnNjcmliZWRFdmVudCAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgCkNSRUFURSBDTFVTVEVSRUQgSU5ERVggSV9TdWJzY3JpYmVkRXZlbnQ1MSBPTiBTdWJzY3JpYmVkRXZlbnQgKGV2ZW50X2NsYXNzX2lkKSAKQ1JFQVRFIFRBQkxFIEluZGV4QXJlYShvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkaXNwbGF5X25hbWUgbnZhcmNoYXIoNjQpIE5PVCBOVUxMICwgZGVzY3JpcHRpb24gbnZhcmNoYXIoMjU1KSAsIGFyZWFfc3RhdHVzIGludCBOT1QgTlVMTCAsIHNpdGVfaWQgdW5pcXVlaWRlbnRpZmllciAsIHRlbXBsYXRlX3R5cGUgbnZhcmNoYXIoMTI4KSAsIHJvb3RfZGlyZWN0b3J5X3BhdGggbnZhcmNoYXIoMjU1KSAsIHNlYXJjaF9zZXJ2ZXJzX3RvX2F0dGFjaCBpbnQgLCBtYXhfY29sbGVjdGlvbnMgaW50ICwgdGVtcF9kaXJlY3RvcnlfcGF0aCBudmFyY2hhcigyNTUpICwgbWF4X29iamVjdHNfcGVyX2luZGV4IGZsb2F0ICwgbWF4X3NpemVfcGVyX2luZGV4X2tiIGZsb2F0ICwgc3RhbmRieV9hY3RpdmF0aW9uX3ByaW9yaXR5IGludCAsIGFmZmluaXR5X2dyb3VwX2lkIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIFRBQkxFIEluZGV4UmVxdWVzdHModGFyZ2V0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCB0YXJnZXRfaWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9wZXJhdGlvbiBpbnQgTk9UIE5VTEwgLCBpbmRleGF0aW9uX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBzdGF0dXMgaW50IE5PVCBOVUxMICwgcmVxdWVzdF90aW1lIGRhdGV0aW1lIE5PVCBOVUxMICwgc2VxbnVtX2lkZW50aXR5IGJpZ2ludCBJREVOVElUWSgxLDEpTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgcmV0cnlfY291bnQgaW50IE5PVCBOVUxMICwgZWxlbWVudF9zZXF1ZW5jZV9udW1iZXIgaW50ICwgcmV0cmlldmFsX25hbWVfZXh0IG52YXJjaGFyKDY0KSAsIGluZGV4X2pvYl9pZCB1bmlxdWVpZGVudGlmaWVyICwgaW5kZXhfYXJlYV9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgb2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBlcG9jaF9pZCBpbnQgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBsYXN0X2ZhaWx1cmVfcmVhc29uIG50ZXh0ICwgaW5kZXhpbmdfZmFpbHVyZV9jb2RlIGludCAsIHJlbW92YWxfaW5kZXhhdGlvbl9pZCB1bmlxdWVpZGVudGlmaWVyICkgCkNSRUFURSBJTkRFWCBJX0luZGV4UmVxdWVzdHM1OSBPTiBJbmRleFJlcXVlc3RzICh0YXJnZXRfaWQpIApDUkVBVEUgSU5ERVggSV9JbmRleFJlcXVlc3RzODQgT04gSW5kZXhSZXF1ZXN0cyAob2JqZWN0X2lkKSAKQ1JFQVRFIElOREVYIElfSW5kZXhSZXF1ZXN0czg1IE9OIEluZGV4UmVxdWVzdHMgKGluZGV4X2pvYl9pZCkgCkNSRUFURSBJTkRFWCBJX0luZGV4UmVxdWVzdHM5NCBPTiBJbmRleFJlcXVlc3RzIChpbmRleF9hcmVhX2lkLCBpbmRleGF0aW9uX2lkLCB0YXJnZXRfaWQsIHNlcW51bV9pZGVudGl0eSkgCkNSRUFURSBUQUJMRSBDb21wb25lbnRSZWxhdGlvbihvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lIE5PVCBOVUxMICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApIE5PVCBOVUxMICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgTk9UIE5VTEwgLCBjaGlsZF9jb21wb25lbnRfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNoaWxkX3ZlcnNpb25fc2VyaWVzX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBwYXJlbnRfY29tcG9uZW50X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBjb3B5X3RvX3Jlc2VydmF0aW9uIHRpbnlpbnQgTk9UIE5VTEwgLCBuYW1lIG52YXJjaGFyKDI1NSkgLCBsYWJlbF9iaW5kX3ZhbHVlIG52YXJjaGFyKDY0KSAsIGNvbXBvbmVudF9yZWxhdGlvbnNoaXBfdHlwZSBpbnQgTk9UIE5VTEwgLCB1cmlfdmFsdWUgbnZhcmNoYXIoMjA4MykgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1bmlxdWVpZGVudGlmaWVyICwgY29tcG9uZW50X3NvcnRfb3JkZXIgaW50IE5PVCBOVUxMICwgdmVyc2lvbl9iaW5kX3R5cGUgaW50ICwgY2FzY2FkZV9kZWxldGUgaW50IE5PVCBOVUxMICwgcHJldmVudF9kZWxldGUgaW50IE5PVCBOVUxMICwgY2hpbGRfY29tcG9uZW50X2lkX2hvbWUgdW5pcXVlaWRlbnRpZmllciAsIGNoaWxkX3ZlcnNpb25fc2VyaWVzX2lkX2hvbWUgdW5pcXVlaWRlbnRpZmllciApIApDUkVBVEUgSU5ERVggSV9Db21wb25lbnRSZWxhdGlvbjY5IE9OIENvbXBvbmVudFJlbGF0aW9uIChjaGlsZF92ZXJzaW9uX3Nlcmllc19pZCkgCkNSRUFURSBJTkRFWCBJX0NvbXBvbmVudFJlbGF0aW9uNzAgT04gQ29tcG9uZW50UmVsYXRpb24gKGNoaWxkX2NvbXBvbmVudF9pZCkgCkNSRUFURSBJTkRFWCBJX0NvbXBvbmVudFJlbGF0aW9uNzEgT04gQ29tcG9uZW50UmVsYXRpb24gKHBhcmVudF9jb21wb25lbnRfaWQpIApDUkVBVEUgVU5JUVVFIElOREVYIElfQ29tcG9uZW50UmVsYXRpb243MiBPTiBDb21wb25lbnRSZWxhdGlvbiAoY29tcG9uZW50X3NvcnRfb3JkZXIsIG9iamVjdF9pZCkgCkNSRUFURSBUQUJMRSBQdWJsaXNoUmVxdWVzdChvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBwdWJsaXNoaW5nX3N0YXR1cyBpbnQgTk9UIE5VTEwgLCBzdGF0dXNfZGVzY3JpcHRpb24gbnZhcmNoYXIoMjU1KSAsIGlucHV0X2RvY3VtZW50IHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBvdXRwdXRfZm9sZGVyIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwdWJsaXNoX3JlcXVlc3RfdHlwZSBpbnQgLCBwdWJsaXNoX3RlbXBsYXRlIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwdWJsaWNhdGlvbl9kb2N1bWVudCB1bmlxdWVpZGVudGlmaWVyICwgcHVibGlzaF9zdHlsZV90ZW1wbGF0ZSB1bmlxdWVpZGVudGlmaWVyICwgYXBwbHlfZGVmaW5pdGlvbiBudGV4dCAsIGluaXRpYXRpbmdfdXNlciBudmFyY2hhcigyNTUpICwgZXJyb3JfY29kZSBudmFyY2hhcigyNTUpICwgZXJyb3JfZGVzY3JpcHRpb24gbnZhcmNoYXIoMjU1KSAsIHJldHJ5X2NvdW50IGludCBOT1QgTlVMTCAsIG5leHRfcmV0cnlfZGF0ZSBkYXRldGltZSAsIGRlcXVldWVfaG9zdCBudmFyY2hhcigxNSkgLCBsZWFzZV9leHBpcnlfZGF0ZSBkYXRldGltZSApIApDUkVBVEUgSU5ERVggSV9QdWJsaXNoUmVxdWVzdDYwIE9OIFB1Ymxpc2hSZXF1ZXN0IChuZXh0X3JldHJ5X2RhdGUpIApDUkVBVEUgVEFCTEUgSGllcmFyY2h5SW5kZXgocGFyZW50X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBjaGlsZF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICkgCkNSRUFURSBDTFVTVEVSRUQgSU5ERVggSV9IaWVyYXJjaHlJbmRleDYxIE9OIEhpZXJhcmNoeUluZGV4IChwYXJlbnRfaWQsIGNoaWxkX2lkKSAKQ1JFQVRFIElOREVYIElfSGllcmFyY2h5SW5kZXg2MiBPTiBIaWVyYXJjaHlJbmRleCAoY2hpbGRfaWQpIApDUkVBVEUgVEFCTEUgSW5kZXhKb2Iob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50IE5PVCBOVUxMICwgaG9tZV9pZCB1bmlxdWVpZGVudGlmaWVyICwgY3JlYXRvciBudmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIG52YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgZGVzY3JpcHRpb24gbnZhcmNoYXIoMjU1KSAsIHRpbWVfbGFzdF9wcm9jZXNzZWQgZGF0ZXRpbWUgLCB0aW1lX2FsbF9zdWJtaXR0ZWQgZGF0ZXRpbWUgLCBqb2Jfc3RhdHVzIGludCBOT1QgTlVMTCAsIGpvYl9hYm9ydF9yZXF1ZXN0ZWQgdGlueWludCBOT1QgTlVMTCAsIHN1Ym1pdHRlZF9jb3VudCBpbnQgLCBwaGFzZV9udW0gaW50ICwgaXRlbV9udW0gaW50ICwgcHJpb3Jfb2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBsYXN0X21heF9zZXFfbnVtIGJpZ2ludCAsIGFjdGl2ZV9zZXJ2ZXIgbnZhcmNoYXIoMTI4KSAsIHNlcmlhbGl6ZWRfZGF0YSBpbWFnZSAsIGpvYl9wYXVzZV9yZXF1ZXN0ZWQgdGlueWludCAsIGlzX21pZ3JhdGlvbl9qb2IgdGlueWludCAsIGxhc3RfZmFpbHVyZV9kZXNjIG50ZXh0ICwgbWF4X3JlcXVlc3RfcXVldWVfc2l6ZSBpbnQgKSAKQ1JFQVRFIFRBQkxFIEluZGV4Sm9iSXRlbShvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9yZGluYWwgaW50IE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBpbmRleGF0aW9uX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBpbmRleF9hcmVhX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjbGFzc19kZWZpbml0aW9uX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBzaW5nbGVfaXRlbV9pZCB1bmlxdWVpZGVudGlmaWVyICwgc2luZ2xlX2l0ZW1faWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIGluY2x1ZGVfc3ViY2xhc3NlcyB0aW55aW50ICwgcmVzeW5jX21vZGlmaWNhdGlvbl9kYXRlIGRhdGV0aW1lICkgCkNSRUFURSBUQUJMRSBDb250ZW50UXVldWUob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBzZXFudW1faWRlbnRpdHkgYmlnaW50IElERU5USVRZKDEsMSlOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGxlYXNlX2V4cGlyeV9kYXRlIGRhdGV0aW1lIE5PVCBOVUxMICwgc2Vzc2lvbl9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgZWxlbWVudF9zZXF1ZW5jZV9udW1iZXIgaW50IE5PVCBOVUxMICwgY29tbWFuZF90eXBlIGludCBOT1QgTlVMTCAsIHByb2Nlc3NfYXR0ZW1wdHMgaW50ICwgc291cmNlX29iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyICwgc3RvcmFnZV9hcmVhX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBjb250ZW50X3NpemUgZmxvYXQgTk9UIE5VTEwgLCBzZXJpYWxpemVkX2RhdGEgaW1hZ2UgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSBOT1QgTlVMTCApIApDUkVBVEUgSU5ERVggSV9Db250ZW50UXVldWU2MyBPTiBDb250ZW50UXVldWUgKHNlc3Npb25faWQpIApDUkVBVEUgSU5ERVggSV9Db250ZW50UXVldWU2NCBPTiBDb250ZW50UXVldWUgKG9iamVjdF9pZCkgCkNSRUFURSBJTkRFWCBJX0NvbnRlbnRRdWV1ZTY1IE9OIENvbnRlbnRRdWV1ZSAobGVhc2VfZXhwaXJ5X2RhdGUpIApDUkVBVEUgVEFCTEUgQ29udGVudFVwbG9hZChlbGVtZW50X2lkIG52YXJjaGFyKDQ4KSBOT1QgTlVMTCAsIG9mZnNldCBpbnQgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIGNvbnRlbnQgaW1hZ2UgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0NvbnRlbnRVcGxvYWQ2NiBPTiBDb250ZW50VXBsb2FkIChlbGVtZW50X2lkLCBvZmZzZXQpIApDUkVBVEUgVEFCTEUgRXh0ZXJuYWxJZGVudGl0eShvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9yZGluYWwgaW50IE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCByZXBvc2l0b3J5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBleHRlcm5hbF9pZCBudmFyY2hhcigyNTYpIE5PVCBOVUxMICwgcmVwbGljYXRpb25fZGF0YSBpbWFnZSApIApDUkVBVEUgSU5ERVggSV9FeHRlcm5hbElkZW50aXR5NzUgT04gRXh0ZXJuYWxJZGVudGl0eSAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9FeHRlcm5hbElkZW50aXR5NzYgT04gRXh0ZXJuYWxJZGVudGl0eSAoZXh0ZXJuYWxfaWQsIHJlcG9zaXRvcnlfaWQpIApDUkVBVEUgVEFCTEUgUmVwbGljYXRpb25RdWV1ZShvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBzb3VyY2Vfb2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBzb3VyY2Vfb2JqZWN0X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBkZXN0aW5hdGlvbl9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgZGVzdGluYXRpb25faWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBvcGVyYXRpb24gaW50ICwgc2VyaWFsaXplZF9kYXRhIGltYWdlICwgc2VxbnVtX2lkZW50aXR5IGJpZ2ludCBJREVOVElUWSgxLDEpTk9UIE5VTEwgLCBoZWxkX3VudGlsX2RhdGUgZGF0ZXRpbWUgLCByZXRyeV9jb3VudCBpbnQgLCBsZWFzZV9ob2xkZXJfaWQgdW5pcXVlaWRlbnRpZmllciAsIGxlYXNlX2NvdW50IGludCAsIHN0YXR1cyBpbnQgLCBsYXN0X2ZhaWx1cmVfZGVzYyBudGV4dCAsIGV4Y2x1c2lvbl9pZCB1bmlxdWVpZGVudGlmaWVyICkgCkNSRUFURSBVTklRVUUgQ0xVU1RFUkVEIElOREVYIElfUmVwbGljYXRpb25RdWV1ZTc3IE9OIFJlcGxpY2F0aW9uUXVldWUgKHNlcW51bV9pZGVudGl0eSkgCkNSRUFURSBUQUJMRSBFeHRlcm5hbEFsaWFzKG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgb3JkaW5hbCBpbnQgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIGV4dGVybmFsX3JlcG9faWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGFsaWFzX2RpcmVjdGlvbiBpbnQgTk9UIE5VTEwgLCBjbGFzc19pZGVudGl0eSBudmFyY2hhcigxMjgpIE5PVCBOVUxMICwgcHJvcGVydHlfaWRlbnRpdHkgbnZhcmNoYXIoMTI4KSApIApDUkVBVEUgSU5ERVggSV9FeHRlcm5hbEFsaWFzNzggT04gRXh0ZXJuYWxBbGlhcyAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgCkNSRUFURSBUQUJMRSBUYXNrKG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGhvbWVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBzdGF0ZSBpbnQgLCBjb29yZGluYXRvcl9pZCB1bmlxdWVpZGVudGlmaWVyICwgY29vcmRpbmF0b3JfaWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIHN0YXJ0X2RhdGUgZGF0ZXRpbWUgLCBjb21wbGV0ZV9kYXRlIGRhdGV0aW1lICwgbGFzdF9mYWlsdXJlX2Rlc2MgbnRleHQgLCByZWNvdmVyeV9pdGVtX2lkIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIElOREVYIElfVGFzazgwIE9OIFRhc2sgKGNvb3JkaW5hdG9yX2lkKSAKQ1JFQVRFIFRBQkxFIFRhc2tSZWxhdGlvbnNoaXAob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50IE5PVCBOVUxMICwgaG9tZV9pZCB1bmlxdWVpZGVudGlmaWVyICwgY3JlYXRvciBudmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIG52YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdW5pcXVlaWRlbnRpZmllciAsIHByZWRlY2Vzc29yX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBzdWNjZXNzb3JfaWQgdW5pcXVlaWRlbnRpZmllciAsIGRlZmluZXNfYWx0X3ByZWRlY2Vzc29yIHRpbnlpbnQgLCByZWNvdmVyeV9pdGVtX2lkIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1Rhc2tSZWxhdGlvbnNoaXA4MSBPTiBUYXNrUmVsYXRpb25zaGlwIChwcmVkZWNlc3Nvcl9pZCwgc3VjY2Vzc29yX2lkKSAKQ1JFQVRFIElOREVYIElfVGFza1JlbGF0aW9uc2hpcDgyIE9OIFRhc2tSZWxhdGlvbnNoaXAgKHN1Y2Nlc3Nvcl9pZCkgCkNSRUFURSBUQUJMRSBUZXh0SW5kZXgob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBvcmRpbmFsIGludCBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1bmlxdWVpZGVudGlmaWVyICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBpbmRleF9uYW1lIG52YXJjaGFyKDQwMDApIE5PVCBOVUxMICwgc3RhdHVzIGludCBOT1QgTlVMTCAsIGN1cnJlbnRfaW5kZXhfc2VydmVyIHVuaXF1ZWlkZW50aWZpZXIgLCBsZWFzZV9leHBpcnlfdGltZSBkYXRldGltZSAsIGluZGV4X29iamVjdF9jb3VudCBmbG9hdCAsIGluZGV4X3NpemVfa2IgZmxvYXQgLCBpbmRleGluZ19zdGF0dXMgaW50ICwgcmVjZW50X29wc19zdWJtaXR0ZWQgaW50ICwgcmVjZW50X29wc19kdXJhdGlvbiBmbG9hdCApIApDUkVBVEUgVEFCTEUgQXVkaXRQb2xpY3kob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50IE5PVCBOVUxMICwgY3JlYXRvciBudmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIG52YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdW5pcXVlaWRlbnRpZmllciAsIGRpc3BsYXlfbmFtZSBudmFyY2hhcig2NCkgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBkaXNwb3NpdGlvbl9ydWxlIG52YXJjaGFyKDI1NSkgLCBlbmFibGVkX2Jvb2wgdGlueWludCBOT1QgTlVMTCAsIGNvbXBsZXRpb25fd2FpdF9pbnRlcnZhbCBpbnQgKSAKQ1JFQVRFIFRBQkxFIEF1ZGl0UHJvY2Vzc2luZyhvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkaXNwbGF5X25hbWUgbnZhcmNoYXIoNjQpIE5PVCBOVUxMICwgaG9tZV9pZCB1bmlxdWVpZGVudGlmaWVyICwgbGFzdF9wcm9jZXNzZWQgZmxvYXQgTk9UIE5VTEwgKSAKQ1JFQVRFIFRBQkxFIFRleHRJbmRleFBhcnRpdGlvbihvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9yZGluYWwgaW50IE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBwYXJ0aXRpb25fcHJvcF9uYW1lIG52YXJjaGFyKDQwMDApIE5PVCBOVUxMICwgZGF0YXR5cGUgaW50IE5PVCBOVUxMICwgcGFydGl0aW9uX3N0YXJ0X2RhdGUgZGF0ZXRpbWUgLCBwYXJ0aXRpb25fZW5kX2RhdGUgZGF0ZXRpbWUgLCBwYXJ0aXRpb25fc3RyaW5nX3ZhbCBudmFyY2hhcig0MDAwKSApIApDUkVBVEUgVEFCTEUgUHJlcHJvY2Vzc29yRGVmaW5pdGlvbihvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9yZGluYWwgaW50IE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBkaXNwbGF5X25hbWUgbnZhcmNoYXIoNjQpIE5PVCBOVUxMICwgZW5hYmxlZF9ib29sIHRpbnlpbnQgTk9UIE5VTEwgLCBhY3Rpb25faWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCApIApDUkVBVEUgVEFCTEUgU2NmRGF0YShzY2ZfaWQgaW50IElERU5USVRZKDEsMSlOT1QgTlVMTCBQUklNQVJZIEtFWSAsIGJpbmFyeV9kYXRhIHZhcmJpbmFyeSg1MTIpICkgCkNSRUFURSBUQUJMRSBIb2xkT2JqZWN0KG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGhvbWVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGRpc3BsYXlfbmFtZSBudmFyY2hhcig2NCkgLCBkZXNjcmlwdGlvbiBudmFyY2hhcigyNTUpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdW5pcXVlaWRlbnRpZmllciApIApDUkVBVEUgVEFCTEUgSG9sZFJlbGF0aW9uc2hpcChvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1bmlxdWVpZGVudGlmaWVyICwgaG9sZF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgaGVsZF9vYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGhlbGRfb2JqZWN0X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0hvbGRSZWxhdGlvbnNoaXA4NiBPTiBIb2xkUmVsYXRpb25zaGlwIChoZWxkX29iamVjdF9pZCwgaG9sZF9pZCkgCkNSRUFURSBUQUJMRSBTd2VlcChvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBkaXNwbGF5X25hbWUgbnZhcmNoYXIoNjQpICwgZGVzY3JpcHRpb24gbnZhcmNoYXIoMjU1KSAsIGxhc3Rfb2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBoZWxkX3VudGlsX2RhdGUgZGF0ZXRpbWUgLCBzdGFydF9kYXRlIGRhdGV0aW1lICwgZW5kX2RhdGUgZGF0ZXRpbWUgLCBuZXh0X3N0YXJ0X3RpbWUgZGF0ZXRpbWUgLCBtYXhpbXVtX3dvcmtlcnMgaW50ICwgaW50ZXJfc3dlZXBfZGVsYXkgaW50ICwgb2JqZWN0c19leGFtaW5lZCBmbG9hdCAsIG9iamVjdHNfcHJvY2Vzc2VkIGZsb2F0ICwgb2JqZWN0c19mYWlsZWQgZmxvYXQgLCBpc19lbmFibGVkIHRpbnlpbnQgLCBtYXhpbXVtX2ZhaWx1cmVzIGludCAsIGVmZmVjdGl2ZV9iZWdpbl9kYXRlIGRhdGV0aW1lICwgZWZmZWN0aXZlX2VuZF9kYXRlIGRhdGV0aW1lICwgc3RvcmFnZV9wb2xpY3lfaWQgdW5pcXVlaWRlbnRpZmllciAsIHN3ZWVwX3RhcmdldF9pZCB1bmlxdWVpZGVudGlmaWVyICwgaW5jbHVkZV9zdWJjbGFzc2VzIHRpbnlpbnQgLCBmaWx0ZXJfZXhwcmVzc2lvbiBudGV4dCAsIGxlYXNlX2hvbGRlcl9pZCB1bmlxdWVpZGVudGlmaWVyICwgaW1hZ2VfZm9ybWF0IGludCAsIGltYWdlX3NpemUgaW50ICwgaW1hZ2VfY29sb3IgaW50ICwgcmV0cnlfd2FpdF9pbnRlcnZhbCBpbnQgLCBiYXRjaF9zaXplIGludCAsIHN3ZWVwX2FjdGlvbl9pZCB1bmlxdWVpZGVudGlmaWVyICwgY3VycmVudF9vYmplY3RzX2V4YW1pbmVkIGZsb2F0ICwgY3VycmVudF9vYmplY3RzX3Byb2Nlc3NlZCBmbG9hdCAsIGN1cnJlbnRfb2JqZWN0c19mYWlsZWQgZmxvYXQgLCByZXRlbnRpb25fZHVyYXRpb24gaW50ICwgcmV0ZW50aW9uX3VwZGF0ZV90aW1lX3VuaXQgaW50ICwgc3BlY2lmaWNfZGF0ZSBkYXRldGltZSAsIGJhc2VfZGF0ZV9wcm9wZXJ0eV9uYW1lIG52YXJjaGFyKDY0KSAsIGNvbXBsZXRlZF9pdGVyYXRpb25zIGludCAsIHJlY29yZF9mYWlsdXJlcyB0aW55aW50ICwgZW5kX3JlcGxpY2F0aW9uX2FmdGVyX21vdmUgdGlueWludCAsIGludGVyX2JhdGNoX2RlbGF5IGludCAsIHN3ZWVwX21vZGUgaW50ICwgcXVlcnlfdGltZW91dCBpbnQgLCBlZmZlY3RpdmVfc3FsIG50ZXh0ICwgbGFzdF9mYWlsdXJlX3JlYXNvbiBudGV4dCAsIGZhaWx1cmVfY291bnQgaW50ICwgc2VhcmNoX2NvbnRpbnVhdGlvbl9jb29raWUgbnRleHQgLCBzZWFyY2hfb2JqZWN0X3N0b3JlX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBtYXhpbXVtX3Jvd19jb3VudCBpbnQgLCBjdXJyZW50X29iamVjdHNfZGVmZXJyZWQgZmxvYXQgLCBvYmplY3RzX2RlZmVycmVkIGZsb2F0ICwgY29weV9yZXRhaW5lZCB0aW55aW50ICwgdXBkYXRlX3N0b3JhZ2VfcG9saWN5IHRpbnlpbnQgKSAKQ1JFQVRFIFRBQkxFIFN3ZWVwUmVsYXRpb25zaGlwKG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGhvbWVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIHBvbGljeV9pZCB1bmlxdWVpZGVudGlmaWVyICwgcG9saWN5X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBzd2VlcF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9Td2VlcFJlbGF0aW9uc2hpcDg3IE9OIFN3ZWVwUmVsYXRpb25zaGlwIChwb2xpY3lfaWQsIHN3ZWVwX2lkKSAKQ1JFQVRFIFRBQkxFIFN3ZWVwUG9saWN5KG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGhvbWVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGRpc3BsYXlfbmFtZSBudmFyY2hhcig2NCkgLCBkZXNjcmlwdGlvbiBudmFyY2hhcigyNTUpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdW5pcXVlaWRlbnRpZmllciAsIGlzX2VuYWJsZWQgdGlueWludCAsIGluY2x1ZGVfc3ViY2xhc3NlcyB0aW55aW50ICwgZWZmZWN0aXZlX2JlZ2luX2RhdGUgZGF0ZXRpbWUgLCBlZmZlY3RpdmVfZW5kX2RhdGUgZGF0ZXRpbWUgLCBzdG9yYWdlX3BvbGljeV9pZCB1bmlxdWVpZGVudGlmaWVyICwgZmlsdGVyX2V4cHJlc3Npb24gbnRleHQgLCByZXRlbnRpb25fZHVyYXRpb24gaW50ICwgc3dlZXBfdGFyZ2V0X2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBzcGVjaWZpY19kYXRlIGRhdGV0aW1lICwgYmFzZV9kYXRlX3Byb3BlcnR5X25hbWUgbnZhcmNoYXIoNjQpICwgcmV0ZW50aW9uX3VwZGF0ZV90aW1lX3VuaXQgaW50ICwgb2JqZWN0c19leGFtaW5lZCBmbG9hdCAsIG9iamVjdHNfcHJvY2Vzc2VkIGZsb2F0ICwgc3dlZXBfYWN0aW9uX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBvYmplY3RzX2ZhaWxlZCBmbG9hdCAsIGN1cnJlbnRfb2JqZWN0c19leGFtaW5lZCBmbG9hdCAsIGN1cnJlbnRfb2JqZWN0c19wcm9jZXNzZWQgZmxvYXQgLCBjdXJyZW50X29iamVjdHNfZmFpbGVkIGZsb2F0ICwgY29tcGxldGVkX2l0ZXJhdGlvbnMgaW50ICwgZmFpbF9yZWNvcmRfaXRlcmF0aW9uX2tlZXAgaW50ICwgZW5kX3JlcGxpY2F0aW9uX2FmdGVyX21vdmUgdGlueWludCAsIHN3ZWVwX21vZGUgaW50ICwgdXBkYXRlX3N0b3JhZ2VfcG9saWN5IHRpbnlpbnQgLCBhdXRob3JpemF0aW9uX21vZGUgaW50ICkgCkNSRUFURSBUQUJMRSBUaHVtYm5haWwob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50IE5PVCBOVUxMICwgaG9tZV9pZCB1bmlxdWVpZGVudGlmaWVyICwgY3JlYXRvciBudmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIG52YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdW5pcXVlaWRlbnRpZmllciAsIGlucHV0X2RvY3VtZW50IHVuaXF1ZWlkZW50aWZpZXIgLCBlbGVtZW50X3NlcXVlbmNlX251bWJlciBpbnQgLCBpbWFnZSBpbWFnZSAsIGltYWdlX3NpemUgaW50ICwgbWltZV90eXBlIG52YXJjaGFyKDk2KSAsIGlzX3N5c3RlbV9nZW5lcmF0ZWQgdGlueWludCAsIHJlY292ZXJ5X2l0ZW1faWQgdW5pcXVlaWRlbnRpZmllciApIApDUkVBVEUgVU5JUVVFIElOREVYIElfVGh1bWJuYWlsODggT04gVGh1bWJuYWlsIChpbnB1dF9kb2N1bWVudCwgZWxlbWVudF9zZXF1ZW5jZV9udW1iZXIpIApDUkVBVEUgVEFCTEUgVGh1bWJuYWlsUmVxdWVzdChvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBoZWxkX3VudGlsX2RhdGUgZGF0ZXRpbWUgLCBsZWFzZV9ob2xkZXJfaWQgdW5pcXVlaWRlbnRpZmllciAsIGZhaWx1cmVfY291bnQgaW50ICwgbGFzdF9mYWlsdXJlX3JlYXNvbiBudGV4dCAsIGVudHJ5X3N0YXR1cyBpbnQgLCBkZWZlcnJhbF9jb3VudCBpbnQgLCBkZWZlcnJhbF9kYXRhIGltYWdlICwgaW5wdXRfZG9jdW1lbnQgdW5pcXVlaWRlbnRpZmllciAsIGVsZW1lbnRfc2VxdWVuY2VfbnVtYmVyIGludCApIApDUkVBVEUgSU5ERVggSV9UaHVtYm5haWxSZXF1ZXN0OTMgT04gVGh1bWJuYWlsUmVxdWVzdCAobGVhc2VfaG9sZGVyX2lkKSAKQ1JFQVRFIFRBQkxFIFJlY292ZXJ5QmluKG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGRpc3BsYXlfbmFtZSBudmFyY2hhcig2NCkgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIFRBQkxFIFJlY292ZXJ5SXRlbShvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCByZWNvdmVyeV9iaW5faWQgdW5pcXVlaWRlbnRpZmllciAsIGRlbGV0ZWRfb2JqZWN0X2Jsb2IgaW1hZ2UgLCBjbGVhbnVwX2NvbW1hbmRzIGltYWdlICwgcmVjb3ZlcmFibGVfY291bnQgaW50ICwgb3JpZ2luYWxfb2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBvcmlnaW5hbF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyICwgb3JpZ2luYWxfbmFtZSBudmFyY2hhcigyNTUpICwgb3JpZ2luYWxfY3JlYXRvciBudmFyY2hhcig4MCkgLCBvcmlnaW5hbF9jcmVhdGVfZGF0ZSBkYXRldGltZSAsIG9yaWdpbmFsX21vZGlmeV91c2VyIG52YXJjaGFyKDgwKSAsIG9yaWdpbmFsX21vZGlmeV9kYXRlIGRhdGV0aW1lICwgb3JpZ2luYWxfb2JqZWN0X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIElOREVYIElfUmVjb3ZlcnlJdGVtODkgT04gUmVjb3ZlcnlJdGVtIChyZWNvdmVyeV9iaW5faWQpIApDUkVBVEUgVEFCTEUgVGltZXNsb3Qob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBvcmRpbmFsIGludCBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1bmlxdWVpZGVudGlmaWVyICwgc2xvdF93ZWVrZGF5IGludCAsIHN0YXJ0X21pbnNfcGFzdF9taWRuaWdodCBpbnQgLCBzbG90X2R1cmF0aW9uIGludCApIApDUkVBVEUgSU5ERVggSV9UaW1lc2xvdDkwIE9OIFRpbWVzbG90IChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFRBQkxFIFN3ZWVwUmVzdWx0KG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGhvbWVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIHNvdXJjZV9vYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciAsIHNvdXJjZV9vYmplY3RfaWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIGNvbnRyb2xsaW5nX29iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyICwgY29udHJvbGxpbmdfb2JqZWN0X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBmYWlsdXJlX2Rlc2NyaXB0aW9uIG52YXJjaGFyKDEwMjQpICwgaXRlcmF0aW9uX251bWJlciBpbnQgLCBzd2VlcF9yZXN1bHRfdHlwZSBpbnQgKSAKQ1JFQVRFIFRBQkxFIEFkZE9uUmVjb3JkKG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgb3JkaW5hbCBpbnQgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIGluc3RhbGxlciBudmFyY2hhcig4MCkgLCBpbnN0YWxsX2RhdGUgZGF0ZXRpbWUgLCBpbnN0YWxsX3N0YXR1cyBpbnQgLCBpbnN0YWxsX3JlcG9ydCBudGV4dCAsIGFkZG9uX2lkIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIFRBQkxFIEluZGV4ZWRDb2x1bW4ob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBvcmRpbmFsIGludCBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1bmlxdWVpZGVudGlmaWVyICwgdGFibGVfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGNvbHVtbl9uYW1lIG52YXJjaGFyKDMwKSBOT1QgTlVMTCAsIHNvcnRfb3JkZXIgaW50IE5PVCBOVUxMICkgCkNSRUFURSBUQUJMRSBJbmRleERlZmluaXRpb24ob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBvcmRpbmFsIGludCBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1bmlxdWVpZGVudGlmaWVyICwgaW5kZXhfbmFtZSBudmFyY2hhcigxMjgpIE5PVCBOVUxMICwgc3lzX293bmVkX2Jvb2wgdGlueWludCBOT1QgTlVMTCAsIHN0b3JhZ2VfbG9jYXRpb24gbnZhcmNoYXIoMTI4KSAsIHVuaXF1ZV9ib29sIHRpbnlpbnQgTk9UIE5VTEwgLCBjYXNlX2luc2Vuc2l0aXZlIHRpbnlpbnQgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0luZGV4RGVmaW5pdGlvbjk2IE9OIEluZGV4RGVmaW5pdGlvbiAoaW5kZXhfbmFtZSkgCkNSRUFURSBUQUJMRSBTdG9yYWdlRGV2aWNlKG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIGVwb2NoX2lkIGludCBOT1QgTlVMTCAsIGhvbWVfaWQgdW5pcXVlaWRlbnRpZmllciAsIGNyZWF0b3IgbnZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgZGF0ZXRpbWUgLCBtb2RpZnlfdXNlciBudmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSBkYXRldGltZSAsIGRpc3BsYXlfbmFtZSBudmFyY2hhcig2NCkgTk9UIE5VTEwgLCBkZXNjcmlwdGlvbiBudmFyY2hhcigyNTUpICwgc2l0ZV9pZCB1bmlxdWVpZGVudGlmaWVyICwgcHJvZ19pZF9zdHJpbmcgbnZhcmNoYXIoMjU1KSAsIGNvZGVfbW9kdWxlX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBmc19hZHNfcGF0aCBudmFyY2hhcigxMjAwKSAsIHRvcF9ub2RlcyBpbnQgLCBib3R0b21fbm9kZXMgaW50ICwgdXNlcm5hbWUgbnZhcmNoYXIoMTI4KSAsIHBhc3N3b3JkIHZhcmJpbmFyeSgxMjgpICwgZGV2aWNlX3VybCBudmFyY2hhcigxMDI0KSAsIGF1dGhlbnRpY2F0aW9uX3VybCBudmFyY2hhcigxMDI0KSAsIGNvbnRhaW5lcl9uYW1lIG52YXJjaGFyKDEyOCkgLCBzeW5jX3JlcGxfc3VwcG9ydGVkIHRpbnlpbnQgLCBkZWxldGVfbWV0aG9kX3N1cHBvcnRlZCBpbnQgLCBjZXJ0X3ZhbGlkYXRpb24gdGlueWludCAsIHJlZ2lvbl9uYW1lIG52YXJjaGFyKDEyOCkgLCBzZWN1cml0eV90b2tlbiBpbWFnZSApIApDUkVBVEUgVEFCTEUgRGV2aWNlQ29ubmVjdGlvbihvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIG9yZGluYWwgaW50IE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHVuaXF1ZWlkZW50aWZpZXIgLCBkZXZpY2VfaWQgdW5pcXVlaWRlbnRpZmllciAsIHJlcGxpY2FfdHlwZSBpbnQgKSAKQ1JFQVRFIElOREVYIElfRGV2aWNlQ29ubmVjdGlvbjk3IE9OIERldmljZUNvbm5lY3Rpb24gKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpIApDUkVBVEUgVEFCTEUgU2l0ZVNldHRpbmdzKG9iamVjdF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMIFBSSU1BUlkgS0VZIE5PTkNMVVNURVJFRCAsIG9iamVjdF9jbGFzc19pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgcGFyZW50X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgb3JkaW5hbCBpbnQgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdW5pcXVlaWRlbnRpZmllciAsIHNpdGVfaWQgdW5pcXVlaWRlbnRpZmllciAsIHJlcGxpY2FfdHlwZSBpbnQgKSAKQ1JFQVRFIElOREVYIElfU2l0ZVNldHRpbmdzOTggT04gU2l0ZVNldHRpbmdzIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFRBQkxFIENvbnRlbnRCYWNrb3V0UXVldWUob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1bmlxdWVpZGVudGlmaWVyICwgZXBvY2hfaWQgaW50IE5PVCBOVUxMICwgaG9tZV9pZCB1bmlxdWVpZGVudGlmaWVyICwgY3JlYXRvciBudmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIG52YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgaGVsZF91bnRpbF9kYXRlIGRhdGV0aW1lICwgbGVhc2VfaG9sZGVyX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBmYWlsdXJlX2NvdW50IGludCAsIGxhc3RfZmFpbHVyZV9yZWFzb24gbnRleHQgLCBlbnRyeV9zdGF0dXMgaW50ICwgZGVmZXJyYWxfY291bnQgaW50ICwgZGVmZXJyYWxfZGF0YSBpbWFnZSAsIGV4cGlyYXRpb25fdGltZSBkYXRldGltZSAsIHN0b3JhZ2VfYXJlYV9pZCB1bmlxdWVpZGVudGlmaWVyICwgYmF0Y2hfaWQgdW5pcXVlaWRlbnRpZmllciAsIG9wZXJhdGlvbl9kYXRhIGltYWdlICwgcmVwbGljYV9kYXRhIGltYWdlICkgCkNSRUFURSBJTkRFWCBJX0NvbnRlbnRCYWNrb3V0UXVldWU5OSBPTiBDb250ZW50QmFja291dFF1ZXVlIChsZWFzZV9ob2xkZXJfaWQpIApDUkVBVEUgVEFCTEUgQ29udGVudERlbGV0aW9uUXVldWUob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1bmlxdWVpZGVudGlmaWVyICwgZXBvY2hfaWQgaW50IE5PVCBOVUxMICwgaG9tZV9pZCB1bmlxdWVpZGVudGlmaWVyICwgY3JlYXRvciBudmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIG52YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgaGVsZF91bnRpbF9kYXRlIGRhdGV0aW1lICwgbGVhc2VfaG9sZGVyX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBmYWlsdXJlX2NvdW50IGludCAsIGxhc3RfZmFpbHVyZV9yZWFzb24gbnRleHQgLCBlbnRyeV9zdGF0dXMgaW50ICwgZGVmZXJyYWxfY291bnQgaW50ICwgZGVmZXJyYWxfZGF0YSBpbWFnZSAsIHJlcGxpY2FfZGF0YSBpbWFnZSAsIG9wZXJhdGlvbl9kYXRhIGltYWdlICwgc3RvcmFnZV9hcmVhX2lkIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIElOREVYIElfQ29udGVudERlbGV0aW9uUXVldWUxMDAgT04gQ29udGVudERlbGV0aW9uUXVldWUgKGxlYXNlX2hvbGRlcl9pZCkgCkNSRUFURSBUQUJMRSBDb250ZW50UmVwbGljYXRpb25RdWV1ZShvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBvYmplY3RfY2xhc3NfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBlcG9jaF9pZCBpbnQgTk9UIE5VTEwgLCBob21lX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBjcmVhdG9yIG52YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIGRhdGV0aW1lICwgbW9kaWZ5X3VzZXIgbnZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgZGF0ZXRpbWUgLCBoZWxkX3VudGlsX2RhdGUgZGF0ZXRpbWUgLCBsZWFzZV9ob2xkZXJfaWQgdW5pcXVlaWRlbnRpZmllciAsIGZhaWx1cmVfY291bnQgaW50ICwgbGFzdF9mYWlsdXJlX3JlYXNvbiBudGV4dCAsIGVudHJ5X3N0YXR1cyBpbnQgLCBkZWZlcnJhbF9jb3VudCBpbnQgLCBkZWZlcnJhbF9kYXRhIGltYWdlICwgY29udGVudF9pZCB1bmlxdWVpZGVudGlmaWVyICwgaGFzaF9zZXF1ZW5jZSBmbG9hdCAsIHN0b3JhZ2VfYXJlYV9pZCB1bmlxdWVpZGVudGlmaWVyICwgcmVwbGljYV9kYXRhIGltYWdlICwgY29udGVudF9zaXplIGZsb2F0ICwgc2lnbmF0dXJlIHZhcmJpbmFyeSgzMikgLCBvcGVyYXRpb25fZGF0YSBpbWFnZSApIApDUkVBVEUgSU5ERVggSV9Db250ZW50UmVwbGljYXRpb25RdWV1ZTEwMSBPTiBDb250ZW50UmVwbGljYXRpb25RdWV1ZSAobGVhc2VfaG9sZGVyX2lkKSAKQ1JFQVRFIFRBQkxFIFNpZFRvR3VpZChvYmplY3RfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBzaWQgdmFyYmluYXJ5KDc1MCkgTk9UIE5VTEwgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1NpZFRvR3VpZDEwMyBPTiBTaWRUb0d1aWQgKHNpZCkgCkNSRUFURSBUQUJMRSBDb252ZXJzaW9uU2V0dGluZ3Mob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50IE5PVCBOVUxMICwgaG9tZV9pZCB1bmlxdWVpZGVudGlmaWVyICwgY3JlYXRvciBudmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIG52YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgZGlzcGxheV9uYW1lIG52YXJjaGFyKDY0KSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCByZWNvdmVyeV9pdGVtX2lkIHVuaXF1ZWlkZW50aWZpZXIgKSAKQ1JFQVRFIFRBQkxFIFJvbGVBY2Nlc3NEZWYob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdW5pcXVlaWRlbnRpZmllciBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBvcmRpbmFsIGludCBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1bmlxdWVpZGVudGlmaWVyICwgYWNjZXNzX2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBhY2Nlc3NfbWFzayBpbnQgKSAKQ1JFQVRFIElOREVYIElfUm9sZUFjY2Vzc0RlZjEwNSBPTiBSb2xlQWNjZXNzRGVmIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFRBQkxFIFJvbGVPYmplY3Qob2JqZWN0X2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgTk9OQ0xVU1RFUkVEICwgb2JqZWN0X2NsYXNzX2lkIHVuaXF1ZWlkZW50aWZpZXIgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1bmlxdWVpZGVudGlmaWVyIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50IE5PVCBOVUxMICwgaG9tZV9pZCB1bmlxdWVpZGVudGlmaWVyICwgY3JlYXRvciBudmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSBkYXRldGltZSAsIG1vZGlmeV91c2VyIG52YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIGRhdGV0aW1lICwgZGlzcGxheV9uYW1lIG52YXJjaGFyKDY0KSBOT1QgTlVMTCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCByZWNvdmVyeV9pdGVtX2lkIHVuaXF1ZWlkZW50aWZpZXIgLCBzZXJpYWxpemVkX2RhdGEgaW1hZ2UgLCBjYWNoZV91c24gYmlnaW50ICwgdXNuX2luZGV4IGludCAsIGRlc2NyaXB0aW9uIG52YXJjaGFyKDI1NSkgKSAKQ1JFQVRFIElOREVYIElfUm9sZU9iamVjdDEwNiBPTiBSb2xlT2JqZWN0ICh1c25faW5kZXgsIGNhY2hlX3Vzbiwgb2JqZWN0X2lkLCBlcG9jaF9pZCkgCkNSRUFURSBUQUJMRSBSb2xlQ2FjaGVVU04odXNuX2luZGV4IGludCBOT1QgTlVMTCBQUklNQVJZIEtFWSBOT05DTFVTVEVSRUQgLCBjYWNoZV91c24gYmlnaW50IE5PVCBOVUxMICkgCncEAEEAB3QAEUV2ZW50RXhwb3J0U3RvcmVzdwYACQcFAgRxAH4ACnVxAH4ACwAAABAXb9B9WPVATp2ngpsnJofzcQB+ACF3BAADAAd0AAtEZWZhdWx0U2l0ZXcEAAkCBHQABFNpdGV1cQB+AAsAAAAQTJpTB2bdK0mKC7wjY8m9uXcEAEEAB3QAB1RlbmFudHN3BgAJBwUCBHEAfgAKdXEAfgALAAAAEBdv0H1Y9UBOnaeCmycmh/NxAH4AJncEAAEACHQAFE9iamVjdFN0b3JlU2NoZW1hREIydN7+LS0gR2VuZXJhdGVkIGZvciBEQjIgTFVXIGRhdGFiYXNlcyBvbjogVGh1IFNlcCAwNSAxNzo0MDozNiBDRFQgMjAxOQotLSBUaGUgZm9sbG93aW5nIFNjaGVtYVJldmlzaW9uIGNvbW1lbnQgbXVzdCBiZSBwcmVzZW50IGFuZCBtdXN0IGNvcnJlc3BvbmQgdG8KLS0gdGhlIHByb3BlciBzY2hlbWEgcmV2aXNpb24gbGV2ZWwgYXQgdGhlIHRpbWUgdGhlIE9iamVjdFN0b3JlIGlzIGNyZWF0ZWQuCi0tIFNjaGVtYVJldmlzaW9uOiAyNC4xLjUKLS0gCkNSRUFURSBUQUJMRSBEb2NWZXJzaW9uKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIHN0b3JhZ2VfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgaXNfcmVzZXJ2ZWQgc21hbGxpbnQgTk9UIE5VTEwgLCBpc19jdXJyZW50IHNtYWxsaW50IE5PVCBOVUxMICwgaXNfZnJvemVuIHNtYWxsaW50IE5PVCBOVUxMICwgdmVyc2lvbl9zZXJpZXNfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgY29udGVudF9zaXplIGRvdWJsZSAsIGxvY2tfdG9rZW4gdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgbG9ja190aW1lb3V0IGludGVnZXIgLCBsb2NrX293bmVyIHZhcmdyYXBoaWMoNjQpICwgZG9jX2xpZmVjeWNsZV9wb2xpY3kgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZG9jX3N0YXRlIHZhcmdyYXBoaWMoNjQpICwgaXNfaW5fZXhjZXB0aW9uX3N0YXRlIHNtYWxsaW50ICwgc3RvcmFnZV9sb2NhdGlvbiB2YXJncmFwaGljKDEpICwgY29tcG9uZW50X3R5cGVzIHZhcmNoYXIoMTAwKSBmb3IgYml0IGRhdGEgLCByZXRyaWV2YWxfbmFtZXMgdmFyY2hhcigyMDApIGZvciBiaXQgZGF0YSAsIGNvbXBvbmVudF90eXBlc18yIGJsb2IoMUcpICwgcmV0cmlldmFsX25hbWVzXzIgYmxvYigxRykgLCBtaW1lX3R5cGUgdmFyZ3JhcGhpYyg5NikgLCBjb250ZW50X2luZm8gdmFyY2hhcig5NikgZm9yIGJpdCBkYXRhICwgY29udGVudF9pbmZvXzIgYmxvYigxRykgLCBuZXh0X2NvbnRlbnRfdW5pcXVlX2lkIGludGVnZXIgLCB2d192ZXJzaW9uIHZhcmdyYXBoaWMoMjU1KSAsIHZlcnNpb25pbmdfZW5hYmxlZCBzbWFsbGludCBOT1QgTlVMTCAsIHhtbF9kb2NfdHlwZSB2YXJncmFwaGljKDI1NikgLCB4bWxfdGFyZ2V0X2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNsYXNzaWZpY2F0aW9uX3N0YXRlIGludGVnZXIgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCByZWNvdmVyeV9pdGVtX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGxvY2tfc2lkIGJsb2IoMUcpICwgbWFqb3JfdmVyc2lvbl9udW1iZXIgaW50ZWdlciBOT1QgTlVMTCAsIG1pbm9yX3ZlcnNpb25fbnVtYmVyIGludGVnZXIgTk9UIE5VTEwgLCB2ZXJzaW9uX3N0YXR1cyBpbnRlZ2VyIE5PVCBOVUxMICwgc2VjdXJpdHlfcG9saWN5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHJlc2VydmF0aW9uX3R5cGUgaW50ZWdlciAsIHJlc2VydmF0aW9uX293bmVyX3NpZCBibG9iKDFHKSAsIGNvbnRlbnRfbGFzdF9hY2Nlc3NlZF9kYXRlIHRpbWVzdGFtcCAsIGNvbnRlbnRfcmVmZXJyYWxfYmxvYiBibG9iKDFHKSAsIGNvbnRlbnRfcmV0ZW50aW9uX2RhdGUgdGltZXN0YW1wICwgc3RvcmFnZV9hcmVhX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGluZGV4YXRpb25faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgaW5kZXhfZmFpbHVyZV9jb2RlIGludGVnZXIgLCBjb21wb3VuZF9kb2N1bWVudF9zdGF0ZSBpbnRlZ2VyICwgZHluYW1pY19jcl91cGRhdGVfc3RhdHVzIGludGVnZXIgLCBzZWN1cml0eV9mb2xkZXJfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY2hlY2tlZF9pbl9kYXRlIHRpbWVzdGFtcCApIApDUkVBVEUgVU5JUVVFIElOREVYIElfRG9jVmVyc2lvbjIyIE9OIERvY1ZlcnNpb24gKHZlcnNpb25fc2VyaWVzX2lkLCBtYWpvcl92ZXJzaW9uX251bWJlciBERVNDLCBtaW5vcl92ZXJzaW9uX251bWJlciBERVNDKSAgCkNSRUFURSBJTkRFWCBJX0RvY1ZlcnNpb243MyBPTiBEb2NWZXJzaW9uIChzZWN1cml0eV9mb2xkZXJfaWQpICAKQ1JFQVRFIFRBQkxFIENvbnRlbnQoZWxlbWVudF9pZCB2YXJncmFwaGljKDQ4KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBleHRlbnNpb24gdmFyZ3JhcGhpYygzKSAsIGNvbnRlbnQgYmxvYigxRykgLCBjb250ZW50X3NpemUgaW50ZWdlciBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIHJlZmNvdW50IGludGVnZXIgLCBzY2ZfZGF0YSB2YXJjaGFyKDMyKSBmb3IgYml0IGRhdGEgKSAKQ1JFQVRFIFRBQkxFIEdlbmVyaWMob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgbG9ja190b2tlbiB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBsb2NrX3RpbWVvdXQgaW50ZWdlciAsIGxvY2tfb3duZXIgdmFyZ3JhcGhpYyg2NCkgLCBsb2NrX3NpZCBibG9iKDFHKSAsIHNlY3VyaXR5X3BvbGljeV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBpbmRleGF0aW9uX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGluZGV4X2ZhaWx1cmVfY29kZSBpbnRlZ2VyICwgc2VjdXJpdHlfZm9sZGVyX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHJldGVudGlvbl9kYXRlIHRpbWVzdGFtcCAsIHJlY292ZXJ5X2l0ZW1faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICkgCkNSRUFURSBJTkRFWCBJX0dlbmVyaWM3NCBPTiBHZW5lcmljIChzZWN1cml0eV9mb2xkZXJfaWQpICAKQ1JFQVRFIFRBQkxFIENsYXNzRGVmaW5pdGlvbihvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBjcmVhdG9yIHZhcmdyYXBoaWMoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyZ3JhcGhpYyg4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBzdXBlcmNsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHJvb3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc3VwX3VzZXJfaW5zdGFuY2VzIHNtYWxsaW50IE5PVCBOVUxMICwgcGVyc2lzdGVudF9ib29sIHNtYWxsaW50IE5PVCBOVUxMICwgc3lzX293bmVkX2Jvb2wgc21hbGxpbnQgTk9UIE5VTEwgLCB0YWJsZV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBzdXBfdXNlcl9zdWJjbGFzc2VzIHNtYWxsaW50IE5PVCBOVUxMICwgZGVmYXVsdF9pbnN0YW5jZV9zZWN1cml0eV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBzdXBfdXNlcl9wcm9wcyBzbWFsbGludCBOT1QgTlVMTCAsIHN5bWJvbGljX25hbWUgdmFyZ3JhcGhpYyg2NCkgLCBpc19oaWRkZW4gc21hbGxpbnQgLCBpc19jYnJfZW5hYmxlZCBzbWFsbGludCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGFkZG9uX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHJldGVudGlvbl9wZXJpb2QgaW50ZWdlciAsIHJldGVudGlvbl91bml0cyBpbnRlZ2VyICwgYWN0aW9uX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSApIApDUkVBVEUgSU5ERVggSV9DbGFzc0RlZmluaXRpb24yOSBPTiBDbGFzc0RlZmluaXRpb24gKHN1cGVyY2xhc3NfaWQpICAKQ1JFQVRFIFRBQkxFIEdsb2JhbFByb3BlcnR5RGVmKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRhdGF0eXBlIGludGVnZXIgTk9UIE5VTEwgLCBjYXJkaW5hbGl0eSBpbnRlZ2VyIE5PVCBOVUxMICwgdmFsdWVfcmVxdWlyZWRfYm9vbCBzbWFsbGludCAsIGhpZGRlbl9ib29sIHNtYWxsaW50ICwgbmFtZV9wcm9wZXJ0eV9ib29sIHNtYWxsaW50ICwgbWF4X2xlbmd0aF9zdHJpbmcgaW50ZWdlciAsIG1heF9sZW5ndGhfYmluYXJ5IGludGVnZXIgLCBkZWZhdWx0X2JpbmFyeSBibG9iKDFHKSAsIGRlZmF1bHRfYm9vbCBzbWFsbGludCAsIGRlZmF1bHRfZGF0ZXRpbWUgdGltZXN0YW1wICwgZGVmYXVsdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBkZWZhdWx0X2ludDMyIGludGVnZXIgLCBkZWZhdWx0X2Zsb2F0NjQgZG91YmxlICwgZGVmYXVsdF9zdHJpbmcgdmFyZ3JhcGhpYyg0MDAwKSAsIG1pbmltdW1fZGF0ZXRpbWUgdGltZXN0YW1wICwgbWluaW11bV9pbnQzMiBpbnRlZ2VyICwgbWluaW11bV9mbG9hdDY0IGRvdWJsZSAsIG1heGltdW1fZGF0ZXRpbWUgdGltZXN0YW1wICwgbWF4aW11bV9pbnQzMiBpbnRlZ2VyICwgbWF4aW11bV9mbG9hdDY0IGRvdWJsZSAsIGN2bF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBsaXN0X2lzX3NldF9ib29sIHNtYWxsaW50ICwgc3ltYm9saWNfbmFtZSB2YXJncmFwaGljKDY0KSAsIHNldHRhYmlsaXR5IGludGVnZXIgLCBkaXNwbGF5X2NhdGVnb3J5IHZhcmdyYXBoaWMoNjQpICwgbW9kaWZpY2F0aW9uX2FjY2VzcyBpbnRlZ2VyICwgYWxsb3dzX2ZvcmVpZ25fb2JqZWN0IHNtYWxsaW50ICwgc2VjdXJpdHlfcHJveHlfdHlwZSBpbnRlZ2VyICwgbWFya2luZ19zZXRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgdXNlX2xvbmdfY29sdW1uIHNtYWxsaW50ICwgcGVyc2lzdGVuY2VfdHlwZSBpbnRlZ2VyICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgYWRkb25faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgYXVkaXRfYXNfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgbG9uZ19kZWZhdWx0X3N0cmluZyBkYmNsb2IoNTEyTSkgLCBkYXRlX29ubHlfYm9vbCBzbWFsbGludCAsIHJlYWRfcHJvdGVjdGVkX2Jvb2wgc21hbGxpbnQgLCBjYnJfcHJvcGFnYXRpb24gaW50ZWdlciApIApDUkVBVEUgVEFCTEUgUHJvcGVydHlEZWZpbml0aW9uKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZGJnX2Rpc3BsYXlfbmFtZSB2YXJncmFwaGljKDMyKSAsIGRiZ19jbGFzc19uYW1lIHZhcmdyYXBoaWMoMzIpICwgc3lzX293bmVkX2Jvb2wgc21hbGxpbnQgTk9UIE5VTEwgLCBwcmltYXJ5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGdsb2JhbF9wcm9wX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGluaGVyaXRlZF9ib29sIHNtYWxsaW50IE5PVCBOVUxMICwgZGF0YXR5cGUgaW50ZWdlciBOT1QgTlVMTCAsIGNhcmRpbmFsaXR5IGludGVnZXIgTk9UIE5VTEwgLCB2YWx1ZV9yZXF1aXJlZF9ib29sIHNtYWxsaW50IE5PVCBOVUxMICwgaGlkZGVuX2Jvb2wgc21hbGxpbnQgTk9UIE5VTEwgLCBuYW1lX3Byb3BlcnR5X2Jvb2wgc21hbGxpbnQgTk9UIE5VTEwgLCBtYXhfbGVuZ3RoIGludGVnZXIgLCBkZWZhdWx0X2JpbmFyeSBibG9iKDFHKSAsIGRlZmF1bHRfYm9vbCBzbWFsbGludCAsIGRlZmF1bHRfZGF0ZXRpbWUgdGltZXN0YW1wICwgZGVmYXVsdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBkZWZhdWx0X2ludDMyIGludGVnZXIgLCBkZWZhdWx0X2Zsb2F0NjQgZG91YmxlICwgZGVmYXVsdF9vYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZGVmYXVsdF9vYmplY3RfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZGVmYXVsdF9zdHJpbmcgdmFyZ3JhcGhpYyg0MDAwKSAsIG1pbmltdW1fZGF0ZXRpbWUgdGltZXN0YW1wICwgbWluaW11bV9pbnQzMiBpbnRlZ2VyICwgbWluaW11bV9mbG9hdDY0IGRvdWJsZSAsIG1heGltdW1fZGF0ZXRpbWUgdGltZXN0YW1wICwgbWF4aW11bV9pbnQzMiBpbnRlZ2VyICwgbWF4aW11bV9mbG9hdDY0IGRvdWJsZSAsIGN2bF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCByZXF1aXJlZF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCByZWZsZWN0aXZlX3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZGVsZXRpb25fYWN0aW9uIGludGVnZXIgLCBzZWN1cml0eV9wcm9wYWdhdGlvbiBpbnRlZ2VyICwgdGFibGVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY29sdW1uX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGxpc3RfaXNfc2V0X2Jvb2wgc21hbGxpbnQgLCByZXF1aXJlZF9hY2Nlc3MgaW50ZWdlciAsIGFsbG93ZWRfY2hhbmdlcyBpbnRlZ2VyIE5PVCBOVUxMICwgc2V0dGFiaWxpdHkgaW50ZWdlciAsIGNvcHlfdG9fcmVzZXJ2YXRpb24gc21hbGxpbnQgLCBtb2RpZmljYXRpb25fYWNjZXNzIGludGVnZXIgLCBhbGxvd3NfZm9yZWlnbl9vYmplY3Qgc21hbGxpbnQgLCBtYXJraW5nX3NldF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCB1c2VfbG9uZ19jb2x1bW4gc21hbGxpbnQgLCBpc19jYnJfZW5hYmxlZCBzbWFsbGludCAsIHBlcnNpc3RlbmNlX3R5cGUgaW50ZWdlciAsIGF1ZGl0X2FzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGxvbmdfZGVmYXVsdF9zdHJpbmcgZGJjbG9iKDUxMk0pICwgZGF0ZV9vbmx5X2Jvb2wgc21hbGxpbnQgLCByZWFkX3Byb3RlY3RlZF9ib29sIHNtYWxsaW50ICwgY2JyX3Byb3BhZ2F0aW9uIGludGVnZXIgKSAKQ1JFQVRFIElOREVYIElfUHJvcGVydHlEZWZpbml0aW9uMTkgT04gUHJvcGVydHlEZWZpbml0aW9uIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgQ0xVU1RFUiAgCkNSRUFURSBUQUJMRSBUYWJsZURlZmluaXRpb24ob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgdGFibGVfbmFtZSB2YXJncmFwaGljKDMwKSBOT1QgTlVMTCAsIHRhYmxlX3R5cGUgaW50ZWdlciBOT1QgTlVMTCAsIG92ZXJmbG93X3RhYmxlX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSApIApDUkVBVEUgVEFCTEUgQ29sdW1uRGVmaW5pdGlvbihvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGRiZ190YWJsZV9uYW1lIHZhcmdyYXBoaWMoMzApICwgY29sdW1uX25hbWUgdmFyZ3JhcGhpYygzMCkgTk9UIE5VTEwgLCBjb2x1bW5fZGF0YXR5cGUgaW50ZWdlciBOT1QgTlVMTCAsIGNvbHVtbl9zaXplIGludGVnZXIgLCBhbGxvd3NfbnVsbF9ib29sIHNtYWxsaW50IE5PVCBOVUxMICwgYWxsb3dzX3VzZXJfaW5kZXggc21hbGxpbnQgLCBwcm9wX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGlzX3NpbmdsZV9pbmRleGVkIHNtYWxsaW50ICwgaXNfc3lzdGVtX293bmVkIHNtYWxsaW50ICkgCkNSRUFURSBJTkRFWCBJX0NvbHVtbkRlZmluaXRpb243IE9OIENvbHVtbkRlZmluaXRpb24gKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpICAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0NvbHVtbkRlZmluaXRpb24yMyBPTiBDb2x1bW5EZWZpbml0aW9uIChwYXJlbnRfaWQsIHByb3BfaWQpICAKQ1JFQVRFIFRBQkxFIExvY2FsaXplZFN0cmluZyhvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGxvY2FsZV9uYW1lIHZhcmdyYXBoaWMoMTYpIE5PVCBOVUxMICwgdGV4dCB2YXJncmFwaGljKDQwMDApIE5PVCBOVUxMICkgCkNSRUFURSBJTkRFWCBJX0xvY2FsaXplZFN0cmluZzE4IE9OIExvY2FsaXplZFN0cmluZyAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgVEFCTEUgQWxpYXNJZChwYXJlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgYWxpYXNfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9BbGlhc0lkNiBPTiBBbGlhc0lkIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgQ0xVU1RFUiAgCkNSRUFURSBJTkRFWCBJX0FsaWFzSWQzNiBPTiBBbGlhc0lkIChjbGFzc19pZCkgIApDUkVBVEUgVEFCTEUgUmVsYXRpb25zaGlwKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGhlYWRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgaGVhZF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCB0YWlsX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHZlcnNpb25fc2VyaWVzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHByb3BhZ2F0ZV9zZWN1cml0eSBzbWFsbGludCAsIG5hbWUgdmFyZ3JhcGhpYygyNTUpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgcmVjb3ZlcnlfaXRlbV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1JlbGF0aW9uc2hpcDI3IE9OIFJlbGF0aW9uc2hpcCAodGFpbF9pZCwgbmFtZSkgIENMVVNURVIgIApDUkVBVEUgSU5ERVggSV9SZWxhdGlvbnNoaXAyOCBPTiBSZWxhdGlvbnNoaXAgKGhlYWRfaWQpICAKQ1JFQVRFIElOREVYIElfUmVsYXRpb25zaGlwNDEgT04gUmVsYXRpb25zaGlwICh2ZXJzaW9uX3Nlcmllc19pZCkgIApDUkVBVEUgVEFCTEUgQ3ZsKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJncmFwaGljKDY0KSBOT1QgTlVMTCAsIGN2bF9kYXRhX3R5cGUgaW50ZWdlciAsIGRlc2NyaXB0aW9uIHZhcmdyYXBoaWMoMjU1KSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGFkZG9uX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfQ3ZsMzIgT04gQ3ZsIChkaXNwbGF5X25hbWUpICAKQ1JFQVRFIFRBQkxFIEN2bEVsZW1lbnQob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9jdmxfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHZhbF9pbnRlZ2VyIGludGVnZXIgLCB2YWxfc3RyaW5nIHZhcmdyYXBoaWMoMTAyNCkgLCBjaG9pY2VfdHlwZSBpbnRlZ2VyIE5PVCBOVUxMICwgbmVzdGluZ19sZXZlbCBpbnRlZ2VyICkgCkNSRUFURSBJTkRFWCBJX0N2bEVsZW1lbnQxMSBPTiBDdmxFbGVtZW50IChwYXJlbnRfY3ZsX2lkKSAgCkNSRUFURSBUQUJMRSBDb250YWluZXIob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgcGFyZW50X2NvbnRhaW5lcl9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBuYW1lIHZhcmdyYXBoaWMoMjU1KSAsIGluaXRfY29udGFpbmVyX2Jvb2wgc21hbGxpbnQgLCBsb2NrX3Rva2VuIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGxvY2tfdGltZW91dCBpbnRlZ2VyICwgbG9ja19vd25lciB2YXJncmFwaGljKDY0KSAsIGxvY2tfc2lkIGJsb2IoMUcpICwgc2VjdXJpdHlfcG9saWN5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGluZGV4YXRpb25faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgaW5kZXhfZmFpbHVyZV9jb2RlIGludGVnZXIgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCByZXRlbnRpb25fZGF0ZSB0aW1lc3RhbXAgLCByZWNvdmVyeV9pdGVtX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfQ29udGFpbmVyMjQgT04gQ29udGFpbmVyIChwYXJlbnRfY29udGFpbmVyX2lkLCBuYW1lKSAgQ0xVU1RFUiAgCkNSRUFURSBUQUJMRSBHbG9iYWxQcm9wQWxpYXNJZChwYXJlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgcGFyZW50X2lkX2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGFsaWFzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCApIApDUkVBVEUgVU5JUVVFIElOREVYIElfR2xvYmFsUHJvcEFsaWFzSWQ5IE9OIEdsb2JhbFByb3BBbGlhc0lkIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgCkNSRUFURSBUQUJMRSBMaXN0T2ZCaW5hcnkocGFyZW50X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIGVsZW1lbnRfdmFsdWUgYmxvYigxRykgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBwYXJlbnRfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9MaXN0T2ZCaW5hcnkxMCBPTiBMaXN0T2ZCaW5hcnkgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwsIHBhcmVudF9pZF9jbGFzcykgIApDUkVBVEUgVEFCTEUgTGlzdE9mQm9vbGVhbihwYXJlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSBzbWFsbGludCBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIHBhcmVudF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0xpc3RPZkJvb2xlYW4xMiBPTiBMaXN0T2ZCb29sZWFuIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsLCBwYXJlbnRfaWRfY2xhc3MpICAKQ1JFQVRFIFRBQkxFIExpc3RPZkRhdGVUaW1lKHBhcmVudF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBlbGVtZW50X3ZhbHVlIHRpbWVzdGFtcCBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIHBhcmVudF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0xpc3RPZkRhdGVUaW1lMTMgT04gTGlzdE9mRGF0ZVRpbWUgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwsIHBhcmVudF9pZF9jbGFzcykgIApDUkVBVEUgVEFCTEUgTGlzdE9mRmxvYXQ2NChwYXJlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSBkb3VibGUgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBwYXJlbnRfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9MaXN0T2ZGbG9hdDY0MTQgT04gTGlzdE9mRmxvYXQ2NCAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCwgcGFyZW50X2lkX2NsYXNzKSAgCkNSRUFURSBUQUJMRSBMaXN0T2ZJZChwYXJlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBwYXJlbnRfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9MaXN0T2ZJZDE1IE9OIExpc3RPZklkIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsLCBwYXJlbnRfaWRfY2xhc3MpICAKQ1JFQVRFIFRBQkxFIExpc3RPZkludGVnZXIzMihwYXJlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSBpbnRlZ2VyIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgcGFyZW50X2lkX2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mSW50ZWdlcjMyMTYgT04gTGlzdE9mSW50ZWdlcjMyIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsLCBwYXJlbnRfaWRfY2xhc3MpICAKQ1JFQVRFIFRBQkxFIExpc3RPZlN0cmluZyhwYXJlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSB2YXJncmFwaGljKDQwMDApIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgcGFyZW50X2lkX2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mU3RyaW5nMTcgT04gTGlzdE9mU3RyaW5nIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsLCBwYXJlbnRfaWRfY2xhc3MpICAKQ1JFQVRFIFRBQkxFIFNlY3VyaXR5RGVzYyhzZWN1cml0eV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgcmVmZXJlbmNlX2NvdW50IGludGVnZXIgTk9UIE5VTEwgLCBoYXNoIGludGVnZXIgTk9UIE5VTEwgLCBudF9zZWN1cml0eV9kZXNjcmlwdG9yIGJsb2IoMUcpIE5PVCBOVUxMICwgY2FjaGVfcHJlX2xvYWQgc21hbGxpbnQgKSAKQ1JFQVRFIElOREVYIElfU2VjdXJpdHlEZXNjMzcgT04gU2VjdXJpdHlEZXNjIChoYXNoKSAgCkNSRUFURSBUQUJMRSBERFN0YXRlKGlkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNjaGVtYV9yZXZpc2lvbl9zdHJpbmcgdmFyZ3JhcGhpYyg2NCkgLCBmb2xkZXJfY2FjaGVfZXBvY2ggaW50ZWdlciBOT1QgTlVMTCAsIGxhc3RfZ29vZF9jaV9zbiBpbnRlZ2VyIE5PVCBOVUxMICwgbGFzdF9nb29kX3BpX3NuIGludGVnZXIgTk9UIE5VTEwgLCBsYXN0X2dvb2RfYW5ub19waV9zbiBpbnRlZ2VyIE5PVCBOVUxMICwgaW5kZXhfaG9zdF9uYW1lIHZhcmdyYXBoaWMoMTUpICwgaW5kZXhfbGVhc2VfZXhwaXJ5IHRpbWVzdGFtcCAsIGluZGV4X2FyZWFfZXBvY2ggaW50ZWdlciAsIHN0b3JhZ2VfYXJlYV9lcG9jaCBpbnRlZ2VyICwgc3RvcmFnZV9wb2xpY3lfZXBvY2ggaW50ZWdlciAsIGFzeW5jX3VwZ3JhZGVfc3RhdGUgaW50ZWdlciAsIGlzX2N1c3RvbV9zY2hlbWEgc21hbGxpbnQgLCBzY2hlbWFfc2NyaXB0IGRiY2xvYig1MTJNKSAsIGV4dGVybmFsX21kX2Vwb2NoIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHNxbF90cmFuc2xhdGlvbl9lcG9jaCBpbnRlZ2VyICwgbGFzdF9wdXJnZV90aW1lIHRpbWVzdGFtcCAsIGV2ZW50X2FjdGlvbl9lcG9jaCBpbnRlZ2VyICwgYXVkaXRfZGlzcF9sZWFzZV9leHBpcnkgdGltZXN0YW1wICwgYXVkaXRfZGlzcF9yZXN0YXJ0IGJpZ2ludCAsIGNvbnRpbnVpdHlfZGF0YSBibG9iKDFHKSAsIHN0b3JlX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHN1YnNjcmlwdGlvbl9lcG9jaCBpbnRlZ2VyICwgaW5kZXhpbmdfYmFsYW5jaW5nX3RpbWUgdGltZXN0YW1wICkgCkNSRUFURSBUQUJMRSBTdG9yYWdlQ2xhc3Mob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmdyYXBoaWMoNjQpIE5PVCBOVUxMICwgZGVzY3JpcHRpb24gdmFyZ3JhcGhpYygyNTUpICwgcmVwb3NpdG9yeV90eXBlIHZhcmdyYXBoaWMoMTYpICwgZnNfYWRzX3BhdGggdmFyZ3JhcGhpYygxMjAwKSAsIGRiX29wdF9oaW50IGludGVnZXIgLCBjb250ZW50X2NhY2hlZCBpbnRlZ2VyICwgYXJlYV9zdGF0dXMgaW50ZWdlciAsIGNsb3N1cmVfZGF0ZSB0aW1lc3RhbXAgLCBlbGVtZW50X2NvdW50IGRvdWJsZSAsIGVsZW1lbnRzX2NyZWF0ZWQgZG91YmxlICwgZWxlbWVudHNfZGVsZXRlZCBkb3VibGUgLCBlbGVtZW50X2tieXRlcyBkb3VibGUgLCBtYXhfZWxlbWVudHMgZG91YmxlICwgbWF4X3NpemUgZG91YmxlICwgZGF0YWJhc2VfdHlwZSBpbnRlZ2VyICwgam5kaV9kYXRhX3NvdXJjZSB2YXJncmFwaGljKDY0KSAsIGpuZGlfeGFfZGF0YV9zb3VyY2UgdmFyZ3JhcGhpYyg2NCkgLCBkZWxldGVfbWV0aG9kIGludGVnZXIgLCBmcmVlX3RocmVzaG9sZCBpbnRlZ2VyICwgZnJlZV93YXJuaW5nIGludGVnZXIgLCBmaWx0ZXJfZXhwcmVzc2lvbiBkYmNsb2IoNTEyTSkgLCBmaXhlZF9jb250ZW50X2RldmljZV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBzaXRlX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHJlc291cmNlX3N0cmluZyB2YXJncmFwaGljKDUxMikgLCBhbGxvd3NfZGVsZXRlIHNtYWxsaW50ICwgaW5kZXhfYXJlYV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBvcmlnaW5hbF9maWxlc3RvcmVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZGlyZWN0b3J5X3N0cnVjdHVyZSBpbnRlZ2VyICwgc3RhbmRieV9hY3RpdmF0aW9uX3ByaW9yaXR5IGludGVnZXIgLCByZXRlbnRpb25fcGVyaW9kIGludGVnZXIgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBzaXNfZW5hYmxlZCBzbWFsbGludCAsIHNpc190YWJsZV9uYW1lIHZhcmdyYXBoaWMoMzApICwgcmV0ZW50aW9uX21vZGUgaW50ZWdlciAsIGVuY3J5cHRpb25fZW5hYmxlZCBzbWFsbGludCAsIHNjZl9pbmRleCBpbnRlZ2VyICwgY29tcHJlc3Npb25fZW5hYmxlZCBzbWFsbGludCAsIGNvbXByZXNzaW9uX3RocmVzaG9sZCBpbnRlZ2VyICwgdmVyaWZpY2F0aW9uX21vZGUgaW50ZWdlciAsIGlkX2JhdGNoX3NpemUgaW50ZWdlciAsIHN5bmNfcmVxdWlyZWQgaW50ZWdlciAsIHN5bmNfZGVzaXJlZCBpbnRlZ2VyICwgYmF0Y2hfdHRsIGludGVnZXIgLCBvcGVuX3RpbWVfbGltaXQgaW50ZWdlciAsIGVuY3J5cHRpb25fbWV0aG9kIGludGVnZXIgLCB1c2VfZGV2aWNlX2hvbGQgc21hbGxpbnQgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1N0b3JhZ2VDbGFzczI1IE9OIFN0b3JhZ2VDbGFzcyAoZGlzcGxheV9uYW1lKSAgCkNSRUFURSBUQUJMRSBDb250ZW50U2VhcmNoKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBxdWVyaWVkX29iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBjb250ZW50IHZhcmdyYXBoaWMoMTApICwgcmFuayBkb3VibGUgLCBoaXRjb3VudCBpbnRlZ2VyICwgY29udGVudF9zaXplIGRvdWJsZSAsIHNlcV9udW1iZXIgaW50ZWdlciAsIHN1bW1hcnkgdmFyZ3JhcGhpYyg1MTIpICwgaGlnaGxpZ2h0X2Jsb2IgYmxvYigxRykgKSAKQ1JFQVRFIFRBQkxFIEFubm90YXRpb24ob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgc3RvcmFnZV9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBjb250ZW50X3NpemUgZG91YmxlICwgYW5ub3RhdGVkX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGFubm90YXRlZF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBhbm5vdGF0ZWRfZWxlbWVudCBpbnRlZ2VyICwgZGVzY3JpcHRpb24gdmFyZ3JhcGhpYygyNTUpICwgc3RvcmFnZV9sb2NhdGlvbiB2YXJncmFwaGljKDEpICwgY29tcG9uZW50X3R5cGVzIHZhcmNoYXIoMTAwKSBmb3IgYml0IGRhdGEgLCByZXRyaWV2YWxfbmFtZXMgdmFyY2hhcigyMDApIGZvciBiaXQgZGF0YSAsIGNvbXBvbmVudF90eXBlc18yIGJsb2IoMUcpICwgcmV0cmlldmFsX25hbWVzXzIgYmxvYigxRykgLCBtaW1lX3R5cGUgdmFyZ3JhcGhpYyg5NikgLCBjb250ZW50X2luZm8gdmFyY2hhcig5NikgZm9yIGJpdCBkYXRhICwgY29udGVudF9pbmZvXzIgYmxvYigxRykgLCBuZXh0X2NvbnRlbnRfdW5pcXVlX2lkIGludGVnZXIgLCBjb250ZW50X2xhc3RfYWNjZXNzZWRfZGF0ZSB0aW1lc3RhbXAgLCBzdG9yYWdlX2FyZWFfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgaW5kZXhhdGlvbl9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBpbmRleF9mYWlsdXJlX2NvZGUgaW50ZWdlciAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHJldGVudGlvbl9kYXRlIHRpbWVzdGFtcCAsIHJlY292ZXJ5X2l0ZW1faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICkgCkNSRUFURSBJTkRFWCBJX0Fubm90YXRpb24zMSBPTiBBbm5vdGF0aW9uIChhbm5vdGF0ZWRfaWQpICAKQ1JFQVRFIFRBQkxFIFN1YnNjcmlwdGlvbihvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBjcmVhdG9yIHZhcmdyYXBoaWMoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyZ3JhcGhpYyg4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBkaXNwbGF5X25hbWUgdmFyZ3JhcGhpYyg2NCkgLCBkZXNjcmlwdGlvbiB2YXJncmFwaGljKDI1NSkgLCB0YXJnZXRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgdGFyZ2V0X2lkX2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGluY2x1ZGVfc3ViY2xhc3NlcyBzbWFsbGludCAsIHByaW9yaXR5IGludGVnZXIgLCBhY3Rpb25faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgaXNfZW5hYmxlZCBzbWFsbGludCAsIGlzX3N5bmNocm9ub3VzIHNtYWxsaW50ICwgdXNlcl9zdHJpbmcgdmFyZ3JhcGhpYygyNTApICwgcHJvZ19pZF9zdHJpbmcgdmFyZ3JhcGhpYygyNTUpICwgc2NyaXB0X3RleHQgZGJjbG9iKDUxMk0pICwgcmVzZXRfbGlmZWN5Y2xlX29uX2NoZWNraW4gc21hbGxpbnQgLCBjbGFzc2lmeV9taW1lX3R5cGUgdmFyZ3JhcGhpYyg5NikgLCB3b3JrZmxvd19kZWZpbml0aW9uX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGlzb2xhdGVkX3JlZ2lvbiBpbnRlZ2VyICwgZXhwcmVzc2lvbiB2YXJncmFwaGljKDI1NSkgLCBzdWJqZWN0IHZhcmdyYXBoaWMoODApICwgdndfdmVyc2lvbiB2YXJncmFwaGljKDI1NSkgLCBlbmFibGVfbWFudWFsX2xhdW5jaCBzbWFsbGludCAsIGZpbHRlcl9leHByZXNzaW9uIGRiY2xvYig1MTJNKSAsIGZpbHRlcmVkX3Byb3BlcnR5X25hbWUgdmFyZ3JhcGhpYyg2NCkgLCBjb21waWxlZF9maWx0ZXIgYmxvYigxRykgLCBwcmVzZXJ2ZV9kaXJlY3RfcGVybWlzc2lvbnMgc21hbGxpbnQgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBzZWFyY2hfZnVuY3Rpb25fbmFtZSB2YXJncmFwaGljKDEzMCkgLCBjb252ZXJzaW9uX2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSApIApDUkVBVEUgSU5ERVggSV9TdWJzY3JpcHRpb240NiBPTiBTdWJzY3JpcHRpb24gKHRhcmdldF9pZCkgIENMVVNURVIgIApDUkVBVEUgVEFCTEUgUXVldWVJdGVtKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRlcXVldWVfaG9zdCB2YXJncmFwaGljKDE1KSAsIHJldHJ5X2NvdW50IGludGVnZXIgTk9UIE5VTEwgLCBxdWV1ZWRfb2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHF1ZXVlZF9vYmplY3RfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgc2VyaWFsaXplZF9kYXRhIGJsb2IoMUcpICwgZXZlbnRfb3BlcmF0aW9uIGludGVnZXIgLCBuZXh0X3JldHJ5X2RhdGUgdGltZXN0YW1wICwgbGVhc2VfZXhwaXJ5X2RhdGUgdGltZXN0YW1wICwgaW1wZXJzb25hdGlvbl91c2VyIHZhcmdyYXBoaWMoNDAwMCkgKSAKQ1JFQVRFIElOREVYIElfUXVldWVJdGVtNDkgT04gUXVldWVJdGVtIChuZXh0X3JldHJ5X2RhdGUpICAKQUxURVIgVEFCTEUgUXVldWVJdGVtIFZPTEFUSUxFIENBUkRJTkFMSVRZCkNSRUFURSBUQUJMRSBEb2N1bWVudFN0YXRlKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgc3RhdGVfbmFtZSB2YXJncmFwaGljKDQwMDApICwgY2FuX2JlX2RlbW90ZWQgc21hbGxpbnQgLCBlbmFibGVfc3RhdGVfcGVybWlzc2lvbnMgc21hbGxpbnQgLCBzZWN1cml0eV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgKSAKQ1JFQVRFIElOREVYIElfRG9jdW1lbnRTdGF0ZTM1IE9OIERvY3VtZW50U3RhdGUgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpICAKQ1JFQVRFIFRBQkxFIExpbmsob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgaGVhZF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBoZWFkX2lkX2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHRhaWxfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgdGFpbF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCByZWNvdmVyeV9pdGVtX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSApIApDUkVBVEUgSU5ERVggSV9MaW5rMzggT04gTGluayAodGFpbF9pZCkgIApDUkVBVEUgSU5ERVggSV9MaW5rMzkgT04gTGluayAoaGVhZF9pZCkgIApDUkVBVEUgVEFCTEUgU2VjdXJpdHlQb2xpY3kob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmdyYXBoaWMoNjQpICwgZGVzY3JpcHRpb24gdmFyZ3JhcGhpYygyNTUpICwgcHJlc2VydmVfZGlyZWN0X3Blcm1pc3Npb25zIHNtYWxsaW50IE5PVCBOVUxMICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICkgCkNSRUFURSBUQUJMRSBTZWN1cml0eVRlbXBsYXRlKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZGlzcGxheV9uYW1lIHZhcmdyYXBoaWMoNjQpICwgaXNfZW5hYmxlZCBzbWFsbGludCBOT1QgTlVMTCAsIGFwcGx5X3N0YXRlX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCApIApDUkVBVEUgVU5JUVVFIElOREVYIElfU2VjdXJpdHlUZW1wbGF0ZTQ1IE9OIFNlY3VyaXR5VGVtcGxhdGUgKHBhcmVudF9pZCwgYXBwbHlfc3RhdGVfaWQpICAKQ1JFQVRFIFRBQkxFIEV2ZW50KG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIHNvdXJjZV9vYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgc291cmNlX29iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBzdGF0dXMgaW50ZWdlciAsIHNlcmlhbGl6ZWRfc291cmNlX29iamVjdCBibG9iKDFHKSAsIHF1ZXJ5X3RleHQgZGJjbG9iKDUxMk0pICwgdmVyc2lvbl9zZXJpZXNfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgbGlmZWN5Y2xlX2NoYW5nZSBpbnRlZ2VyICwgZWxlbWVudF9uYW1lIHZhcmdyYXBoaWMoMjU1KSAsIGF1ZGl0X2xldmVsIGludGVnZXIgLCBpbml0aWF0aW5nX3VzZXIgdmFyZ3JhcGhpYygyNTUpICwgc2VxdWVuY2VfbnVtYmVyIGludGVnZXIgLCBzZXJpYWxpemVkX29yaWdfb2JqZWN0IGJsb2IoMUcpICwgYXVkaXRfc2VxdWVuY2UgYmlnaW50ICwgc291cmNlX3N0b3JhZ2VfYXJlYV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCB0YXJnZXRfc3RvcmFnZV9hcmVhX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHJlY292ZXJ5X2l0ZW1faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgc291cmNlX3JldGFpbmVkIHNtYWxsaW50ICkgCkNSRUFURSBJTkRFWCBJX0V2ZW50NDggT04gRXZlbnQgKHNvdXJjZV9vYmplY3RfaWQsIGNyZWF0ZV9kYXRlIERFU0MpICAKQ1JFQVRFIElOREVYIElfRXZlbnQ4MyBPTiBFdmVudCAoYXVkaXRfc2VxdWVuY2UpICAKQ1JFQVRFIFRBQkxFIEF1ZGl0RGVmaW5pdGlvbihvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGV2ZW50X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGF1ZGl0X3N1Y2Nlc3Mgc21hbGxpbnQgTk9UIE5VTEwgLCBhdWRpdF9mYWlsdXJlIHNtYWxsaW50IE5PVCBOVUxMICwgaW5jbHVkZV9zdWJjbGFzc2VzIHNtYWxsaW50IE5PVCBOVUxMICwgcmVjb3JkaW5nX2xldmVsIGludGVnZXIgLCBmaWx0ZXJfZXhwcmVzc2lvbiBkYmNsb2IoNTEyTSkgLCBmaWx0ZXJlZF9wcm9wZXJ0eV9uYW1lIHZhcmdyYXBoaWMoNjQpICwgZGlzcGxheV9uYW1lIHZhcmdyYXBoaWMoNjQpICwgZW5hYmxlZF9ib29sIHNtYWxsaW50ICkgCkNSRUFURSBJTkRFWCBJX0F1ZGl0RGVmaW5pdGlvbjQ3IE9OIEF1ZGl0RGVmaW5pdGlvbiAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgVEFCTEUgU3Vic2NyaWJlZEV2ZW50KG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZXZlbnRfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICkgCkNSRUFURSBJTkRFWCBJX1N1YnNjcmliZWRFdmVudDUwIE9OIFN1YnNjcmliZWRFdmVudCAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgSU5ERVggSV9TdWJzY3JpYmVkRXZlbnQ1MSBPTiBTdWJzY3JpYmVkRXZlbnQgKGV2ZW50X2NsYXNzX2lkKSAgQ0xVU1RFUiAgCkNSRUFURSBUQUJMRSBJbmRleEFyZWEob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmdyYXBoaWMoNjQpIE5PVCBOVUxMICwgZGVzY3JpcHRpb24gdmFyZ3JhcGhpYygyNTUpICwgYXJlYV9zdGF0dXMgaW50ZWdlciBOT1QgTlVMTCAsIHNpdGVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgdGVtcGxhdGVfdHlwZSB2YXJncmFwaGljKDEyOCkgLCByb290X2RpcmVjdG9yeV9wYXRoIHZhcmdyYXBoaWMoMjU1KSAsIHNlYXJjaF9zZXJ2ZXJzX3RvX2F0dGFjaCBpbnRlZ2VyICwgbWF4X2NvbGxlY3Rpb25zIGludGVnZXIgLCB0ZW1wX2RpcmVjdG9yeV9wYXRoIHZhcmdyYXBoaWMoMjU1KSAsIG1heF9vYmplY3RzX3Blcl9pbmRleCBkb3VibGUgLCBtYXhfc2l6ZV9wZXJfaW5kZXhfa2IgZG91YmxlICwgc3RhbmRieV9hY3RpdmF0aW9uX3ByaW9yaXR5IGludGVnZXIgLCBhZmZpbml0eV9ncm91cF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgKSAKQ1JFQVRFIFRBQkxFIEluZGV4UmVxdWVzdHModGFyZ2V0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHRhcmdldF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBvcGVyYXRpb24gaW50ZWdlciBOT1QgTlVMTCAsIGluZGV4YXRpb25faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgc3RhdHVzIGludGVnZXIgTk9UIE5VTEwgLCByZXF1ZXN0X3RpbWUgdGltZXN0YW1wIE5PVCBOVUxMICwgc2VxbnVtX2lkZW50aXR5IGJpZ2ludCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCByZXRyeV9jb3VudCBpbnRlZ2VyIE5PVCBOVUxMICwgZWxlbWVudF9zZXF1ZW5jZV9udW1iZXIgaW50ZWdlciAsIHJldHJpZXZhbF9uYW1lX2V4dCB2YXJncmFwaGljKDY0KSAsIGluZGV4X2pvYl9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBpbmRleF9hcmVhX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZXBvY2hfaWQgaW50ZWdlciAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgbGFzdF9mYWlsdXJlX3JlYXNvbiBkYmNsb2IoNTEyTSkgLCBpbmRleGluZ19mYWlsdXJlX2NvZGUgaW50ZWdlciAsIHJlbW92YWxfaW5kZXhhdGlvbl9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgKSAKQ1JFQVRFIElOREVYIElfSW5kZXhSZXF1ZXN0czU5IE9OIEluZGV4UmVxdWVzdHMgKHRhcmdldF9pZCkgIApDUkVBVEUgSU5ERVggSV9JbmRleFJlcXVlc3RzODQgT04gSW5kZXhSZXF1ZXN0cyAob2JqZWN0X2lkKSAgCkNSRUFURSBJTkRFWCBJX0luZGV4UmVxdWVzdHM4NSBPTiBJbmRleFJlcXVlc3RzIChpbmRleF9qb2JfaWQpICAKQ1JFQVRFIElOREVYIElfSW5kZXhSZXF1ZXN0czk0IE9OIEluZGV4UmVxdWVzdHMgKGluZGV4X2FyZWFfaWQsIGluZGV4YXRpb25faWQsIHRhcmdldF9pZCwgc2VxbnVtX2lkZW50aXR5KSAgCkFMVEVSIFRBQkxFIEluZGV4UmVxdWVzdHMgVk9MQVRJTEUgQ0FSRElOQUxJVFkKQ1JFQVRFIFRBQkxFIENvbXBvbmVudFJlbGF0aW9uKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgTk9UIE5VTEwgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSBOT1QgTlVMTCAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCBOT1QgTlVMTCAsIGNoaWxkX2NvbXBvbmVudF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBjaGlsZF92ZXJzaW9uX3Nlcmllc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBwYXJlbnRfY29tcG9uZW50X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGNvcHlfdG9fcmVzZXJ2YXRpb24gc21hbGxpbnQgTk9UIE5VTEwgLCBuYW1lIHZhcmdyYXBoaWMoMjU1KSAsIGxhYmVsX2JpbmRfdmFsdWUgdmFyZ3JhcGhpYyg2NCkgLCBjb21wb25lbnRfcmVsYXRpb25zaGlwX3R5cGUgaW50ZWdlciBOT1QgTlVMTCAsIHVyaV92YWx1ZSB2YXJncmFwaGljKDIwODMpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY29tcG9uZW50X3NvcnRfb3JkZXIgaW50ZWdlciBOT1QgTlVMTCAsIHZlcnNpb25fYmluZF90eXBlIGludGVnZXIgLCBjYXNjYWRlX2RlbGV0ZSBpbnRlZ2VyIE5PVCBOVUxMICwgcHJldmVudF9kZWxldGUgaW50ZWdlciBOT1QgTlVMTCAsIGNoaWxkX2NvbXBvbmVudF9pZF9ob21lIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNoaWxkX3ZlcnNpb25fc2VyaWVzX2lkX2hvbWUgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICkgCkNSRUFURSBJTkRFWCBJX0NvbXBvbmVudFJlbGF0aW9uNjkgT04gQ29tcG9uZW50UmVsYXRpb24gKGNoaWxkX3ZlcnNpb25fc2VyaWVzX2lkKSAgCkNSRUFURSBJTkRFWCBJX0NvbXBvbmVudFJlbGF0aW9uNzAgT04gQ29tcG9uZW50UmVsYXRpb24gKGNoaWxkX2NvbXBvbmVudF9pZCkgIApDUkVBVEUgSU5ERVggSV9Db21wb25lbnRSZWxhdGlvbjcxIE9OIENvbXBvbmVudFJlbGF0aW9uIChwYXJlbnRfY29tcG9uZW50X2lkKSAgCkNSRUFURSBVTklRVUUgSU5ERVggSV9Db21wb25lbnRSZWxhdGlvbjcyIE9OIENvbXBvbmVudFJlbGF0aW9uIChjb21wb25lbnRfc29ydF9vcmRlciwgb2JqZWN0X2lkKSAgCkNSRUFURSBUQUJMRSBQdWJsaXNoUmVxdWVzdChvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgaG9tZV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBjcmVhdG9yIHZhcmdyYXBoaWMoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyZ3JhcGhpYyg4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBwdWJsaXNoaW5nX3N0YXR1cyBpbnRlZ2VyIE5PVCBOVUxMICwgc3RhdHVzX2Rlc2NyaXB0aW9uIHZhcmdyYXBoaWMoMjU1KSAsIGlucHV0X2RvY3VtZW50IHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIG91dHB1dF9mb2xkZXIgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcHVibGlzaF9yZXF1ZXN0X3R5cGUgaW50ZWdlciAsIHB1Ymxpc2hfdGVtcGxhdGUgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcHVibGljYXRpb25fZG9jdW1lbnQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgcHVibGlzaF9zdHlsZV90ZW1wbGF0ZSB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBhcHBseV9kZWZpbml0aW9uIGRiY2xvYig1MTJNKSAsIGluaXRpYXRpbmdfdXNlciB2YXJncmFwaGljKDI1NSkgLCBlcnJvcl9jb2RlIHZhcmdyYXBoaWMoMjU1KSAsIGVycm9yX2Rlc2NyaXB0aW9uIHZhcmdyYXBoaWMoMjU1KSAsIHJldHJ5X2NvdW50IGludGVnZXIgTk9UIE5VTEwgLCBuZXh0X3JldHJ5X2RhdGUgdGltZXN0YW1wICwgZGVxdWV1ZV9ob3N0IHZhcmdyYXBoaWMoMTUpICwgbGVhc2VfZXhwaXJ5X2RhdGUgdGltZXN0YW1wICkgCkNSRUFURSBJTkRFWCBJX1B1Ymxpc2hSZXF1ZXN0NjAgT04gUHVibGlzaFJlcXVlc3QgKG5leHRfcmV0cnlfZGF0ZSkgIApBTFRFUiBUQUJMRSBQdWJsaXNoUmVxdWVzdCBWT0xBVElMRSBDQVJESU5BTElUWQpDUkVBVEUgVEFCTEUgSGllcmFyY2h5SW5kZXgocGFyZW50X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGNoaWxkX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCApIApDUkVBVEUgSU5ERVggSV9IaWVyYXJjaHlJbmRleDYxIE9OIEhpZXJhcmNoeUluZGV4IChwYXJlbnRfaWQsIGNoaWxkX2lkKSAgQ0xVU1RFUiAgCkNSRUFURSBJTkRFWCBJX0hpZXJhcmNoeUluZGV4NjIgT04gSGllcmFyY2h5SW5kZXggKGNoaWxkX2lkKSAgCkNSRUFURSBUQUJMRSBJbmRleEpvYihvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBjcmVhdG9yIHZhcmdyYXBoaWMoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyZ3JhcGhpYyg4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBkZXNjcmlwdGlvbiB2YXJncmFwaGljKDI1NSkgLCB0aW1lX2xhc3RfcHJvY2Vzc2VkIHRpbWVzdGFtcCAsIHRpbWVfYWxsX3N1Ym1pdHRlZCB0aW1lc3RhbXAgLCBqb2Jfc3RhdHVzIGludGVnZXIgTk9UIE5VTEwgLCBqb2JfYWJvcnRfcmVxdWVzdGVkIHNtYWxsaW50IE5PVCBOVUxMICwgc3VibWl0dGVkX2NvdW50IGludGVnZXIgLCBwaGFzZV9udW0gaW50ZWdlciAsIGl0ZW1fbnVtIGludGVnZXIgLCBwcmlvcl9vYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgbGFzdF9tYXhfc2VxX251bSBiaWdpbnQgLCBhY3RpdmVfc2VydmVyIHZhcmdyYXBoaWMoMTI4KSAsIHNlcmlhbGl6ZWRfZGF0YSBibG9iKDFHKSAsIGpvYl9wYXVzZV9yZXF1ZXN0ZWQgc21hbGxpbnQgLCBpc19taWdyYXRpb25fam9iIHNtYWxsaW50ICwgbGFzdF9mYWlsdXJlX2Rlc2MgZGJjbG9iKDUxMk0pICwgbWF4X3JlcXVlc3RfcXVldWVfc2l6ZSBpbnRlZ2VyICkgCkNSRUFURSBUQUJMRSBJbmRleEpvYkl0ZW0ob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBpbmRleGF0aW9uX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGluZGV4X2FyZWFfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY2xhc3NfZGVmaW5pdGlvbl9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBzaW5nbGVfaXRlbV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBzaW5nbGVfaXRlbV9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBpbmNsdWRlX3N1YmNsYXNzZXMgc21hbGxpbnQgLCByZXN5bmNfbW9kaWZpY2F0aW9uX2RhdGUgdGltZXN0YW1wICkgCkNSRUFURSBUQUJMRSBDb250ZW50UXVldWUob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlcW51bV9pZGVudGl0eSBiaWdpbnQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGxlYXNlX2V4cGlyeV9kYXRlIHRpbWVzdGFtcCBOT1QgTlVMTCAsIHNlc3Npb25faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZWxlbWVudF9zZXF1ZW5jZV9udW1iZXIgaW50ZWdlciBOT1QgTlVMTCAsIGNvbW1hbmRfdHlwZSBpbnRlZ2VyIE5PVCBOVUxMICwgcHJvY2Vzc19hdHRlbXB0cyBpbnRlZ2VyICwgc291cmNlX29iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBzdG9yYWdlX2FyZWFfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgY29udGVudF9zaXplIGRvdWJsZSBOT1QgTlVMTCAsIHNlcmlhbGl6ZWRfZGF0YSBibG9iKDFHKSBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCBOT1QgTlVMTCApIApDUkVBVEUgSU5ERVggSV9Db250ZW50UXVldWU2MyBPTiBDb250ZW50UXVldWUgKHNlc3Npb25faWQpICAKQ1JFQVRFIElOREVYIElfQ29udGVudFF1ZXVlNjQgT04gQ29udGVudFF1ZXVlIChvYmplY3RfaWQpICAKQ1JFQVRFIElOREVYIElfQ29udGVudFF1ZXVlNjUgT04gQ29udGVudFF1ZXVlIChsZWFzZV9leHBpcnlfZGF0ZSkgIApBTFRFUiBUQUJMRSBDb250ZW50UXVldWUgVk9MQVRJTEUgQ0FSRElOQUxJVFkKQ1JFQVRFIFRBQkxFIENvbnRlbnRVcGxvYWQoZWxlbWVudF9pZCB2YXJncmFwaGljKDQ4KSBOT1QgTlVMTCAsIG9mZnNldCBpbnRlZ2VyIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgY29udGVudCBibG9iKDFHKSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfQ29udGVudFVwbG9hZDY2IE9OIENvbnRlbnRVcGxvYWQgKGVsZW1lbnRfaWQsIG9mZnNldCkgIApDUkVBVEUgVEFCTEUgRXh0ZXJuYWxJZGVudGl0eShvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHJlcG9zaXRvcnlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXh0ZXJuYWxfaWQgdmFyZ3JhcGhpYygyNTYpIE5PVCBOVUxMICwgcmVwbGljYXRpb25fZGF0YSBibG9iKDFHKSApIApDUkVBVEUgSU5ERVggSV9FeHRlcm5hbElkZW50aXR5NzUgT04gRXh0ZXJuYWxJZGVudGl0eSAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgVU5JUVVFIElOREVYIElfRXh0ZXJuYWxJZGVudGl0eTc2IE9OIEV4dGVybmFsSWRlbnRpdHkgKGV4dGVybmFsX2lkLCByZXBvc2l0b3J5X2lkKSAgCkNSRUFURSBUQUJMRSBSZXBsaWNhdGlvblF1ZXVlKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIHNvdXJjZV9vYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgc291cmNlX29iamVjdF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBkZXN0aW5hdGlvbl9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBkZXN0aW5hdGlvbl9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBvcGVyYXRpb24gaW50ZWdlciAsIHNlcmlhbGl6ZWRfZGF0YSBibG9iKDFHKSAsIHNlcW51bV9pZGVudGl0eSBiaWdpbnQgTk9UIE5VTEwgLCBoZWxkX3VudGlsX2RhdGUgdGltZXN0YW1wICwgcmV0cnlfY291bnQgaW50ZWdlciAsIGxlYXNlX2hvbGRlcl9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBsZWFzZV9jb3VudCBpbnRlZ2VyICwgc3RhdHVzIGludGVnZXIgLCBsYXN0X2ZhaWx1cmVfZGVzYyBkYmNsb2IoNTEyTSkgLCBleGNsdXNpb25faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9SZXBsaWNhdGlvblF1ZXVlNzcgT04gUmVwbGljYXRpb25RdWV1ZSAoc2VxbnVtX2lkZW50aXR5KSAgQ0xVU1RFUiAgCkFMVEVSIFRBQkxFIFJlcGxpY2F0aW9uUXVldWUgVk9MQVRJTEUgQ0FSRElOQUxJVFkKQ1JFQVRFIFRBQkxFIEV4dGVybmFsQWxpYXMob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBleHRlcm5hbF9yZXBvX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGFsaWFzX2RpcmVjdGlvbiBpbnRlZ2VyIE5PVCBOVUxMICwgY2xhc3NfaWRlbnRpdHkgdmFyZ3JhcGhpYygxMjgpIE5PVCBOVUxMICwgcHJvcGVydHlfaWRlbnRpdHkgdmFyZ3JhcGhpYygxMjgpICkgCkNSRUFURSBJTkRFWCBJX0V4dGVybmFsQWxpYXM3OCBPTiBFeHRlcm5hbEFsaWFzIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgCkNSRUFURSBUQUJMRSBUYXNrKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHN0YXRlIGludGVnZXIgLCBjb29yZGluYXRvcl9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBjb29yZGluYXRvcl9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBzdGFydF9kYXRlIHRpbWVzdGFtcCAsIGNvbXBsZXRlX2RhdGUgdGltZXN0YW1wICwgbGFzdF9mYWlsdXJlX2Rlc2MgZGJjbG9iKDUxMk0pICwgcmVjb3ZlcnlfaXRlbV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgKSAKQ1JFQVRFIElOREVYIElfVGFzazgwIE9OIFRhc2sgKGNvb3JkaW5hdG9yX2lkKSAgCkNSRUFURSBUQUJMRSBUYXNrUmVsYXRpb25zaGlwKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHByZWRlY2Vzc29yX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHN1Y2Nlc3Nvcl9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBkZWZpbmVzX2FsdF9wcmVkZWNlc3NvciBzbWFsbGludCAsIHJlY292ZXJ5X2l0ZW1faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9UYXNrUmVsYXRpb25zaGlwODEgT04gVGFza1JlbGF0aW9uc2hpcCAocHJlZGVjZXNzb3JfaWQsIHN1Y2Nlc3Nvcl9pZCkgIApDUkVBVEUgSU5ERVggSV9UYXNrUmVsYXRpb25zaGlwODIgT04gVGFza1JlbGF0aW9uc2hpcCAoc3VjY2Vzc29yX2lkKSAgCkNSRUFURSBUQUJMRSBUZXh0SW5kZXgob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBpbmRleF9uYW1lIHZhcmdyYXBoaWMoNDAwMCkgTk9UIE5VTEwgLCBzdGF0dXMgaW50ZWdlciBOT1QgTlVMTCAsIGN1cnJlbnRfaW5kZXhfc2VydmVyIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGxlYXNlX2V4cGlyeV90aW1lIHRpbWVzdGFtcCAsIGluZGV4X29iamVjdF9jb3VudCBkb3VibGUgLCBpbmRleF9zaXplX2tiIGRvdWJsZSAsIGluZGV4aW5nX3N0YXR1cyBpbnRlZ2VyICwgcmVjZW50X29wc19zdWJtaXR0ZWQgaW50ZWdlciAsIHJlY2VudF9vcHNfZHVyYXRpb24gZG91YmxlICkgCkNSRUFURSBUQUJMRSBBdWRpdFBvbGljeShvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZGlzcGxheV9uYW1lIHZhcmdyYXBoaWMoNjQpIE5PVCBOVUxMICwgaG9tZV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBkaXNwb3NpdGlvbl9ydWxlIHZhcmdyYXBoaWMoMjU1KSAsIGVuYWJsZWRfYm9vbCBzbWFsbGludCBOT1QgTlVMTCAsIGNvbXBsZXRpb25fd2FpdF9pbnRlcnZhbCBpbnRlZ2VyICkgCkNSRUFURSBUQUJMRSBBdWRpdFByb2Nlc3Npbmcob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJncmFwaGljKDY0KSBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgbGFzdF9wcm9jZXNzZWQgZG91YmxlIE5PVCBOVUxMICkgCkNSRUFURSBUQUJMRSBUZXh0SW5kZXhQYXJ0aXRpb24ob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBwYXJ0aXRpb25fcHJvcF9uYW1lIHZhcmdyYXBoaWMoNDAwMCkgTk9UIE5VTEwgLCBkYXRhdHlwZSBpbnRlZ2VyIE5PVCBOVUxMICwgcGFydGl0aW9uX3N0YXJ0X2RhdGUgdGltZXN0YW1wICwgcGFydGl0aW9uX2VuZF9kYXRlIHRpbWVzdGFtcCAsIHBhcnRpdGlvbl9zdHJpbmdfdmFsIHZhcmdyYXBoaWMoNDAwMCkgKSAKQ1JFQVRFIFRBQkxFIFByZXByb2Nlc3NvckRlZmluaXRpb24ob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBkaXNwbGF5X25hbWUgdmFyZ3JhcGhpYyg2NCkgTk9UIE5VTEwgLCBlbmFibGVkX2Jvb2wgc21hbGxpbnQgTk9UIE5VTEwgLCBhY3Rpb25faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICkgCkNSRUFURSBUQUJMRSBTY2ZEYXRhKHNjZl9pZCBpbnRlZ2VyIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIGJpbmFyeV9kYXRhIHZhcmNoYXIoNTEyKSBmb3IgYml0IGRhdGEgKSAKQ1JFQVRFIFRBQkxFIEhvbGRPYmplY3Qob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmdyYXBoaWMoNjQpICwgZGVzY3JpcHRpb24gdmFyZ3JhcGhpYygyNTUpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICkgCkNSRUFURSBUQUJMRSBIb2xkUmVsYXRpb25zaGlwKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGhvbGRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgaGVsZF9vYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgaGVsZF9vYmplY3RfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9Ib2xkUmVsYXRpb25zaGlwODYgT04gSG9sZFJlbGF0aW9uc2hpcCAoaGVsZF9vYmplY3RfaWQsIGhvbGRfaWQpICAKQ1JFQVRFIFRBQkxFIFN3ZWVwKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJncmFwaGljKDY0KSAsIGRlc2NyaXB0aW9uIHZhcmdyYXBoaWMoMjU1KSAsIGxhc3Rfb2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGhlbGRfdW50aWxfZGF0ZSB0aW1lc3RhbXAgLCBzdGFydF9kYXRlIHRpbWVzdGFtcCAsIGVuZF9kYXRlIHRpbWVzdGFtcCAsIG5leHRfc3RhcnRfdGltZSB0aW1lc3RhbXAgLCBtYXhpbXVtX3dvcmtlcnMgaW50ZWdlciAsIGludGVyX3N3ZWVwX2RlbGF5IGludGVnZXIgLCBvYmplY3RzX2V4YW1pbmVkIGRvdWJsZSAsIG9iamVjdHNfcHJvY2Vzc2VkIGRvdWJsZSAsIG9iamVjdHNfZmFpbGVkIGRvdWJsZSAsIGlzX2VuYWJsZWQgc21hbGxpbnQgLCBtYXhpbXVtX2ZhaWx1cmVzIGludGVnZXIgLCBlZmZlY3RpdmVfYmVnaW5fZGF0ZSB0aW1lc3RhbXAgLCBlZmZlY3RpdmVfZW5kX2RhdGUgdGltZXN0YW1wICwgc3RvcmFnZV9wb2xpY3lfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgc3dlZXBfdGFyZ2V0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGluY2x1ZGVfc3ViY2xhc3NlcyBzbWFsbGludCAsIGZpbHRlcl9leHByZXNzaW9uIGRiY2xvYig1MTJNKSAsIGxlYXNlX2hvbGRlcl9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBpbWFnZV9mb3JtYXQgaW50ZWdlciAsIGltYWdlX3NpemUgaW50ZWdlciAsIGltYWdlX2NvbG9yIGludGVnZXIgLCByZXRyeV93YWl0X2ludGVydmFsIGludGVnZXIgLCBiYXRjaF9zaXplIGludGVnZXIgLCBzd2VlcF9hY3Rpb25faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3VycmVudF9vYmplY3RzX2V4YW1pbmVkIGRvdWJsZSAsIGN1cnJlbnRfb2JqZWN0c19wcm9jZXNzZWQgZG91YmxlICwgY3VycmVudF9vYmplY3RzX2ZhaWxlZCBkb3VibGUgLCByZXRlbnRpb25fZHVyYXRpb24gaW50ZWdlciAsIHJldGVudGlvbl91cGRhdGVfdGltZV91bml0IGludGVnZXIgLCBzcGVjaWZpY19kYXRlIHRpbWVzdGFtcCAsIGJhc2VfZGF0ZV9wcm9wZXJ0eV9uYW1lIHZhcmdyYXBoaWMoNjQpICwgY29tcGxldGVkX2l0ZXJhdGlvbnMgaW50ZWdlciAsIHJlY29yZF9mYWlsdXJlcyBzbWFsbGludCAsIGVuZF9yZXBsaWNhdGlvbl9hZnRlcl9tb3ZlIHNtYWxsaW50ICwgaW50ZXJfYmF0Y2hfZGVsYXkgaW50ZWdlciAsIHN3ZWVwX21vZGUgaW50ZWdlciAsIHF1ZXJ5X3RpbWVvdXQgaW50ZWdlciAsIGVmZmVjdGl2ZV9zcWwgZGJjbG9iKDUxMk0pICwgbGFzdF9mYWlsdXJlX3JlYXNvbiBkYmNsb2IoNTEyTSkgLCBmYWlsdXJlX2NvdW50IGludGVnZXIgLCBzZWFyY2hfY29udGludWF0aW9uX2Nvb2tpZSBkYmNsb2IoNTEyTSkgLCBzZWFyY2hfb2JqZWN0X3N0b3JlX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIG1heGltdW1fcm93X2NvdW50IGludGVnZXIgLCBjdXJyZW50X29iamVjdHNfZGVmZXJyZWQgZG91YmxlICwgb2JqZWN0c19kZWZlcnJlZCBkb3VibGUgLCBjb3B5X3JldGFpbmVkIHNtYWxsaW50ICwgdXBkYXRlX3N0b3JhZ2VfcG9saWN5IHNtYWxsaW50ICkgCkNSRUFURSBUQUJMRSBTd2VlcFJlbGF0aW9uc2hpcChvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBjcmVhdG9yIHZhcmdyYXBoaWMoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyZ3JhcGhpYyg4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBwb2xpY3lfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgcG9saWN5X2lkX2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHN3ZWVwX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCApIApDUkVBVEUgVU5JUVVFIElOREVYIElfU3dlZXBSZWxhdGlvbnNoaXA4NyBPTiBTd2VlcFJlbGF0aW9uc2hpcCAocG9saWN5X2lkLCBzd2VlcF9pZCkgIApDUkVBVEUgVEFCTEUgU3dlZXBQb2xpY3kob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmdyYXBoaWMoNjQpICwgZGVzY3JpcHRpb24gdmFyZ3JhcGhpYygyNTUpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgaXNfZW5hYmxlZCBzbWFsbGludCAsIGluY2x1ZGVfc3ViY2xhc3NlcyBzbWFsbGludCAsIGVmZmVjdGl2ZV9iZWdpbl9kYXRlIHRpbWVzdGFtcCAsIGVmZmVjdGl2ZV9lbmRfZGF0ZSB0aW1lc3RhbXAgLCBzdG9yYWdlX3BvbGljeV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBmaWx0ZXJfZXhwcmVzc2lvbiBkYmNsb2IoNTEyTSkgLCByZXRlbnRpb25fZHVyYXRpb24gaW50ZWdlciAsIHN3ZWVwX3RhcmdldF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBzcGVjaWZpY19kYXRlIHRpbWVzdGFtcCAsIGJhc2VfZGF0ZV9wcm9wZXJ0eV9uYW1lIHZhcmdyYXBoaWMoNjQpICwgcmV0ZW50aW9uX3VwZGF0ZV90aW1lX3VuaXQgaW50ZWdlciAsIG9iamVjdHNfZXhhbWluZWQgZG91YmxlICwgb2JqZWN0c19wcm9jZXNzZWQgZG91YmxlICwgc3dlZXBfYWN0aW9uX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIG9iamVjdHNfZmFpbGVkIGRvdWJsZSAsIGN1cnJlbnRfb2JqZWN0c19leGFtaW5lZCBkb3VibGUgLCBjdXJyZW50X29iamVjdHNfcHJvY2Vzc2VkIGRvdWJsZSAsIGN1cnJlbnRfb2JqZWN0c19mYWlsZWQgZG91YmxlICwgY29tcGxldGVkX2l0ZXJhdGlvbnMgaW50ZWdlciAsIGZhaWxfcmVjb3JkX2l0ZXJhdGlvbl9rZWVwIGludGVnZXIgLCBlbmRfcmVwbGljYXRpb25fYWZ0ZXJfbW92ZSBzbWFsbGludCAsIHN3ZWVwX21vZGUgaW50ZWdlciAsIHVwZGF0ZV9zdG9yYWdlX3BvbGljeSBzbWFsbGludCAsIGF1dGhvcml6YXRpb25fbW9kZSBpbnRlZ2VyICkgCkNSRUFURSBUQUJMRSBUaHVtYm5haWwob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgaW5wdXRfZG9jdW1lbnQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZWxlbWVudF9zZXF1ZW5jZV9udW1iZXIgaW50ZWdlciAsIGltYWdlIGJsb2IoMUcpICwgaW1hZ2Vfc2l6ZSBpbnRlZ2VyICwgbWltZV90eXBlIHZhcmdyYXBoaWMoOTYpICwgaXNfc3lzdGVtX2dlbmVyYXRlZCBzbWFsbGludCAsIHJlY292ZXJ5X2l0ZW1faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9UaHVtYm5haWw4OCBPTiBUaHVtYm5haWwgKGlucHV0X2RvY3VtZW50LCBlbGVtZW50X3NlcXVlbmNlX251bWJlcikgIApBTFRFUiBUQUJMRSBUaHVtYm5haWwgQUxURVIgaW1hZ2UgU0VUIElOTElORSBMRU5HVEggMTYzODgKQ1JFQVRFIFRBQkxFIFRodW1ibmFpbFJlcXVlc3Qob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgaGVsZF91bnRpbF9kYXRlIHRpbWVzdGFtcCAsIGxlYXNlX2hvbGRlcl9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBmYWlsdXJlX2NvdW50IGludGVnZXIgLCBsYXN0X2ZhaWx1cmVfcmVhc29uIGRiY2xvYig1MTJNKSAsIGVudHJ5X3N0YXR1cyBpbnRlZ2VyICwgZGVmZXJyYWxfY291bnQgaW50ZWdlciAsIGRlZmVycmFsX2RhdGEgYmxvYigxRykgLCBpbnB1dF9kb2N1bWVudCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBlbGVtZW50X3NlcXVlbmNlX251bWJlciBpbnRlZ2VyICkgCkNSRUFURSBJTkRFWCBJX1RodW1ibmFpbFJlcXVlc3Q5MyBPTiBUaHVtYm5haWxSZXF1ZXN0IChsZWFzZV9ob2xkZXJfaWQpICAKQUxURVIgVEFCTEUgVGh1bWJuYWlsUmVxdWVzdCBWT0xBVElMRSBDQVJESU5BTElUWQpDUkVBVEUgVEFCTEUgUmVjb3ZlcnlCaW4ob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJncmFwaGljKDY0KSBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICkgCkNSRUFURSBUQUJMRSBSZWNvdmVyeUl0ZW0ob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgcmVjb3ZlcnlfYmluX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGRlbGV0ZWRfb2JqZWN0X2Jsb2IgYmxvYigxRykgLCBjbGVhbnVwX2NvbW1hbmRzIGJsb2IoMUcpICwgcmVjb3ZlcmFibGVfY291bnQgaW50ZWdlciAsIG9yaWdpbmFsX29iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBvcmlnaW5hbF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBvcmlnaW5hbF9uYW1lIHZhcmdyYXBoaWMoMjU1KSAsIG9yaWdpbmFsX2NyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBvcmlnaW5hbF9jcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBvcmlnaW5hbF9tb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG9yaWdpbmFsX21vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIG9yaWdpbmFsX29iamVjdF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgKSAKQ1JFQVRFIElOREVYIElfUmVjb3ZlcnlJdGVtODkgT04gUmVjb3ZlcnlJdGVtIChyZWNvdmVyeV9iaW5faWQpICAKQ1JFQVRFIFRBQkxFIFRpbWVzbG90KG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgc2xvdF93ZWVrZGF5IGludGVnZXIgLCBzdGFydF9taW5zX3Bhc3RfbWlkbmlnaHQgaW50ZWdlciAsIHNsb3RfZHVyYXRpb24gaW50ZWdlciApIApDUkVBVEUgSU5ERVggSV9UaW1lc2xvdDkwIE9OIFRpbWVzbG90IChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgCkNSRUFURSBUQUJMRSBTd2VlcFJlc3VsdChvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBjcmVhdG9yIHZhcmdyYXBoaWMoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyZ3JhcGhpYyg4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBzb3VyY2Vfb2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHNvdXJjZV9vYmplY3RfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY29udHJvbGxpbmdfb2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNvbnRyb2xsaW5nX29iamVjdF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBmYWlsdXJlX2Rlc2NyaXB0aW9uIHZhcmdyYXBoaWMoMTAyNCkgLCBpdGVyYXRpb25fbnVtYmVyIGludGVnZXIgLCBzd2VlcF9yZXN1bHRfdHlwZSBpbnRlZ2VyICkgCkNSRUFURSBUQUJMRSBBZGRPblJlY29yZChvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGluc3RhbGxlciB2YXJncmFwaGljKDgwKSAsIGluc3RhbGxfZGF0ZSB0aW1lc3RhbXAgLCBpbnN0YWxsX3N0YXR1cyBpbnRlZ2VyICwgaW5zdGFsbF9yZXBvcnQgZGJjbG9iKDUxMk0pICwgYWRkb25faWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICkgCkNSRUFURSBUQUJMRSBJbmRleGVkQ29sdW1uKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgdGFibGVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgY29sdW1uX25hbWUgdmFyZ3JhcGhpYygzMCkgTk9UIE5VTEwgLCBzb3J0X29yZGVyIGludGVnZXIgTk9UIE5VTEwgKSAKQ1JFQVRFIFRBQkxFIEluZGV4RGVmaW5pdGlvbihvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGluZGV4X25hbWUgdmFyZ3JhcGhpYygxMjgpIE5PVCBOVUxMICwgc3lzX293bmVkX2Jvb2wgc21hbGxpbnQgTk9UIE5VTEwgLCBzdG9yYWdlX2xvY2F0aW9uIHZhcmdyYXBoaWMoMTI4KSAsIHVuaXF1ZV9ib29sIHNtYWxsaW50IE5PVCBOVUxMICwgY2FzZV9pbnNlbnNpdGl2ZSBzbWFsbGludCApIApDUkVBVEUgVU5JUVVFIElOREVYIElfSW5kZXhEZWZpbml0aW9uOTYgT04gSW5kZXhEZWZpbml0aW9uIChpbmRleF9uYW1lKSAgCkNSRUFURSBUQUJMRSBTdG9yYWdlRGV2aWNlKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGNyZWF0b3IgdmFyZ3JhcGhpYyg4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJncmFwaGljKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJncmFwaGljKDY0KSBOT1QgTlVMTCAsIGRlc2NyaXB0aW9uIHZhcmdyYXBoaWMoMjU1KSAsIHNpdGVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgcHJvZ19pZF9zdHJpbmcgdmFyZ3JhcGhpYygyNTUpICwgY29kZV9tb2R1bGVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZnNfYWRzX3BhdGggdmFyZ3JhcGhpYygxMjAwKSAsIHRvcF9ub2RlcyBpbnRlZ2VyICwgYm90dG9tX25vZGVzIGludGVnZXIgLCB1c2VybmFtZSB2YXJncmFwaGljKDEyOCkgLCBwYXNzd29yZCB2YXJjaGFyKDEyOCkgZm9yIGJpdCBkYXRhICwgZGV2aWNlX3VybCB2YXJncmFwaGljKDEwMjQpICwgYXV0aGVudGljYXRpb25fdXJsIHZhcmdyYXBoaWMoMTAyNCkgLCBjb250YWluZXJfbmFtZSB2YXJncmFwaGljKDEyOCkgLCBzeW5jX3JlcGxfc3VwcG9ydGVkIHNtYWxsaW50ICwgZGVsZXRlX21ldGhvZF9zdXBwb3J0ZWQgaW50ZWdlciAsIGNlcnRfdmFsaWRhdGlvbiBzbWFsbGludCAsIHJlZ2lvbl9uYW1lIHZhcmdyYXBoaWMoMTI4KSAsIHNlY3VyaXR5X3Rva2VuIGJsb2IoMUcpICkgCkNSRUFURSBUQUJMRSBEZXZpY2VDb25uZWN0aW9uKG9iamVjdF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgZGV2aWNlX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHJlcGxpY2FfdHlwZSBpbnRlZ2VyICkgCkNSRUFURSBJTkRFWCBJX0RldmljZUNvbm5lY3Rpb245NyBPTiBEZXZpY2VDb25uZWN0aW9uIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgCkNSRUFURSBUQUJMRSBTaXRlU2V0dGluZ3Mob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBzaXRlX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIHJlcGxpY2FfdHlwZSBpbnRlZ2VyICkgCkNSRUFURSBJTkRFWCBJX1NpdGVTZXR0aW5nczk4IE9OIFNpdGVTZXR0aW5ncyAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgVEFCTEUgQ29udGVudEJhY2tvdXRRdWV1ZShvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBjcmVhdG9yIHZhcmdyYXBoaWMoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyZ3JhcGhpYyg4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBoZWxkX3VudGlsX2RhdGUgdGltZXN0YW1wICwgbGVhc2VfaG9sZGVyX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGZhaWx1cmVfY291bnQgaW50ZWdlciAsIGxhc3RfZmFpbHVyZV9yZWFzb24gZGJjbG9iKDUxMk0pICwgZW50cnlfc3RhdHVzIGludGVnZXIgLCBkZWZlcnJhbF9jb3VudCBpbnRlZ2VyICwgZGVmZXJyYWxfZGF0YSBibG9iKDFHKSAsIGV4cGlyYXRpb25fdGltZSB0aW1lc3RhbXAgLCBzdG9yYWdlX2FyZWFfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgYmF0Y2hfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgb3BlcmF0aW9uX2RhdGEgYmxvYigxRykgLCByZXBsaWNhX2RhdGEgYmxvYigxRykgKSAKQ1JFQVRFIElOREVYIElfQ29udGVudEJhY2tvdXRRdWV1ZTk5IE9OIENvbnRlbnRCYWNrb3V0UXVldWUgKGxlYXNlX2hvbGRlcl9pZCkgIApBTFRFUiBUQUJMRSBDb250ZW50QmFja291dFF1ZXVlIFZPTEFUSUxFIENBUkRJTkFMSVRZCkNSRUFURSBUQUJMRSBDb250ZW50RGVsZXRpb25RdWV1ZShvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBjcmVhdG9yIHZhcmdyYXBoaWMoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyZ3JhcGhpYyg4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBoZWxkX3VudGlsX2RhdGUgdGltZXN0YW1wICwgbGVhc2VfaG9sZGVyX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGZhaWx1cmVfY291bnQgaW50ZWdlciAsIGxhc3RfZmFpbHVyZV9yZWFzb24gZGJjbG9iKDUxMk0pICwgZW50cnlfc3RhdHVzIGludGVnZXIgLCBkZWZlcnJhbF9jb3VudCBpbnRlZ2VyICwgZGVmZXJyYWxfZGF0YSBibG9iKDFHKSAsIHJlcGxpY2FfZGF0YSBibG9iKDFHKSAsIG9wZXJhdGlvbl9kYXRhIGJsb2IoMUcpICwgc3RvcmFnZV9hcmVhX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSApIApDUkVBVEUgSU5ERVggSV9Db250ZW50RGVsZXRpb25RdWV1ZTEwMCBPTiBDb250ZW50RGVsZXRpb25RdWV1ZSAobGVhc2VfaG9sZGVyX2lkKSAgCkFMVEVSIFRBQkxFIENvbnRlbnREZWxldGlvblF1ZXVlIFZPTEFUSUxFIENBUkRJTkFMSVRZCkNSRUFURSBUQUJMRSBDb250ZW50UmVwbGljYXRpb25RdWV1ZShvYmplY3RfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBjcmVhdG9yIHZhcmdyYXBoaWMoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyZ3JhcGhpYyg4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBoZWxkX3VudGlsX2RhdGUgdGltZXN0YW1wICwgbGVhc2VfaG9sZGVyX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSAsIGZhaWx1cmVfY291bnQgaW50ZWdlciAsIGxhc3RfZmFpbHVyZV9yZWFzb24gZGJjbG9iKDUxMk0pICwgZW50cnlfc3RhdHVzIGludGVnZXIgLCBkZWZlcnJhbF9jb3VudCBpbnRlZ2VyICwgZGVmZXJyYWxfZGF0YSBibG9iKDFHKSAsIGNvbnRlbnRfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgaGFzaF9zZXF1ZW5jZSBkb3VibGUgLCBzdG9yYWdlX2FyZWFfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgcmVwbGljYV9kYXRhIGJsb2IoMUcpICwgY29udGVudF9zaXplIGRvdWJsZSAsIHNpZ25hdHVyZSB2YXJjaGFyKDMyKSBmb3IgYml0IGRhdGEgLCBvcGVyYXRpb25fZGF0YSBibG9iKDFHKSApIApDUkVBVEUgSU5ERVggSV9Db250ZW50UmVwbGljYXRpb25RdWV1ZTEwMSBPTiBDb250ZW50UmVwbGljYXRpb25RdWV1ZSAobGVhc2VfaG9sZGVyX2lkKSAgCkFMVEVSIFRBQkxFIENvbnRlbnRSZXBsaWNhdGlvblF1ZXVlIFZPTEFUSUxFIENBUkRJTkFMSVRZCkNSRUFURSBUQUJMRSBTaWRUb0d1aWQob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBzaWQgdmFyY2hhcig3NTApIGZvciBiaXQgZGF0YSBOT1QgTlVMTCApIApDUkVBVEUgVU5JUVVFIElOREVYIElfU2lkVG9HdWlkMTAzIE9OIFNpZFRvR3VpZCAoc2lkKSAgCkNSRUFURSBUQUJMRSBDb252ZXJzaW9uU2V0dGluZ3Mob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmdyYXBoaWMoNjQpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgcmVjb3ZlcnlfaXRlbV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgKSAKQ1JFQVRFIFRBQkxFIFJvbGVBY2Nlc3NEZWYob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgcGFyZW50X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBhY2Nlc3NfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgYWNjZXNzX21hc2sgaW50ZWdlciApIApDUkVBVEUgSU5ERVggSV9Sb2xlQWNjZXNzRGVmMTA1IE9OIFJvbGVBY2Nlc3NEZWYgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpICAKQ1JFQVRFIFRBQkxFIFJvbGVPYmplY3Qob2JqZWN0X2lkIHZhcmNoYXIoMTYpIGZvciBiaXQgZGF0YSBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgY3JlYXRvciB2YXJncmFwaGljKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmdyYXBoaWMoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmdyYXBoaWMoNjQpIE5PVCBOVUxMICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdmFyY2hhcigxNikgZm9yIGJpdCBkYXRhICwgcmVjb3ZlcnlfaXRlbV9pZCB2YXJjaGFyKDE2KSBmb3IgYml0IGRhdGEgLCBzZXJpYWxpemVkX2RhdGEgYmxvYigxRykgLCBjYWNoZV91c24gYmlnaW50ICwgdXNuX2luZGV4IGludGVnZXIgLCBkZXNjcmlwdGlvbiB2YXJncmFwaGljKDI1NSkgKSAKQ1JFQVRFIElOREVYIElfUm9sZU9iamVjdDEwNiBPTiBSb2xlT2JqZWN0ICh1c25faW5kZXgsIGNhY2hlX3Vzbiwgb2JqZWN0X2lkLCBlcG9jaF9pZCkgIApDUkVBVEUgVEFCTEUgUm9sZUNhY2hlVVNOKHVzbl9pbmRleCBpbnRlZ2VyIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIGNhY2hlX3VzbiBiaWdpbnQgTk9UIE5VTEwgKSAKQ1JFQVRFIFNFUVVFTkNFIENJU2VxdWVuY2UgQVMgQklHSU5UIFNUQVJUIFdJVEggMSBJTkNSRU1FTlQgQlkgMSBOTyBNQVhWQUxVRSBOTyBDWUNMRSBDQUNIRSAxMDAwIE9SREVSIApDUkVBVEUgU0VRVUVOQ0UgQ29udGVudFF1ZXVlU2VxdWVuY2UgQVMgQklHSU5UIFNUQVJUIFdJVEggMSBJTkNSRU1FTlQgQlkgMSBOTyBNQVhWQUxVRSBOTyBDWUNMRSBDQUNIRSAxMDAwIE9SREVSIApDUkVBVEUgU0VRVUVOQ0UgUmVwbFNlcXVlbmNlIEFTIEJJR0lOVCBTVEFSVCBXSVRIIDEgSU5DUkVNRU5UIEJZIDEgTk8gTUFYVkFMVUUgTk8gQ1lDTEUgQ0FDSEUgMTAwMCBPUkRFUiAKQ1JFQVRFIFNFUVVFTkNFIEF1ZGl0U2VxdWVuY2UgQVMgQklHSU5UIFNUQVJUIFdJVEggMSBJTkNSRU1FTlQgQlkgMSBOTyBNQVhWQUxVRSBOTyBDWUNMRSBDQUNIRSAxMDAwIE9SREVSIApDUkVBVEUgU0VRVUVOQ0UgU2NmU2VxdWVuY2UgQVMgSU5UIFNUQVJUIFdJVEggMSBJTkNSRU1FTlQgQlkgMSBOTyBNQVhWQUxVRSBOTyBDWUNMRSBDQUNIRSAxMDAwIE9SREVSIAp3BABBAAd0ABRFeHRlcm5hbFJlcG9zaXRvcmllc3cGAAkHBQIEcQB+AAp1cQB+AAsAAAAQF2/QfVj1QE6dp4KbJyaH83EAfgAqdwQAQQAHdAATRGF0YWJhc2VDb25uZWN0aW9uc3cGAAkHBQIEcQB+AAp1cQB+AAsAAAAQF2/QfVj1QE6dp4KbJyaH83EAfgAsdwQAQQAHdAARQ29udGVudENhY2hlQXJlYXN3BgAJBwUCBHEAfgAKdXEAfgALAAAAEBdv0H1Y9UBOnaeCmycmh/NxAH4ALncEAAEABnQAEUdDRFJldmlzaW9uTnVtYmVydwgAAAk8AAMACHQAEERvY3VtZW50YXRpb25VUkx0ADhodHRwOi8vd3d3LmlibS5jb20vc3VwcG9ydC9rbm93bGVkZ2VjZW50ZXIvU1NOVzJGXzUuNS4wL3cEAAEABXQAAklkdXEAfgALAAAAEBdv0H1Y9UBOnaeCmycmh/N3BADBAAd0ABZQZXJtaXNzaW9uRGVzY3JpcHRpb25zdwYACQcFAgRxAH4ACnVxAH4ACwAAABAXb9B9WPVATp2ngpsnJofzcQB+ADV3BABBAAd0AAxPYmplY3RTdG9yZXN3BgAJBwUCBHEAfgAKdXEAfgALAAAAEBdv0H1Y9UBOnaeCmycmh/NxAH4AN3cEAMMAB3QAF1N1YnN5c3RlbUNvbmZpZ3VyYXRpb25zdwYACQcFAgRxAH4ACnVxAH4ACwAAABAXb9B9WPVATp2ngpsnJofzcQB+ADl3BAADAAh0AA5TeXN0ZW1Vc2VyTmFtZXQABmJ0cDI0N3cEAEEAB3QAD0lzb2xhdGVkUmVnaW9uc3cGAAkHBQIEcQB+AAp1cQB+AAsAAAAQF2/QfVj1QE6dp4KbJyaH83EAfgA9dwQAwwAHdAAXRGlyZWN0b3J5Q29uZmlndXJhdGlvbnN3BgAJBwUCBHEAfgAKdXEAfgALAAAAEBdv0H1Y9UBOnaeCmycmh/NxAH4AP3cEAMMAB3QAC1Blcm1pc3Npb25zdwYACQcFAgRxAH4ACnVxAH4ACwAAABAXb9B9WPVATp2ngpsnJofzcQB+AEF3BABBAAd0ABpSZW5kaXRpb25FbmdpbmVDb25uZWN0aW9uc3cGAAkHBQIEcQB+AAp1cQB+AAsAAAAQF2/QfVj1QE6dp4KbJyaH83EAfgBDdwQAQQAHdAARUmVwbGljYXRpb25Hcm91cHN3BgAJBwUCBHEAfgAKdXEAfgALAAAAEBdv0H1Y9UBOnaeCmycmh/NxAH4ARXcEAEEAB3QAGFRleHRTZWFyY2hBZmZpbml0eUdyb3Vwc3cGAAkHBQIEcQB+AAp1cQB+AAsAAAAQF2/QfVj1QE6dp4KbJyaH83EAfgBHdwQAAwABdAASU3lzdGVtVXNlclBhc3N3b3JkdXEAfgALAAAAAHcEAEEAB3QAC01hcmtpbmdTZXRzdwYACQcFAgRxAH4ACnVxAH4ACwAAABAXb9B9WPVATp2ngpsnJofzcQB+AEt3BAABAAZ0AApEb21haW5UeXBldwgAAAAAAAMACHQABE5hbWV0AAZQOF9ERVZ3BAABAAh0ABdPYmplY3RTdG9yZVNjaGVtYU9yYWNsZXS6li0tIEdlbmVyYXRlZCBmb3IgT3JhY2xlIGRhdGFiYXNlcyBvbjogVGh1IFNlcCAwNSAxNzo0MDozNiBDRFQgMjAxOQotLSBUaGUgZm9sbG93aW5nIFNjaGVtYVJldmlzaW9uIGNvbW1lbnQgbXVzdCBiZSBwcmVzZW50IGFuZCBtdXN0IGNvcnJlc3BvbmQgdG8KLS0gdGhlIHByb3BlciBzY2hlbWEgcmV2aXNpb24gbGV2ZWwgYXQgdGhlIHRpbWUgdGhlIE9iamVjdFN0b3JlIGlzIGNyZWF0ZWQuCi0tIFNjaGVtYVJldmlzaW9uOiAyNC4xLjUKLS0gCkNSRUFURSBUQUJMRSBEb2NWZXJzaW9uKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBzdG9yYWdlX2NsYXNzIHJhdygxNikgLCBpc19yZXNlcnZlZCBudW1iZXIoMSkgTk9UIE5VTEwgLCBpc19jdXJyZW50IG51bWJlcigxKSBOT1QgTlVMTCAsIGlzX2Zyb3plbiBudW1iZXIoMSkgTk9UIE5VTEwgLCB2ZXJzaW9uX3Nlcmllc19pZCByYXcoMTYpIE5PVCBOVUxMICwgY29udGVudF9zaXplIG51bWJlciAsIGxvY2tfdG9rZW4gcmF3KDE2KSAsIGxvY2tfdGltZW91dCBudW1iZXIoMTApICwgbG9ja19vd25lciB2YXJjaGFyMigxOTIpICwgZG9jX2xpZmVjeWNsZV9wb2xpY3kgcmF3KDE2KSAsIGRvY19zdGF0ZSB2YXJjaGFyMigxOTIpICwgaXNfaW5fZXhjZXB0aW9uX3N0YXRlIG51bWJlcigxKSAsIHN0b3JhZ2VfbG9jYXRpb24gdmFyY2hhcjIoMykgLCBjb21wb25lbnRfdHlwZXMgcmF3KDEwMCkgLCByZXRyaWV2YWxfbmFtZXMgcmF3KDIwMCkgLCBjb21wb25lbnRfdHlwZXNfMiBibG9iICwgcmV0cmlldmFsX25hbWVzXzIgYmxvYiAsIG1pbWVfdHlwZSB2YXJjaGFyMigyODgpICwgY29udGVudF9pbmZvIHJhdyg5NikgLCBjb250ZW50X2luZm9fMiBibG9iICwgbmV4dF9jb250ZW50X3VuaXF1ZV9pZCBudW1iZXIoMTApICwgdndfdmVyc2lvbiB2YXJjaGFyMig3NjUpICwgdmVyc2lvbmluZ19lbmFibGVkIG51bWJlcigxKSBOT1QgTlVMTCAsIHhtbF9kb2NfdHlwZSB2YXJjaGFyMig3NjgpICwgeG1sX3RhcmdldF9jbGFzcyByYXcoMTYpICwgY2xhc3NpZmljYXRpb25fc3RhdGUgbnVtYmVyKDEwKSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHJhdygxNikgLCByZWNvdmVyeV9pdGVtX2lkIHJhdygxNikgLCBsb2NrX3NpZCBibG9iICwgbWFqb3JfdmVyc2lvbl9udW1iZXIgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIG1pbm9yX3ZlcnNpb25fbnVtYmVyIG51bWJlcigxMCkgTk9UIE5VTEwgLCB2ZXJzaW9uX3N0YXR1cyBudW1iZXIoMTApIE5PVCBOVUxMICwgc2VjdXJpdHlfcG9saWN5X2lkIHJhdygxNikgLCByZXNlcnZhdGlvbl90eXBlIG51bWJlcigxMCkgLCByZXNlcnZhdGlvbl9vd25lcl9zaWQgYmxvYiAsIGNvbnRlbnRfbGFzdF9hY2Nlc3NlZF9kYXRlIHRpbWVzdGFtcCAsIGNvbnRlbnRfcmVmZXJyYWxfYmxvYiBibG9iICwgY29udGVudF9yZXRlbnRpb25fZGF0ZSB0aW1lc3RhbXAgLCBzdG9yYWdlX2FyZWFfaWQgcmF3KDE2KSAsIGluZGV4YXRpb25faWQgcmF3KDE2KSAsIGluZGV4X2ZhaWx1cmVfY29kZSBudW1iZXIoMTApICwgY29tcG91bmRfZG9jdW1lbnRfc3RhdGUgbnVtYmVyKDEwKSAsIGR5bmFtaWNfY3JfdXBkYXRlX3N0YXR1cyBudW1iZXIoMTApICwgc2VjdXJpdHlfZm9sZGVyX2lkIHJhdygxNikgLCBjaGVja2VkX2luX2RhdGUgdGltZXN0YW1wICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9Eb2NWZXJzaW9uMjIgT04gRG9jVmVyc2lvbiAodmVyc2lvbl9zZXJpZXNfaWQsIG1ham9yX3ZlcnNpb25fbnVtYmVyIERFU0MsIG1pbm9yX3ZlcnNpb25fbnVtYmVyIERFU0MpIApDUkVBVEUgSU5ERVggSV9Eb2NWZXJzaW9uNzMgT04gRG9jVmVyc2lvbiAoc2VjdXJpdHlfZm9sZGVyX2lkKSAKQ1JFQVRFIFRBQkxFIENvbnRlbnQoZWxlbWVudF9pZCB2YXJjaGFyMigxNDQpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgZXh0ZW5zaW9uIHZhcmNoYXIyKDkpICwgY29udGVudCBibG9iICwgY29udGVudF9zaXplIG51bWJlcigxMCkgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCByZWZjb3VudCBudW1iZXIoMTApICwgc2NmX2RhdGEgcmF3KDMyKSApIApDUkVBVEUgVEFCTEUgR2VuZXJpYyhvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgLCBob21lX2lkIHJhdygxNikgLCBjcmVhdG9yIHZhcmNoYXIyKDI0MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyMigyNDApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgbG9ja190b2tlbiByYXcoMTYpICwgbG9ja190aW1lb3V0IG51bWJlcigxMCkgLCBsb2NrX293bmVyIHZhcmNoYXIyKDE5MikgLCBsb2NrX3NpZCBibG9iICwgc2VjdXJpdHlfcG9saWN5X2lkIHJhdygxNikgLCBpbmRleGF0aW9uX2lkIHJhdygxNikgLCBpbmRleF9mYWlsdXJlX2NvZGUgbnVtYmVyKDEwKSAsIHNlY3VyaXR5X2ZvbGRlcl9pZCByYXcoMTYpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgcmF3KDE2KSAsIHJldGVudGlvbl9kYXRlIHRpbWVzdGFtcCAsIHJlY292ZXJ5X2l0ZW1faWQgcmF3KDE2KSApIApDUkVBVEUgSU5ERVggSV9HZW5lcmljNzQgT04gR2VuZXJpYyAoc2VjdXJpdHlfZm9sZGVyX2lkKSAKQ1JFQVRFIFRBQkxFIENsYXNzRGVmaW5pdGlvbihvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgLCBob21lX2lkIHJhdygxNikgLCBjcmVhdG9yIHZhcmNoYXIyKDI0MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyMigyNDApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgc3VwZXJjbGFzc19pZCByYXcoMTYpICwgcm9vdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgc3VwX3VzZXJfaW5zdGFuY2VzIG51bWJlcigxKSBOT1QgTlVMTCAsIHBlcnNpc3RlbnRfYm9vbCBudW1iZXIoMSkgTk9UIE5VTEwgLCBzeXNfb3duZWRfYm9vbCBudW1iZXIoMSkgTk9UIE5VTEwgLCB0YWJsZV9pZCByYXcoMTYpICwgc3VwX3VzZXJfc3ViY2xhc3NlcyBudW1iZXIoMSkgTk9UIE5VTEwgLCBkZWZhdWx0X2luc3RhbmNlX3NlY3VyaXR5X2lkIHJhdygxNikgTk9UIE5VTEwgLCBzdXBfdXNlcl9wcm9wcyBudW1iZXIoMSkgTk9UIE5VTEwgLCBzeW1ib2xpY19uYW1lIHZhcmNoYXIyKDE5MikgLCBpc19oaWRkZW4gbnVtYmVyKDEpICwgaXNfY2JyX2VuYWJsZWQgbnVtYmVyKDEpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgcmF3KDE2KSAsIGFkZG9uX2lkIHJhdygxNikgLCByZXRlbnRpb25fcGVyaW9kIG51bWJlcigxMCkgLCByZXRlbnRpb25fdW5pdHMgbnVtYmVyKDEwKSAsIGFjdGlvbl9pZCByYXcoMTYpICkgCkNSRUFURSBJTkRFWCBJX0NsYXNzRGVmaW5pdGlvbjI5IE9OIENsYXNzRGVmaW5pdGlvbiAoc3VwZXJjbGFzc19pZCkgCkNSRUFURSBUQUJMRSBHbG9iYWxQcm9wZXJ0eURlZihvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgLCBob21lX2lkIHJhdygxNikgLCBjcmVhdG9yIHZhcmNoYXIyKDI0MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyMigyNDApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGF0YXR5cGUgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGNhcmRpbmFsaXR5IG51bWJlcigxMCkgTk9UIE5VTEwgLCB2YWx1ZV9yZXF1aXJlZF9ib29sIG51bWJlcigxKSAsIGhpZGRlbl9ib29sIG51bWJlcigxKSAsIG5hbWVfcHJvcGVydHlfYm9vbCBudW1iZXIoMSkgLCBtYXhfbGVuZ3RoX3N0cmluZyBudW1iZXIoMTApICwgbWF4X2xlbmd0aF9iaW5hcnkgbnVtYmVyKDEwKSAsIGRlZmF1bHRfYmluYXJ5IGJsb2IgLCBkZWZhdWx0X2Jvb2wgbnVtYmVyKDEpICwgZGVmYXVsdF9kYXRldGltZSB0aW1lc3RhbXAgLCBkZWZhdWx0X2lkIHJhdygxNikgLCBkZWZhdWx0X2ludDMyIG51bWJlcigxMCkgLCBkZWZhdWx0X2Zsb2F0NjQgbnVtYmVyICwgZGVmYXVsdF9zdHJpbmcgdmFyY2hhcjIoMzk5OSkgLCBtaW5pbXVtX2RhdGV0aW1lIHRpbWVzdGFtcCAsIG1pbmltdW1faW50MzIgbnVtYmVyKDEwKSAsIG1pbmltdW1fZmxvYXQ2NCBudW1iZXIgLCBtYXhpbXVtX2RhdGV0aW1lIHRpbWVzdGFtcCAsIG1heGltdW1faW50MzIgbnVtYmVyKDEwKSAsIG1heGltdW1fZmxvYXQ2NCBudW1iZXIgLCBjdmxfaWQgcmF3KDE2KSAsIGxpc3RfaXNfc2V0X2Jvb2wgbnVtYmVyKDEpICwgc3ltYm9saWNfbmFtZSB2YXJjaGFyMigxOTIpICwgc2V0dGFiaWxpdHkgbnVtYmVyKDEwKSAsIGRpc3BsYXlfY2F0ZWdvcnkgdmFyY2hhcjIoMTkyKSAsIG1vZGlmaWNhdGlvbl9hY2Nlc3MgbnVtYmVyKDEwKSAsIGFsbG93c19mb3JlaWduX29iamVjdCBudW1iZXIoMSkgLCBzZWN1cml0eV9wcm94eV90eXBlIG51bWJlcigxMCkgLCBtYXJraW5nX3NldF9pZCByYXcoMTYpICwgdXNlX2xvbmdfY29sdW1uIG51bWJlcigxKSAsIHBlcnNpc3RlbmNlX3R5cGUgbnVtYmVyKDEwKSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHJhdygxNikgLCBhZGRvbl9pZCByYXcoMTYpICwgYXVkaXRfYXNfaWQgcmF3KDE2KSAsIGxvbmdfZGVmYXVsdF9zdHJpbmcgY2xvYiAsIGRhdGVfb25seV9ib29sIG51bWJlcigxKSAsIHJlYWRfcHJvdGVjdGVkX2Jvb2wgbnVtYmVyKDEpICwgY2JyX3Byb3BhZ2F0aW9uIG51bWJlcigxMCkgKSAKQ1JFQVRFIFRBQkxFIFByb3BlcnR5RGVmaW5pdGlvbihvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCByYXcoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBudW1iZXIoMTApIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHJhdygxNikgLCBkYmdfZGlzcGxheV9uYW1lIHZhcmNoYXIyKDk2KSAsIGRiZ19jbGFzc19uYW1lIHZhcmNoYXIyKDk2KSAsIHN5c19vd25lZF9ib29sIG51bWJlcigxKSBOT1QgTlVMTCAsIHByaW1hcnlfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGdsb2JhbF9wcm9wX2lkIHJhdygxNikgLCBpbmhlcml0ZWRfYm9vbCBudW1iZXIoMSkgTk9UIE5VTEwgLCBkYXRhdHlwZSBudW1iZXIoMTApIE5PVCBOVUxMICwgY2FyZGluYWxpdHkgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIHZhbHVlX3JlcXVpcmVkX2Jvb2wgbnVtYmVyKDEpIE5PVCBOVUxMICwgaGlkZGVuX2Jvb2wgbnVtYmVyKDEpIE5PVCBOVUxMICwgbmFtZV9wcm9wZXJ0eV9ib29sIG51bWJlcigxKSBOT1QgTlVMTCAsIG1heF9sZW5ndGggbnVtYmVyKDEwKSAsIGRlZmF1bHRfYmluYXJ5IGJsb2IgLCBkZWZhdWx0X2Jvb2wgbnVtYmVyKDEpICwgZGVmYXVsdF9kYXRldGltZSB0aW1lc3RhbXAgLCBkZWZhdWx0X2lkIHJhdygxNikgLCBkZWZhdWx0X2ludDMyIG51bWJlcigxMCkgLCBkZWZhdWx0X2Zsb2F0NjQgbnVtYmVyICwgZGVmYXVsdF9vYmplY3RfaWQgcmF3KDE2KSAsIGRlZmF1bHRfb2JqZWN0X2lkX2NsYXNzIHJhdygxNikgLCBkZWZhdWx0X3N0cmluZyB2YXJjaGFyMigzOTk5KSAsIG1pbmltdW1fZGF0ZXRpbWUgdGltZXN0YW1wICwgbWluaW11bV9pbnQzMiBudW1iZXIoMTApICwgbWluaW11bV9mbG9hdDY0IG51bWJlciAsIG1heGltdW1fZGF0ZXRpbWUgdGltZXN0YW1wICwgbWF4aW11bV9pbnQzMiBudW1iZXIoMTApICwgbWF4aW11bV9mbG9hdDY0IG51bWJlciAsIGN2bF9pZCByYXcoMTYpICwgcmVxdWlyZWRfY2xhc3NfaWQgcmF3KDE2KSAsIHJlZmxlY3RpdmVfcHJvcF9pZCByYXcoMTYpICwgZGVsZXRpb25fYWN0aW9uIG51bWJlcigxMCkgLCBzZWN1cml0eV9wcm9wYWdhdGlvbiBudW1iZXIoMTApICwgdGFibGVfaWQgcmF3KDE2KSAsIGNvbHVtbl9pZCByYXcoMTYpICwgbGlzdF9pc19zZXRfYm9vbCBudW1iZXIoMSkgLCByZXF1aXJlZF9hY2Nlc3MgbnVtYmVyKDEwKSAsIGFsbG93ZWRfY2hhbmdlcyBudW1iZXIoMTApIE5PVCBOVUxMICwgc2V0dGFiaWxpdHkgbnVtYmVyKDEwKSAsIGNvcHlfdG9fcmVzZXJ2YXRpb24gbnVtYmVyKDEpICwgbW9kaWZpY2F0aW9uX2FjY2VzcyBudW1iZXIoMTApICwgYWxsb3dzX2ZvcmVpZ25fb2JqZWN0IG51bWJlcigxKSAsIG1hcmtpbmdfc2V0X2lkIHJhdygxNikgLCB1c2VfbG9uZ19jb2x1bW4gbnVtYmVyKDEpICwgaXNfY2JyX2VuYWJsZWQgbnVtYmVyKDEpICwgcGVyc2lzdGVuY2VfdHlwZSBudW1iZXIoMTApICwgYXVkaXRfYXNfaWQgcmF3KDE2KSAsIGxvbmdfZGVmYXVsdF9zdHJpbmcgY2xvYiAsIGRhdGVfb25seV9ib29sIG51bWJlcigxKSAsIHJlYWRfcHJvdGVjdGVkX2Jvb2wgbnVtYmVyKDEpICwgY2JyX3Byb3BhZ2F0aW9uIG51bWJlcigxMCkgKSAKQ1JFQVRFIElOREVYIElfUHJvcGVydHlEZWZpbml0aW9uMTkgT04gUHJvcGVydHlEZWZpbml0aW9uIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFRBQkxFIFRhYmxlRGVmaW5pdGlvbihvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgLCBob21lX2lkIHJhdygxNikgLCBjcmVhdG9yIHZhcmNoYXIyKDI0MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyMigyNDApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgdGFibGVfbmFtZSB2YXJjaGFyMig5MCkgTk9UIE5VTEwgLCB0YWJsZV90eXBlIG51bWJlcigxMCkgTk9UIE5VTEwgLCBvdmVyZmxvd190YWJsZV9pZCByYXcoMTYpICkgCkNSRUFURSBUQUJMRSBDb2x1bW5EZWZpbml0aW9uKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHJhdygxNikgTk9UIE5VTEwgLCBvcmRpbmFsIG51bWJlcigxMCkgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgcmF3KDE2KSAsIGRiZ190YWJsZV9uYW1lIHZhcmNoYXIyKDkwKSAsIGNvbHVtbl9uYW1lIHZhcmNoYXIyKDkwKSBOT1QgTlVMTCAsIGNvbHVtbl9kYXRhdHlwZSBudW1iZXIoMTApIE5PVCBOVUxMICwgY29sdW1uX3NpemUgbnVtYmVyKDEwKSAsIGFsbG93c19udWxsX2Jvb2wgbnVtYmVyKDEpIE5PVCBOVUxMICwgYWxsb3dzX3VzZXJfaW5kZXggbnVtYmVyKDEpICwgcHJvcF9pZCByYXcoMTYpICwgaXNfc2luZ2xlX2luZGV4ZWQgbnVtYmVyKDEpICwgaXNfc3lzdGVtX293bmVkIG51bWJlcigxKSApIApDUkVBVEUgSU5ERVggSV9Db2x1bW5EZWZpbml0aW9uNyBPTiBDb2x1bW5EZWZpbml0aW9uIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0NvbHVtbkRlZmluaXRpb24yMyBPTiBDb2x1bW5EZWZpbml0aW9uIChwYXJlbnRfaWQsIHByb3BfaWQpIApDUkVBVEUgVEFCTEUgTG9jYWxpemVkU3RyaW5nKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHJhdygxNikgTk9UIE5VTEwgLCBvcmRpbmFsIG51bWJlcigxMCkgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgcmF3KDE2KSAsIGxvY2FsZV9uYW1lIHZhcmNoYXIyKDQ4KSBOT1QgTlVMTCAsIHRleHQgdmFyY2hhcjIoMzk5OSkgTk9UIE5VTEwgKSAKQ1JFQVRFIElOREVYIElfTG9jYWxpemVkU3RyaW5nMTggT04gTG9jYWxpemVkU3RyaW5nIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFRBQkxFIEFsaWFzSWQocGFyZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCByYXcoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBudW1iZXIoMTApIE5PVCBOVUxMICwgYWxpYXNfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGNsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0FsaWFzSWQ2IE9OIEFsaWFzSWQgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpIApDUkVBVEUgSU5ERVggSV9BbGlhc0lkMzYgT04gQWxpYXNJZCAoY2xhc3NfaWQpIApDUkVBVEUgVEFCTEUgUmVsYXRpb25zaGlwKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBoZWFkX2lkIHJhdygxNikgLCBoZWFkX2lkX2NsYXNzIHJhdygxNikgLCB0YWlsX2lkIHJhdygxNikgTk9UIE5VTEwgLCB2ZXJzaW9uX3Nlcmllc19pZCByYXcoMTYpICwgcHJvcGFnYXRlX3NlY3VyaXR5IG51bWJlcigxKSAsIG5hbWUgdmFyY2hhcjIoNzY1KSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHJhdygxNikgLCByZWNvdmVyeV9pdGVtX2lkIHJhdygxNikgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1JlbGF0aW9uc2hpcDI3IE9OIFJlbGF0aW9uc2hpcCAodGFpbF9pZCwgbmFtZSkgCkNSRUFURSBJTkRFWCBJX1JlbGF0aW9uc2hpcDI4IE9OIFJlbGF0aW9uc2hpcCAoaGVhZF9pZCkgCkNSRUFURSBJTkRFWCBJX1JlbGF0aW9uc2hpcDQxIE9OIFJlbGF0aW9uc2hpcCAodmVyc2lvbl9zZXJpZXNfaWQpIApDUkVBVEUgVEFCTEUgQ3ZsKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBkaXNwbGF5X25hbWUgdmFyY2hhcjIoMTkyKSBOT1QgTlVMTCAsIGN2bF9kYXRhX3R5cGUgbnVtYmVyKDEwKSAsIGRlc2NyaXB0aW9uIHZhcmNoYXIyKDc2NSkgLCByZXBsaWNhdGlvbl9ncm91cF9pZCByYXcoMTYpICwgYWRkb25faWQgcmF3KDE2KSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfQ3ZsMzIgT04gQ3ZsIChkaXNwbGF5X25hbWUpIApDUkVBVEUgVEFCTEUgQ3ZsRWxlbWVudChvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCByYXcoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBudW1iZXIoMTApIE5PVCBOVUxMICwgcGFyZW50X2N2bF9pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHJhdygxNikgLCB2YWxfaW50ZWdlciBudW1iZXIoMTApICwgdmFsX3N0cmluZyB2YXJjaGFyMigzMDcyKSAsIGNob2ljZV90eXBlIG51bWJlcigxMCkgTk9UIE5VTEwgLCBuZXN0aW5nX2xldmVsIG51bWJlcigxMCkgKSAKQ1JFQVRFIElOREVYIElfQ3ZsRWxlbWVudDExIE9OIEN2bEVsZW1lbnQgKHBhcmVudF9jdmxfaWQpIApDUkVBVEUgVEFCTEUgQ29udGFpbmVyKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBwYXJlbnRfY29udGFpbmVyX2lkIHJhdygxNikgLCBuYW1lIHZhcmNoYXIyKDc2NSkgLCBpbml0X2NvbnRhaW5lcl9ib29sIG51bWJlcigxKSAsIGxvY2tfdG9rZW4gcmF3KDE2KSAsIGxvY2tfdGltZW91dCBudW1iZXIoMTApICwgbG9ja19vd25lciB2YXJjaGFyMigxOTIpICwgbG9ja19zaWQgYmxvYiAsIHNlY3VyaXR5X3BvbGljeV9pZCByYXcoMTYpICwgaW5kZXhhdGlvbl9pZCByYXcoMTYpICwgaW5kZXhfZmFpbHVyZV9jb2RlIG51bWJlcigxMCkgLCByZXBsaWNhdGlvbl9ncm91cF9pZCByYXcoMTYpICwgcmV0ZW50aW9uX2RhdGUgdGltZXN0YW1wICwgcmVjb3ZlcnlfaXRlbV9pZCByYXcoMTYpICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9Db250YWluZXIyNCBPTiBDb250YWluZXIgKHBhcmVudF9jb250YWluZXJfaWQsIG5hbWUpIApDUkVBVEUgVEFCTEUgR2xvYmFsUHJvcEFsaWFzSWQocGFyZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCByYXcoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBudW1iZXIoMTApIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgcGFyZW50X2lkX2NsYXNzIHJhdygxNikgLCBhbGlhc19pZCByYXcoMTYpIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9HbG9iYWxQcm9wQWxpYXNJZDkgT04gR2xvYmFsUHJvcEFsaWFzSWQgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpIApDUkVBVEUgVEFCTEUgTGlzdE9mQmluYXJ5KHBhcmVudF9pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGVsZW1lbnRfdmFsdWUgYmxvYiBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIHBhcmVudF9pZF9jbGFzcyByYXcoMTYpICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9MaXN0T2ZCaW5hcnkxMCBPTiBMaXN0T2ZCaW5hcnkgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwsIHBhcmVudF9pZF9jbGFzcykgCkNSRUFURSBUQUJMRSBMaXN0T2ZCb29sZWFuKHBhcmVudF9pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGVsZW1lbnRfdmFsdWUgbnVtYmVyKDEpIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgcGFyZW50X2lkX2NsYXNzIHJhdygxNikgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0xpc3RPZkJvb2xlYW4xMiBPTiBMaXN0T2ZCb29sZWFuIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsLCBwYXJlbnRfaWRfY2xhc3MpIApDUkVBVEUgVEFCTEUgTGlzdE9mRGF0ZVRpbWUocGFyZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCByYXcoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBudW1iZXIoMTApIE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSB0aW1lc3RhbXAgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBwYXJlbnRfaWRfY2xhc3MgcmF3KDE2KSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mRGF0ZVRpbWUxMyBPTiBMaXN0T2ZEYXRlVGltZSAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCwgcGFyZW50X2lkX2NsYXNzKSAKQ1JFQVRFIFRBQkxFIExpc3RPZkZsb2F0NjQocGFyZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCByYXcoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBudW1iZXIoMTApIE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSBudW1iZXIgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBwYXJlbnRfaWRfY2xhc3MgcmF3KDE2KSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mRmxvYXQ2NDE0IE9OIExpc3RPZkZsb2F0NjQgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwsIHBhcmVudF9pZF9jbGFzcykgCkNSRUFURSBUQUJMRSBMaXN0T2ZJZChwYXJlbnRfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHJhdygxNikgTk9UIE5VTEwgLCBvcmRpbmFsIG51bWJlcigxMCkgTk9UIE5VTEwgLCBlbGVtZW50X3ZhbHVlIHJhdygxNikgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBwYXJlbnRfaWRfY2xhc3MgcmF3KDE2KSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mSWQxNSBPTiBMaXN0T2ZJZCAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCwgcGFyZW50X2lkX2NsYXNzKSAKQ1JFQVRFIFRBQkxFIExpc3RPZkludGVnZXIzMihwYXJlbnRfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHJhdygxNikgTk9UIE5VTEwgLCBvcmRpbmFsIG51bWJlcigxMCkgTk9UIE5VTEwgLCBlbGVtZW50X3ZhbHVlIG51bWJlcigxMCkgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBwYXJlbnRfaWRfY2xhc3MgcmF3KDE2KSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mSW50ZWdlcjMyMTYgT04gTGlzdE9mSW50ZWdlcjMyIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsLCBwYXJlbnRfaWRfY2xhc3MpIApDUkVBVEUgVEFCTEUgTGlzdE9mU3RyaW5nKHBhcmVudF9pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGVsZW1lbnRfdmFsdWUgdmFyY2hhcjIoMzk5OSkgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBwYXJlbnRfaWRfY2xhc3MgcmF3KDE2KSApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mU3RyaW5nMTcgT04gTGlzdE9mU3RyaW5nIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsLCBwYXJlbnRfaWRfY2xhc3MpIApDUkVBVEUgVEFCTEUgU2VjdXJpdHlEZXNjKHNlY3VyaXR5X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCByZWZlcmVuY2VfY291bnQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhhc2ggbnVtYmVyKDEwKSBOT1QgTlVMTCAsIG50X3NlY3VyaXR5X2Rlc2NyaXB0b3IgYmxvYiBOT1QgTlVMTCAsIGNhY2hlX3ByZV9sb2FkIG51bWJlcigxKSApIApDUkVBVEUgSU5ERVggSV9TZWN1cml0eURlc2MzNyBPTiBTZWN1cml0eURlc2MgKGhhc2gpIApDUkVBVEUgVEFCTEUgRERTdGF0ZShpZCByYXcoMTYpIE5PVCBOVUxMICwgc2NoZW1hX3JldmlzaW9uX3N0cmluZyB2YXJjaGFyMigxOTIpICwgZm9sZGVyX2NhY2hlX2Vwb2NoIG51bWJlcigxMCkgTk9UIE5VTEwgLCBsYXN0X2dvb2RfY2lfc24gbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGxhc3RfZ29vZF9waV9zbiBudW1iZXIoMTApIE5PVCBOVUxMICwgbGFzdF9nb29kX2Fubm9fcGlfc24gbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGluZGV4X2hvc3RfbmFtZSB2YXJjaGFyMig0NSkgLCBpbmRleF9sZWFzZV9leHBpcnkgdGltZXN0YW1wICwgaW5kZXhfYXJlYV9lcG9jaCBudW1iZXIoMTApICwgc3RvcmFnZV9hcmVhX2Vwb2NoIG51bWJlcigxMCkgLCBzdG9yYWdlX3BvbGljeV9lcG9jaCBudW1iZXIoMTApICwgYXN5bmNfdXBncmFkZV9zdGF0ZSBudW1iZXIoMTApICwgaXNfY3VzdG9tX3NjaGVtYSBudW1iZXIoMSkgLCBzY2hlbWFfc2NyaXB0IGNsb2IgLCBleHRlcm5hbF9tZF9lcG9jaCByYXcoMTYpICwgc3FsX3RyYW5zbGF0aW9uX2Vwb2NoIG51bWJlcigxMCkgLCBsYXN0X3B1cmdlX3RpbWUgdGltZXN0YW1wICwgZXZlbnRfYWN0aW9uX2Vwb2NoIG51bWJlcigxMCkgLCBhdWRpdF9kaXNwX2xlYXNlX2V4cGlyeSB0aW1lc3RhbXAgLCBhdWRpdF9kaXNwX3Jlc3RhcnQgbnVtYmVyKDIwKSAsIGNvbnRpbnVpdHlfZGF0YSBibG9iICwgc3RvcmVfaWQgcmF3KDE2KSAsIHN1YnNjcmlwdGlvbl9lcG9jaCBudW1iZXIoMTApICwgaW5kZXhpbmdfYmFsYW5jaW5nX3RpbWUgdGltZXN0YW1wICkgCkNSRUFURSBUQUJMRSBTdG9yYWdlQ2xhc3Mob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHJhdygxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBudW1iZXIoMTApIE5PVCBOVUxMICwgaG9tZV9pZCByYXcoMTYpICwgY3JlYXRvciB2YXJjaGFyMigyNDApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcjIoMjQwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyMigxOTIpIE5PVCBOVUxMICwgZGVzY3JpcHRpb24gdmFyY2hhcjIoNzY1KSAsIHJlcG9zaXRvcnlfdHlwZSB2YXJjaGFyMig0OCkgLCBmc19hZHNfcGF0aCB2YXJjaGFyMigzNjAwKSAsIGRiX29wdF9oaW50IG51bWJlcigxMCkgLCBjb250ZW50X2NhY2hlZCBudW1iZXIoMTApICwgYXJlYV9zdGF0dXMgbnVtYmVyKDEwKSAsIGNsb3N1cmVfZGF0ZSB0aW1lc3RhbXAgLCBlbGVtZW50X2NvdW50IG51bWJlciAsIGVsZW1lbnRzX2NyZWF0ZWQgbnVtYmVyICwgZWxlbWVudHNfZGVsZXRlZCBudW1iZXIgLCBlbGVtZW50X2tieXRlcyBudW1iZXIgLCBtYXhfZWxlbWVudHMgbnVtYmVyICwgbWF4X3NpemUgbnVtYmVyICwgZGF0YWJhc2VfdHlwZSBudW1iZXIoMTApICwgam5kaV9kYXRhX3NvdXJjZSB2YXJjaGFyMigxOTIpICwgam5kaV94YV9kYXRhX3NvdXJjZSB2YXJjaGFyMigxOTIpICwgZGVsZXRlX21ldGhvZCBudW1iZXIoMTApICwgZnJlZV90aHJlc2hvbGQgbnVtYmVyKDEwKSAsIGZyZWVfd2FybmluZyBudW1iZXIoMTApICwgZmlsdGVyX2V4cHJlc3Npb24gY2xvYiAsIGZpeGVkX2NvbnRlbnRfZGV2aWNlX2lkIHJhdygxNikgLCBzaXRlX2lkIHJhdygxNikgLCByZXNvdXJjZV9zdHJpbmcgdmFyY2hhcjIoMTUzNikgLCBhbGxvd3NfZGVsZXRlIG51bWJlcigxKSAsIGluZGV4X2FyZWFfaWQgcmF3KDE2KSAsIG9yaWdpbmFsX2ZpbGVzdG9yZV9pZCByYXcoMTYpICwgZGlyZWN0b3J5X3N0cnVjdHVyZSBudW1iZXIoMTApICwgc3RhbmRieV9hY3RpdmF0aW9uX3ByaW9yaXR5IG51bWJlcigxMCkgLCByZXRlbnRpb25fcGVyaW9kIG51bWJlcigxMCkgLCByZXBsaWNhdGlvbl9ncm91cF9pZCByYXcoMTYpICwgc2lzX2VuYWJsZWQgbnVtYmVyKDEpICwgc2lzX3RhYmxlX25hbWUgdmFyY2hhcjIoOTApICwgcmV0ZW50aW9uX21vZGUgbnVtYmVyKDEwKSAsIGVuY3J5cHRpb25fZW5hYmxlZCBudW1iZXIoMSkgLCBzY2ZfaW5kZXggbnVtYmVyKDEwKSAsIGNvbXByZXNzaW9uX2VuYWJsZWQgbnVtYmVyKDEpICwgY29tcHJlc3Npb25fdGhyZXNob2xkIG51bWJlcigxMCkgLCB2ZXJpZmljYXRpb25fbW9kZSBudW1iZXIoMTApICwgaWRfYmF0Y2hfc2l6ZSBudW1iZXIoMTApICwgc3luY19yZXF1aXJlZCBudW1iZXIoMTApICwgc3luY19kZXNpcmVkIG51bWJlcigxMCkgLCBiYXRjaF90dGwgbnVtYmVyKDEwKSAsIG9wZW5fdGltZV9saW1pdCBudW1iZXIoMTApICwgZW5jcnlwdGlvbl9tZXRob2QgbnVtYmVyKDEwKSAsIHVzZV9kZXZpY2VfaG9sZCBudW1iZXIoMSkgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1N0b3JhZ2VDbGFzczI1IE9OIFN0b3JhZ2VDbGFzcyAoZGlzcGxheV9uYW1lKSAKQ1JFQVRFIFRBQkxFIENvbnRlbnRTZWFyY2gob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHJhdygxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBudW1iZXIoMTApIE5PVCBOVUxMICwgcXVlcmllZF9vYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGNvbnRlbnQgdmFyY2hhcjIoMzApICwgcmFuayBudW1iZXIgLCBoaXRjb3VudCBudW1iZXIoMTApICwgY29udGVudF9zaXplIG51bWJlciAsIHNlcV9udW1iZXIgbnVtYmVyKDEwKSAsIHN1bW1hcnkgdmFyY2hhcjIoMTUzNikgLCBoaWdobGlnaHRfYmxvYiBibG9iICkgCkNSRUFURSBUQUJMRSBBbm5vdGF0aW9uKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBzdG9yYWdlX2NsYXNzIHJhdygxNikgLCBjb250ZW50X3NpemUgbnVtYmVyICwgYW5ub3RhdGVkX2lkIHJhdygxNikgTk9UIE5VTEwgLCBhbm5vdGF0ZWRfaWRfY2xhc3MgcmF3KDE2KSAsIGFubm90YXRlZF9lbGVtZW50IG51bWJlcigxMCkgLCBkZXNjcmlwdGlvbiB2YXJjaGFyMig3NjUpICwgc3RvcmFnZV9sb2NhdGlvbiB2YXJjaGFyMigzKSAsIGNvbXBvbmVudF90eXBlcyByYXcoMTAwKSAsIHJldHJpZXZhbF9uYW1lcyByYXcoMjAwKSAsIGNvbXBvbmVudF90eXBlc18yIGJsb2IgLCByZXRyaWV2YWxfbmFtZXNfMiBibG9iICwgbWltZV90eXBlIHZhcmNoYXIyKDI4OCkgLCBjb250ZW50X2luZm8gcmF3KDk2KSAsIGNvbnRlbnRfaW5mb18yIGJsb2IgLCBuZXh0X2NvbnRlbnRfdW5pcXVlX2lkIG51bWJlcigxMCkgLCBjb250ZW50X2xhc3RfYWNjZXNzZWRfZGF0ZSB0aW1lc3RhbXAgLCBzdG9yYWdlX2FyZWFfaWQgcmF3KDE2KSAsIGluZGV4YXRpb25faWQgcmF3KDE2KSAsIGluZGV4X2ZhaWx1cmVfY29kZSBudW1iZXIoMTApICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgcmF3KDE2KSAsIHJldGVudGlvbl9kYXRlIHRpbWVzdGFtcCAsIHJlY292ZXJ5X2l0ZW1faWQgcmF3KDE2KSApIApDUkVBVEUgSU5ERVggSV9Bbm5vdGF0aW9uMzEgT04gQW5ub3RhdGlvbiAoYW5ub3RhdGVkX2lkKSAKQ1JFQVRFIFRBQkxFIFN1YnNjcmlwdGlvbihvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgLCBob21lX2lkIHJhdygxNikgLCBjcmVhdG9yIHZhcmNoYXIyKDI0MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyMigyNDApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmNoYXIyKDE5MikgLCBkZXNjcmlwdGlvbiB2YXJjaGFyMig3NjUpICwgdGFyZ2V0X2lkIHJhdygxNikgLCB0YXJnZXRfaWRfY2xhc3MgcmF3KDE2KSAsIGluY2x1ZGVfc3ViY2xhc3NlcyBudW1iZXIoMSkgLCBwcmlvcml0eSBudW1iZXIoMTApICwgYWN0aW9uX2lkIHJhdygxNikgLCBpc19lbmFibGVkIG51bWJlcigxKSAsIGlzX3N5bmNocm9ub3VzIG51bWJlcigxKSAsIHVzZXJfc3RyaW5nIHZhcmNoYXIyKDc1MCkgLCBwcm9nX2lkX3N0cmluZyB2YXJjaGFyMig3NjUpICwgc2NyaXB0X3RleHQgY2xvYiAsIHJlc2V0X2xpZmVjeWNsZV9vbl9jaGVja2luIG51bWJlcigxKSAsIGNsYXNzaWZ5X21pbWVfdHlwZSB2YXJjaGFyMigyODgpICwgd29ya2Zsb3dfZGVmaW5pdGlvbl9pZCByYXcoMTYpICwgaXNvbGF0ZWRfcmVnaW9uIG51bWJlcigxMCkgLCBleHByZXNzaW9uIHZhcmNoYXIyKDc2NSkgLCBzdWJqZWN0IHZhcmNoYXIyKDI0MCkgLCB2d192ZXJzaW9uIHZhcmNoYXIyKDc2NSkgLCBlbmFibGVfbWFudWFsX2xhdW5jaCBudW1iZXIoMSkgLCBmaWx0ZXJfZXhwcmVzc2lvbiBjbG9iICwgZmlsdGVyZWRfcHJvcGVydHlfbmFtZSB2YXJjaGFyMigxOTIpICwgY29tcGlsZWRfZmlsdGVyIGJsb2IgLCBwcmVzZXJ2ZV9kaXJlY3RfcGVybWlzc2lvbnMgbnVtYmVyKDEpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgcmF3KDE2KSAsIHNlYXJjaF9mdW5jdGlvbl9uYW1lIHZhcmNoYXIyKDM5MCkgLCBjb252ZXJzaW9uX2NsYXNzX2lkIHJhdygxNikgKSAKQ1JFQVRFIElOREVYIElfU3Vic2NyaXB0aW9uNDYgT04gU3Vic2NyaXB0aW9uICh0YXJnZXRfaWQpIApDUkVBVEUgVEFCTEUgUXVldWVJdGVtKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBkZXF1ZXVlX2hvc3QgdmFyY2hhcjIoNDUpICwgcmV0cnlfY291bnQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIHF1ZXVlZF9vYmplY3RfaWQgcmF3KDE2KSAsIHF1ZXVlZF9vYmplY3RfaWRfY2xhc3MgcmF3KDE2KSAsIHNlcmlhbGl6ZWRfZGF0YSBibG9iICwgZXZlbnRfb3BlcmF0aW9uIG51bWJlcigxMCkgLCBuZXh0X3JldHJ5X2RhdGUgdGltZXN0YW1wICwgbGVhc2VfZXhwaXJ5X2RhdGUgdGltZXN0YW1wICwgaW1wZXJzb25hdGlvbl91c2VyIHZhcmNoYXIyKDM5OTkpICkgCkNSRUFURSBJTkRFWCBJX1F1ZXVlSXRlbTQ5IE9OIFF1ZXVlSXRlbSAobmV4dF9yZXRyeV9kYXRlKSAKQ1JFQVRFIFRBQkxFIERvY3VtZW50U3RhdGUob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyByYXcoMTYpICwgc3RhdGVfbmFtZSB2YXJjaGFyMigzOTk5KSAsIGNhbl9iZV9kZW1vdGVkIG51bWJlcigxKSAsIGVuYWJsZV9zdGF0ZV9wZXJtaXNzaW9ucyBudW1iZXIoMSkgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICkgCkNSRUFURSBJTkRFWCBJX0RvY3VtZW50U3RhdGUzNSBPTiBEb2N1bWVudFN0YXRlIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFRBQkxFIExpbmsob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHJhdygxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBudW1iZXIoMTApIE5PVCBOVUxMICwgaG9tZV9pZCByYXcoMTYpICwgY3JlYXRvciB2YXJjaGFyMigyNDApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcjIoMjQwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGhlYWRfaWQgcmF3KDE2KSAsIGhlYWRfaWRfY2xhc3MgcmF3KDE2KSAsIHRhaWxfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHRhaWxfaWRfY2xhc3MgcmF3KDE2KSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHJhdygxNikgLCByZWNvdmVyeV9pdGVtX2lkIHJhdygxNikgKSAKQ1JFQVRFIElOREVYIElfTGluazM4IE9OIExpbmsgKHRhaWxfaWQpIApDUkVBVEUgSU5ERVggSV9MaW5rMzkgT04gTGluayAoaGVhZF9pZCkgCkNSRUFURSBUQUJMRSBTZWN1cml0eVBvbGljeShvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgLCBob21lX2lkIHJhdygxNikgLCBjcmVhdG9yIHZhcmNoYXIyKDI0MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyMigyNDApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmNoYXIyKDE5MikgLCBkZXNjcmlwdGlvbiB2YXJjaGFyMig3NjUpICwgcHJlc2VydmVfZGlyZWN0X3Blcm1pc3Npb25zIG51bWJlcigxKSBOT1QgTlVMTCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHJhdygxNikgKSAKQ1JFQVRFIFRBQkxFIFNlY3VyaXR5VGVtcGxhdGUob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyByYXcoMTYpICwgZGlzcGxheV9uYW1lIHZhcmNoYXIyKDE5MikgLCBpc19lbmFibGVkIG51bWJlcigxKSBOT1QgTlVMTCAsIGFwcGx5X3N0YXRlX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9TZWN1cml0eVRlbXBsYXRlNDUgT04gU2VjdXJpdHlUZW1wbGF0ZSAocGFyZW50X2lkLCBhcHBseV9zdGF0ZV9pZCkgCkNSRUFURSBUQUJMRSBFdmVudChvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgLCBob21lX2lkIHJhdygxNikgLCBjcmVhdG9yIHZhcmNoYXIyKDI0MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyMigyNDApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgc291cmNlX29iamVjdF9pZCByYXcoMTYpICwgc291cmNlX29iamVjdF9jbGFzc19pZCByYXcoMTYpICwgc3RhdHVzIG51bWJlcigxMCkgLCBzZXJpYWxpemVkX3NvdXJjZV9vYmplY3QgYmxvYiAsIHF1ZXJ5X3RleHQgY2xvYiAsIHZlcnNpb25fc2VyaWVzX2lkIHJhdygxNikgLCBsaWZlY3ljbGVfY2hhbmdlIG51bWJlcigxMCkgLCBlbGVtZW50X25hbWUgdmFyY2hhcjIoNzY1KSAsIGF1ZGl0X2xldmVsIG51bWJlcigxMCkgLCBpbml0aWF0aW5nX3VzZXIgdmFyY2hhcjIoNzY1KSAsIHNlcXVlbmNlX251bWJlciBudW1iZXIoMTApICwgc2VyaWFsaXplZF9vcmlnX29iamVjdCBibG9iICwgYXVkaXRfc2VxdWVuY2UgbnVtYmVyKDIwKSAsIHNvdXJjZV9zdG9yYWdlX2FyZWFfaWQgcmF3KDE2KSAsIHRhcmdldF9zdG9yYWdlX2FyZWFfaWQgcmF3KDE2KSAsIHJlY292ZXJ5X2l0ZW1faWQgcmF3KDE2KSAsIHNvdXJjZV9yZXRhaW5lZCBudW1iZXIoMSkgKSAKQ1JFQVRFIElOREVYIElfRXZlbnQ0OCBPTiBFdmVudCAoc291cmNlX29iamVjdF9pZCwgY3JlYXRlX2RhdGUgREVTQykgCkNSRUFURSBJTkRFWCBJX0V2ZW50ODMgT04gRXZlbnQgKGF1ZGl0X3NlcXVlbmNlKSAKQ1JFQVRFIFRBQkxFIEF1ZGl0RGVmaW5pdGlvbihvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCByYXcoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBudW1iZXIoMTApIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHJhdygxNikgLCBldmVudF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgYXVkaXRfc3VjY2VzcyBudW1iZXIoMSkgTk9UIE5VTEwgLCBhdWRpdF9mYWlsdXJlIG51bWJlcigxKSBOT1QgTlVMTCAsIGluY2x1ZGVfc3ViY2xhc3NlcyBudW1iZXIoMSkgTk9UIE5VTEwgLCByZWNvcmRpbmdfbGV2ZWwgbnVtYmVyKDEwKSAsIGZpbHRlcl9leHByZXNzaW9uIGNsb2IgLCBmaWx0ZXJlZF9wcm9wZXJ0eV9uYW1lIHZhcmNoYXIyKDE5MikgLCBkaXNwbGF5X25hbWUgdmFyY2hhcjIoMTkyKSAsIGVuYWJsZWRfYm9vbCBudW1iZXIoMSkgKSAKQ1JFQVRFIElOREVYIElfQXVkaXREZWZpbml0aW9uNDcgT04gQXVkaXREZWZpbml0aW9uIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFRBQkxFIFN1YnNjcmliZWRFdmVudChvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCByYXcoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBudW1iZXIoMTApIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHJhdygxNikgLCBldmVudF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICkgCkNSRUFURSBJTkRFWCBJX1N1YnNjcmliZWRFdmVudDUwIE9OIFN1YnNjcmliZWRFdmVudCAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgCkNSRUFURSBJTkRFWCBJX1N1YnNjcmliZWRFdmVudDUxIE9OIFN1YnNjcmliZWRFdmVudCAoZXZlbnRfY2xhc3NfaWQpIApDUkVBVEUgVEFCTEUgSW5kZXhBcmVhKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBkaXNwbGF5X25hbWUgdmFyY2hhcjIoMTkyKSBOT1QgTlVMTCAsIGRlc2NyaXB0aW9uIHZhcmNoYXIyKDc2NSkgLCBhcmVhX3N0YXR1cyBudW1iZXIoMTApIE5PVCBOVUxMICwgc2l0ZV9pZCByYXcoMTYpICwgdGVtcGxhdGVfdHlwZSB2YXJjaGFyMigzODQpICwgcm9vdF9kaXJlY3RvcnlfcGF0aCB2YXJjaGFyMig3NjUpICwgc2VhcmNoX3NlcnZlcnNfdG9fYXR0YWNoIG51bWJlcigxMCkgLCBtYXhfY29sbGVjdGlvbnMgbnVtYmVyKDEwKSAsIHRlbXBfZGlyZWN0b3J5X3BhdGggdmFyY2hhcjIoNzY1KSAsIG1heF9vYmplY3RzX3Blcl9pbmRleCBudW1iZXIgLCBtYXhfc2l6ZV9wZXJfaW5kZXhfa2IgbnVtYmVyICwgc3RhbmRieV9hY3RpdmF0aW9uX3ByaW9yaXR5IG51bWJlcigxMCkgLCBhZmZpbml0eV9ncm91cF9pZCByYXcoMTYpICkgCkNSRUFURSBUQUJMRSBJbmRleFJlcXVlc3RzKHRhcmdldF9pZCByYXcoMTYpIE5PVCBOVUxMICwgdGFyZ2V0X2lkX2NsYXNzIHJhdygxNikgTk9UIE5VTEwgLCBvcGVyYXRpb24gbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGluZGV4YXRpb25faWQgcmF3KDE2KSAsIHN0YXR1cyBudW1iZXIoMTApIE5PVCBOVUxMICwgcmVxdWVzdF90aW1lIHRpbWVzdGFtcCBOT1QgTlVMTCAsIHNlcW51bV9pZGVudGl0eSBudW1iZXIoMjApIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgcmV0cnlfY291bnQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGVsZW1lbnRfc2VxdWVuY2VfbnVtYmVyIG51bWJlcigxMCkgLCByZXRyaWV2YWxfbmFtZV9leHQgdmFyY2hhcjIoMTkyKSAsIGluZGV4X2pvYl9pZCByYXcoMTYpICwgaW5kZXhfYXJlYV9pZCByYXcoMTYpIE5PVCBOVUxMICwgb2JqZWN0X2lkIHJhdygxNikgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSAsIHNlY3VyaXR5X2lkIHJhdygxNikgLCBlcG9jaF9pZCBudW1iZXIoMTApICwgaG9tZV9pZCByYXcoMTYpICwgY3JlYXRvciB2YXJjaGFyMigyNDApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcjIoMjQwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGxhc3RfZmFpbHVyZV9yZWFzb24gY2xvYiAsIGluZGV4aW5nX2ZhaWx1cmVfY29kZSBudW1iZXIoMTApICwgcmVtb3ZhbF9pbmRleGF0aW9uX2lkIHJhdygxNikgKSAKQ1JFQVRFIElOREVYIElfSW5kZXhSZXF1ZXN0czU5IE9OIEluZGV4UmVxdWVzdHMgKHRhcmdldF9pZCkgCkNSRUFURSBJTkRFWCBJX0luZGV4UmVxdWVzdHM4NCBPTiBJbmRleFJlcXVlc3RzIChvYmplY3RfaWQpIApDUkVBVEUgSU5ERVggSV9JbmRleFJlcXVlc3RzODUgT04gSW5kZXhSZXF1ZXN0cyAoaW5kZXhfam9iX2lkKSAKQ1JFQVRFIElOREVYIElfSW5kZXhSZXF1ZXN0czk0IE9OIEluZGV4UmVxdWVzdHMgKGluZGV4X2FyZWFfaWQsIGluZGV4YXRpb25faWQsIHRhcmdldF9pZCwgc2VxbnVtX2lkZW50aXR5KSAKQ1JFQVRFIFRBQkxFIENvbXBvbmVudFJlbGF0aW9uKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCBOT1QgTlVMTCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgTk9UIE5VTEwgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgTk9UIE5VTEwgLCBjaGlsZF9jb21wb25lbnRfaWQgcmF3KDE2KSAsIGNoaWxkX3ZlcnNpb25fc2VyaWVzX2lkIHJhdygxNikgLCBwYXJlbnRfY29tcG9uZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBjb3B5X3RvX3Jlc2VydmF0aW9uIG51bWJlcigxKSBOT1QgTlVMTCAsIG5hbWUgdmFyY2hhcjIoNzY1KSAsIGxhYmVsX2JpbmRfdmFsdWUgdmFyY2hhcjIoMTkyKSAsIGNvbXBvbmVudF9yZWxhdGlvbnNoaXBfdHlwZSBudW1iZXIoMTApIE5PVCBOVUxMICwgdXJpX3ZhbHVlIGNsb2IgLCByZXBsaWNhdGlvbl9ncm91cF9pZCByYXcoMTYpICwgY29tcG9uZW50X3NvcnRfb3JkZXIgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIHZlcnNpb25fYmluZF90eXBlIG51bWJlcigxMCkgLCBjYXNjYWRlX2RlbGV0ZSBudW1iZXIoMTApIE5PVCBOVUxMICwgcHJldmVudF9kZWxldGUgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGNoaWxkX2NvbXBvbmVudF9pZF9ob21lIHJhdygxNikgLCBjaGlsZF92ZXJzaW9uX3Nlcmllc19pZF9ob21lIHJhdygxNikgKSAKQ1JFQVRFIElOREVYIElfQ29tcG9uZW50UmVsYXRpb242OSBPTiBDb21wb25lbnRSZWxhdGlvbiAoY2hpbGRfdmVyc2lvbl9zZXJpZXNfaWQpIApDUkVBVEUgSU5ERVggSV9Db21wb25lbnRSZWxhdGlvbjcwIE9OIENvbXBvbmVudFJlbGF0aW9uIChjaGlsZF9jb21wb25lbnRfaWQpIApDUkVBVEUgSU5ERVggSV9Db21wb25lbnRSZWxhdGlvbjcxIE9OIENvbXBvbmVudFJlbGF0aW9uIChwYXJlbnRfY29tcG9uZW50X2lkKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0NvbXBvbmVudFJlbGF0aW9uNzIgT04gQ29tcG9uZW50UmVsYXRpb24gKGNvbXBvbmVudF9zb3J0X29yZGVyLCBvYmplY3RfaWQpIApDUkVBVEUgVEFCTEUgUHVibGlzaFJlcXVlc3Qob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpICwgaG9tZV9pZCByYXcoMTYpICwgY3JlYXRvciB2YXJjaGFyMigyNDApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcjIoMjQwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIHB1Ymxpc2hpbmdfc3RhdHVzIG51bWJlcigxMCkgTk9UIE5VTEwgLCBzdGF0dXNfZGVzY3JpcHRpb24gdmFyY2hhcjIoNzY1KSAsIGlucHV0X2RvY3VtZW50IHJhdygxNikgTk9UIE5VTEwgLCBvdXRwdXRfZm9sZGVyIHJhdygxNikgTk9UIE5VTEwgLCBwdWJsaXNoX3JlcXVlc3RfdHlwZSBudW1iZXIoMTApICwgcHVibGlzaF90ZW1wbGF0ZSByYXcoMTYpIE5PVCBOVUxMICwgcHVibGljYXRpb25fZG9jdW1lbnQgcmF3KDE2KSAsIHB1Ymxpc2hfc3R5bGVfdGVtcGxhdGUgcmF3KDE2KSAsIGFwcGx5X2RlZmluaXRpb24gY2xvYiAsIGluaXRpYXRpbmdfdXNlciB2YXJjaGFyMig3NjUpICwgZXJyb3JfY29kZSB2YXJjaGFyMig3NjUpICwgZXJyb3JfZGVzY3JpcHRpb24gdmFyY2hhcjIoNzY1KSAsIHJldHJ5X2NvdW50IG51bWJlcigxMCkgTk9UIE5VTEwgLCBuZXh0X3JldHJ5X2RhdGUgdGltZXN0YW1wICwgZGVxdWV1ZV9ob3N0IHZhcmNoYXIyKDQ1KSAsIGxlYXNlX2V4cGlyeV9kYXRlIHRpbWVzdGFtcCApIApDUkVBVEUgSU5ERVggSV9QdWJsaXNoUmVxdWVzdDYwIE9OIFB1Ymxpc2hSZXF1ZXN0IChuZXh0X3JldHJ5X2RhdGUpIApDUkVBVEUgVEFCTEUgSGllcmFyY2h5SW5kZXgocGFyZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBjaGlsZF9pZCByYXcoMTYpIE5PVCBOVUxMICkgCkNSRUFURSBJTkRFWCBJX0hpZXJhcmNoeUluZGV4NjEgT04gSGllcmFyY2h5SW5kZXggKHBhcmVudF9pZCwgY2hpbGRfaWQpIApDUkVBVEUgSU5ERVggSV9IaWVyYXJjaHlJbmRleDYyIE9OIEhpZXJhcmNoeUluZGV4IChjaGlsZF9pZCkgCkNSRUFURSBUQUJMRSBJbmRleEpvYihvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgLCBob21lX2lkIHJhdygxNikgLCBjcmVhdG9yIHZhcmNoYXIyKDI0MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyMigyNDApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGVzY3JpcHRpb24gdmFyY2hhcjIoNzY1KSAsIHRpbWVfbGFzdF9wcm9jZXNzZWQgdGltZXN0YW1wICwgdGltZV9hbGxfc3VibWl0dGVkIHRpbWVzdGFtcCAsIGpvYl9zdGF0dXMgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGpvYl9hYm9ydF9yZXF1ZXN0ZWQgbnVtYmVyKDEpIE5PVCBOVUxMICwgc3VibWl0dGVkX2NvdW50IG51bWJlcigxMCkgLCBwaGFzZV9udW0gbnVtYmVyKDEwKSAsIGl0ZW1fbnVtIG51bWJlcigxMCkgLCBwcmlvcl9vYmplY3RfaWQgcmF3KDE2KSAsIGxhc3RfbWF4X3NlcV9udW0gbnVtYmVyKDIwKSAsIGFjdGl2ZV9zZXJ2ZXIgdmFyY2hhcjIoMzg0KSAsIHNlcmlhbGl6ZWRfZGF0YSBibG9iICwgam9iX3BhdXNlX3JlcXVlc3RlZCBudW1iZXIoMSkgLCBpc19taWdyYXRpb25fam9iIG51bWJlcigxKSAsIGxhc3RfZmFpbHVyZV9kZXNjIGNsb2IgLCBtYXhfcmVxdWVzdF9xdWV1ZV9zaXplIG51bWJlcigxMCkgKSAKQ1JFQVRFIFRBQkxFIEluZGV4Sm9iSXRlbShvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCByYXcoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBudW1iZXIoMTApIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHJhdygxNikgLCBpbmRleGF0aW9uX2lkIHJhdygxNikgLCBpbmRleF9hcmVhX2lkIHJhdygxNikgLCBjbGFzc19kZWZpbml0aW9uX2lkIHJhdygxNikgLCBzaW5nbGVfaXRlbV9pZCByYXcoMTYpICwgc2luZ2xlX2l0ZW1faWRfY2xhc3MgcmF3KDE2KSAsIGluY2x1ZGVfc3ViY2xhc3NlcyBudW1iZXIoMSkgLCByZXN5bmNfbW9kaWZpY2F0aW9uX2RhdGUgdGltZXN0YW1wICkgCkNSRUFURSBUQUJMRSBDb250ZW50UXVldWUob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZXFudW1faWRlbnRpdHkgbnVtYmVyKDIwKSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgbGVhc2VfZXhwaXJ5X2RhdGUgdGltZXN0YW1wIE5PVCBOVUxMICwgc2Vzc2lvbl9pZCByYXcoMTYpIE5PVCBOVUxMICwgZWxlbWVudF9zZXF1ZW5jZV9udW1iZXIgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGNvbW1hbmRfdHlwZSBudW1iZXIoMTApIE5PVCBOVUxMICwgcHJvY2Vzc19hdHRlbXB0cyBudW1iZXIoMTApICwgc291cmNlX29iamVjdF9pZCByYXcoMTYpICwgc3RvcmFnZV9hcmVhX2lkIHJhdygxNikgTk9UIE5VTEwgLCBjb250ZW50X3NpemUgbnVtYmVyIE5PVCBOVUxMICwgc2VyaWFsaXplZF9kYXRhIGJsb2IgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgTk9UIE5VTEwgKSAKQ1JFQVRFIElOREVYIElfQ29udGVudFF1ZXVlNjMgT04gQ29udGVudFF1ZXVlIChzZXNzaW9uX2lkKSAKQ1JFQVRFIElOREVYIElfQ29udGVudFF1ZXVlNjQgT04gQ29udGVudFF1ZXVlIChvYmplY3RfaWQpIApDUkVBVEUgSU5ERVggSV9Db250ZW50UXVldWU2NSBPTiBDb250ZW50UXVldWUgKGxlYXNlX2V4cGlyeV9kYXRlKSAKQ1JFQVRFIFRBQkxFIENvbnRlbnRVcGxvYWQoZWxlbWVudF9pZCB2YXJjaGFyMigxNDQpIE5PVCBOVUxMICwgb2Zmc2V0IG51bWJlcigxMCkgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBjb250ZW50IGJsb2IgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0NvbnRlbnRVcGxvYWQ2NiBPTiBDb250ZW50VXBsb2FkIChlbGVtZW50X2lkLCBvZmZzZXQpIApDUkVBVEUgVEFCTEUgRXh0ZXJuYWxJZGVudGl0eShvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCByYXcoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBudW1iZXIoMTApIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHJhdygxNikgLCByZXBvc2l0b3J5X2lkIHJhdygxNikgTk9UIE5VTEwgLCBleHRlcm5hbF9pZCB2YXJjaGFyMig3NjgpIE5PVCBOVUxMICwgcmVwbGljYXRpb25fZGF0YSBibG9iICkgCkNSRUFURSBJTkRFWCBJX0V4dGVybmFsSWRlbnRpdHk3NSBPTiBFeHRlcm5hbElkZW50aXR5IChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0V4dGVybmFsSWRlbnRpdHk3NiBPTiBFeHRlcm5hbElkZW50aXR5IChleHRlcm5hbF9pZCwgcmVwb3NpdG9yeV9pZCkgCkNSRUFURSBUQUJMRSBSZXBsaWNhdGlvblF1ZXVlKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBzb3VyY2Vfb2JqZWN0X2lkIHJhdygxNikgLCBzb3VyY2Vfb2JqZWN0X2lkX2NsYXNzIHJhdygxNikgLCBkZXN0aW5hdGlvbl9pZCByYXcoMTYpIE5PVCBOVUxMICwgZGVzdGluYXRpb25faWRfY2xhc3MgcmF3KDE2KSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHJhdygxNikgTk9UIE5VTEwgLCBvcGVyYXRpb24gbnVtYmVyKDEwKSAsIHNlcmlhbGl6ZWRfZGF0YSBibG9iICwgc2VxbnVtX2lkZW50aXR5IG51bWJlcigyMCkgTk9UIE5VTEwgLCBoZWxkX3VudGlsX2RhdGUgdGltZXN0YW1wICwgcmV0cnlfY291bnQgbnVtYmVyKDEwKSAsIGxlYXNlX2hvbGRlcl9pZCByYXcoMTYpICwgbGVhc2VfY291bnQgbnVtYmVyKDEwKSAsIHN0YXR1cyBudW1iZXIoMTApICwgbGFzdF9mYWlsdXJlX2Rlc2MgY2xvYiAsIGV4Y2x1c2lvbl9pZCByYXcoMTYpICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9SZXBsaWNhdGlvblF1ZXVlNzcgT04gUmVwbGljYXRpb25RdWV1ZSAoc2VxbnVtX2lkZW50aXR5KSAKQ1JFQVRFIFRBQkxFIEV4dGVybmFsQWxpYXMob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyByYXcoMTYpICwgZXh0ZXJuYWxfcmVwb19pZCByYXcoMTYpIE5PVCBOVUxMICwgYWxpYXNfZGlyZWN0aW9uIG51bWJlcigxMCkgTk9UIE5VTEwgLCBjbGFzc19pZGVudGl0eSB2YXJjaGFyMigzODQpIE5PVCBOVUxMICwgcHJvcGVydHlfaWRlbnRpdHkgdmFyY2hhcjIoMzg0KSApIApDUkVBVEUgSU5ERVggSV9FeHRlcm5hbEFsaWFzNzggT04gRXh0ZXJuYWxBbGlhcyAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgCkNSRUFURSBUQUJMRSBUYXNrKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCByZXBsaWNhdGlvbl9ncm91cF9pZCByYXcoMTYpICwgc3RhdGUgbnVtYmVyKDEwKSAsIGNvb3JkaW5hdG9yX2lkIHJhdygxNikgLCBjb29yZGluYXRvcl9pZF9jbGFzcyByYXcoMTYpICwgc3RhcnRfZGF0ZSB0aW1lc3RhbXAgLCBjb21wbGV0ZV9kYXRlIHRpbWVzdGFtcCAsIGxhc3RfZmFpbHVyZV9kZXNjIGNsb2IgLCByZWNvdmVyeV9pdGVtX2lkIHJhdygxNikgKSAKQ1JFQVRFIElOREVYIElfVGFzazgwIE9OIFRhc2sgKGNvb3JkaW5hdG9yX2lkKSAKQ1JFQVRFIFRBQkxFIFRhc2tSZWxhdGlvbnNoaXAob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHJhdygxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBudW1iZXIoMTApIE5PVCBOVUxMICwgaG9tZV9pZCByYXcoMTYpICwgY3JlYXRvciB2YXJjaGFyMigyNDApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcjIoMjQwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHJhdygxNikgLCBwcmVkZWNlc3Nvcl9pZCByYXcoMTYpICwgc3VjY2Vzc29yX2lkIHJhdygxNikgLCBkZWZpbmVzX2FsdF9wcmVkZWNlc3NvciBudW1iZXIoMSkgLCByZWNvdmVyeV9pdGVtX2lkIHJhdygxNikgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1Rhc2tSZWxhdGlvbnNoaXA4MSBPTiBUYXNrUmVsYXRpb25zaGlwIChwcmVkZWNlc3Nvcl9pZCwgc3VjY2Vzc29yX2lkKSAKQ1JFQVRFIElOREVYIElfVGFza1JlbGF0aW9uc2hpcDgyIE9OIFRhc2tSZWxhdGlvbnNoaXAgKHN1Y2Nlc3Nvcl9pZCkgCkNSRUFURSBUQUJMRSBUZXh0SW5kZXgob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyByYXcoMTYpICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgaW5kZXhfbmFtZSB2YXJjaGFyMigzOTk5KSBOT1QgTlVMTCAsIHN0YXR1cyBudW1iZXIoMTApIE5PVCBOVUxMICwgY3VycmVudF9pbmRleF9zZXJ2ZXIgcmF3KDE2KSAsIGxlYXNlX2V4cGlyeV90aW1lIHRpbWVzdGFtcCAsIGluZGV4X29iamVjdF9jb3VudCBudW1iZXIgLCBpbmRleF9zaXplX2tiIG51bWJlciAsIGluZGV4aW5nX3N0YXR1cyBudW1iZXIoMTApICwgcmVjZW50X29wc19zdWJtaXR0ZWQgbnVtYmVyKDEwKSAsIHJlY2VudF9vcHNfZHVyYXRpb24gbnVtYmVyICkgCkNSRUFURSBUQUJMRSBBdWRpdFBvbGljeShvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgLCBjcmVhdG9yIHZhcmNoYXIyKDI0MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyMigyNDApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgcmF3KDE2KSAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyMigxOTIpIE5PVCBOVUxMICwgaG9tZV9pZCByYXcoMTYpICwgZGlzcG9zaXRpb25fcnVsZSB2YXJjaGFyMig3NjUpICwgZW5hYmxlZF9ib29sIG51bWJlcigxKSBOT1QgTlVMTCAsIGNvbXBsZXRpb25fd2FpdF9pbnRlcnZhbCBudW1iZXIoMTApICkgCkNSRUFURSBUQUJMRSBBdWRpdFByb2Nlc3Npbmcob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHJhdygxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBudW1iZXIoMTApIE5PVCBOVUxMICwgY3JlYXRvciB2YXJjaGFyMigyNDApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcjIoMjQwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyMigxOTIpIE5PVCBOVUxMICwgaG9tZV9pZCByYXcoMTYpICwgbGFzdF9wcm9jZXNzZWQgbnVtYmVyIE5PVCBOVUxMICkgCkNSRUFURSBUQUJMRSBUZXh0SW5kZXhQYXJ0aXRpb24ob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyByYXcoMTYpICwgcGFydGl0aW9uX3Byb3BfbmFtZSB2YXJjaGFyMigzOTk5KSBOT1QgTlVMTCAsIGRhdGF0eXBlIG51bWJlcigxMCkgTk9UIE5VTEwgLCBwYXJ0aXRpb25fc3RhcnRfZGF0ZSB0aW1lc3RhbXAgLCBwYXJ0aXRpb25fZW5kX2RhdGUgdGltZXN0YW1wICwgcGFydGl0aW9uX3N0cmluZ192YWwgdmFyY2hhcjIoMzk5OSkgKSAKQ1JFQVRFIFRBQkxFIFByZXByb2Nlc3NvckRlZmluaXRpb24ob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyByYXcoMTYpICwgZGlzcGxheV9uYW1lIHZhcmNoYXIyKDE5MikgTk9UIE5VTEwgLCBlbmFibGVkX2Jvb2wgbnVtYmVyKDEpIE5PVCBOVUxMICwgYWN0aW9uX2lkIHJhdygxNikgTk9UIE5VTEwgKSAKQ1JFQVRFIFRBQkxFIFNjZkRhdGEoc2NmX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBiaW5hcnlfZGF0YSByYXcoNTEyKSApIApDUkVBVEUgVEFCTEUgSG9sZE9iamVjdChvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgLCBob21lX2lkIHJhdygxNikgLCBjcmVhdG9yIHZhcmNoYXIyKDI0MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyMigyNDApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmNoYXIyKDE5MikgLCBkZXNjcmlwdGlvbiB2YXJjaGFyMig3NjUpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgcmF3KDE2KSApIApDUkVBVEUgVEFCTEUgSG9sZFJlbGF0aW9uc2hpcChvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgLCBob21lX2lkIHJhdygxNikgLCBjcmVhdG9yIHZhcmNoYXIyKDI0MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyMigyNDApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgcmF3KDE2KSAsIGhvbGRfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGhlbGRfb2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgLCBoZWxkX29iamVjdF9pZF9jbGFzcyByYXcoMTYpIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9Ib2xkUmVsYXRpb25zaGlwODYgT04gSG9sZFJlbGF0aW9uc2hpcCAoaGVsZF9vYmplY3RfaWQsIGhvbGRfaWQpIApDUkVBVEUgVEFCTEUgU3dlZXAob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHJhdygxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBudW1iZXIoMTApIE5PVCBOVUxMICwgaG9tZV9pZCByYXcoMTYpICwgY3JlYXRvciB2YXJjaGFyMigyNDApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcjIoMjQwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyMigxOTIpICwgZGVzY3JpcHRpb24gdmFyY2hhcjIoNzY1KSAsIGxhc3Rfb2JqZWN0X2lkIHJhdygxNikgLCBoZWxkX3VudGlsX2RhdGUgdGltZXN0YW1wICwgc3RhcnRfZGF0ZSB0aW1lc3RhbXAgLCBlbmRfZGF0ZSB0aW1lc3RhbXAgLCBuZXh0X3N0YXJ0X3RpbWUgdGltZXN0YW1wICwgbWF4aW11bV93b3JrZXJzIG51bWJlcigxMCkgLCBpbnRlcl9zd2VlcF9kZWxheSBudW1iZXIoMTApICwgb2JqZWN0c19leGFtaW5lZCBudW1iZXIgLCBvYmplY3RzX3Byb2Nlc3NlZCBudW1iZXIgLCBvYmplY3RzX2ZhaWxlZCBudW1iZXIgLCBpc19lbmFibGVkIG51bWJlcigxKSAsIG1heGltdW1fZmFpbHVyZXMgbnVtYmVyKDEwKSAsIGVmZmVjdGl2ZV9iZWdpbl9kYXRlIHRpbWVzdGFtcCAsIGVmZmVjdGl2ZV9lbmRfZGF0ZSB0aW1lc3RhbXAgLCBzdG9yYWdlX3BvbGljeV9pZCByYXcoMTYpICwgc3dlZXBfdGFyZ2V0X2lkIHJhdygxNikgLCBpbmNsdWRlX3N1YmNsYXNzZXMgbnVtYmVyKDEpICwgZmlsdGVyX2V4cHJlc3Npb24gY2xvYiAsIGxlYXNlX2hvbGRlcl9pZCByYXcoMTYpICwgaW1hZ2VfZm9ybWF0IG51bWJlcigxMCkgLCBpbWFnZV9zaXplIG51bWJlcigxMCkgLCBpbWFnZV9jb2xvciBudW1iZXIoMTApICwgcmV0cnlfd2FpdF9pbnRlcnZhbCBudW1iZXIoMTApICwgYmF0Y2hfc2l6ZSBudW1iZXIoMTApICwgc3dlZXBfYWN0aW9uX2lkIHJhdygxNikgLCBjdXJyZW50X29iamVjdHNfZXhhbWluZWQgbnVtYmVyICwgY3VycmVudF9vYmplY3RzX3Byb2Nlc3NlZCBudW1iZXIgLCBjdXJyZW50X29iamVjdHNfZmFpbGVkIG51bWJlciAsIHJldGVudGlvbl9kdXJhdGlvbiBudW1iZXIoMTApICwgcmV0ZW50aW9uX3VwZGF0ZV90aW1lX3VuaXQgbnVtYmVyKDEwKSAsIHNwZWNpZmljX2RhdGUgdGltZXN0YW1wICwgYmFzZV9kYXRlX3Byb3BlcnR5X25hbWUgdmFyY2hhcjIoMTkyKSAsIGNvbXBsZXRlZF9pdGVyYXRpb25zIG51bWJlcigxMCkgLCByZWNvcmRfZmFpbHVyZXMgbnVtYmVyKDEpICwgZW5kX3JlcGxpY2F0aW9uX2FmdGVyX21vdmUgbnVtYmVyKDEpICwgaW50ZXJfYmF0Y2hfZGVsYXkgbnVtYmVyKDEwKSAsIHN3ZWVwX21vZGUgbnVtYmVyKDEwKSAsIHF1ZXJ5X3RpbWVvdXQgbnVtYmVyKDEwKSAsIGVmZmVjdGl2ZV9zcWwgY2xvYiAsIGxhc3RfZmFpbHVyZV9yZWFzb24gY2xvYiAsIGZhaWx1cmVfY291bnQgbnVtYmVyKDEwKSAsIHNlYXJjaF9jb250aW51YXRpb25fY29va2llIGNsb2IgLCBzZWFyY2hfb2JqZWN0X3N0b3JlX2lkIHJhdygxNikgLCBtYXhpbXVtX3Jvd19jb3VudCBudW1iZXIoMTApICwgY3VycmVudF9vYmplY3RzX2RlZmVycmVkIG51bWJlciAsIG9iamVjdHNfZGVmZXJyZWQgbnVtYmVyICwgY29weV9yZXRhaW5lZCBudW1iZXIoMSkgLCB1cGRhdGVfc3RvcmFnZV9wb2xpY3kgbnVtYmVyKDEpICkgCkNSRUFURSBUQUJMRSBTd2VlcFJlbGF0aW9uc2hpcChvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGVwb2NoX2lkIG51bWJlcigxMCkgTk9UIE5VTEwgLCBob21lX2lkIHJhdygxNikgLCBjcmVhdG9yIHZhcmNoYXIyKDI0MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyMigyNDApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgcG9saWN5X2lkIHJhdygxNikgLCBwb2xpY3lfaWRfY2xhc3MgcmF3KDE2KSAsIHN3ZWVwX2lkIHJhdygxNikgTk9UIE5VTEwgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1N3ZWVwUmVsYXRpb25zaGlwODcgT04gU3dlZXBSZWxhdGlvbnNoaXAgKHBvbGljeV9pZCwgc3dlZXBfaWQpIApDUkVBVEUgVEFCTEUgU3dlZXBQb2xpY3kob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHJhdygxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBudW1iZXIoMTApIE5PVCBOVUxMICwgaG9tZV9pZCByYXcoMTYpICwgY3JlYXRvciB2YXJjaGFyMigyNDApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcjIoMjQwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyMigxOTIpICwgZGVzY3JpcHRpb24gdmFyY2hhcjIoNzY1KSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHJhdygxNikgLCBpc19lbmFibGVkIG51bWJlcigxKSAsIGluY2x1ZGVfc3ViY2xhc3NlcyBudW1iZXIoMSkgLCBlZmZlY3RpdmVfYmVnaW5fZGF0ZSB0aW1lc3RhbXAgLCBlZmZlY3RpdmVfZW5kX2RhdGUgdGltZXN0YW1wICwgc3RvcmFnZV9wb2xpY3lfaWQgcmF3KDE2KSAsIGZpbHRlcl9leHByZXNzaW9uIGNsb2IgLCByZXRlbnRpb25fZHVyYXRpb24gbnVtYmVyKDEwKSAsIHN3ZWVwX3RhcmdldF9pZCByYXcoMTYpICwgc3BlY2lmaWNfZGF0ZSB0aW1lc3RhbXAgLCBiYXNlX2RhdGVfcHJvcGVydHlfbmFtZSB2YXJjaGFyMigxOTIpICwgcmV0ZW50aW9uX3VwZGF0ZV90aW1lX3VuaXQgbnVtYmVyKDEwKSAsIG9iamVjdHNfZXhhbWluZWQgbnVtYmVyICwgb2JqZWN0c19wcm9jZXNzZWQgbnVtYmVyICwgc3dlZXBfYWN0aW9uX2lkIHJhdygxNikgLCBvYmplY3RzX2ZhaWxlZCBudW1iZXIgLCBjdXJyZW50X29iamVjdHNfZXhhbWluZWQgbnVtYmVyICwgY3VycmVudF9vYmplY3RzX3Byb2Nlc3NlZCBudW1iZXIgLCBjdXJyZW50X29iamVjdHNfZmFpbGVkIG51bWJlciAsIGNvbXBsZXRlZF9pdGVyYXRpb25zIG51bWJlcigxMCkgLCBmYWlsX3JlY29yZF9pdGVyYXRpb25fa2VlcCBudW1iZXIoMTApICwgZW5kX3JlcGxpY2F0aW9uX2FmdGVyX21vdmUgbnVtYmVyKDEpICwgc3dlZXBfbW9kZSBudW1iZXIoMTApICwgdXBkYXRlX3N0b3JhZ2VfcG9saWN5IG51bWJlcigxKSAsIGF1dGhvcml6YXRpb25fbW9kZSBudW1iZXIoMTApICkgCkNSRUFURSBUQUJMRSBUaHVtYm5haWwob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHJhdygxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBudW1iZXIoMTApIE5PVCBOVUxMICwgaG9tZV9pZCByYXcoMTYpICwgY3JlYXRvciB2YXJjaGFyMigyNDApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcjIoMjQwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHJhdygxNikgLCBpbnB1dF9kb2N1bWVudCByYXcoMTYpICwgZWxlbWVudF9zZXF1ZW5jZV9udW1iZXIgbnVtYmVyKDEwKSAsIGltYWdlIGJsb2IgLCBpbWFnZV9zaXplIG51bWJlcigxMCkgLCBtaW1lX3R5cGUgdmFyY2hhcjIoMjg4KSAsIGlzX3N5c3RlbV9nZW5lcmF0ZWQgbnVtYmVyKDEpICwgcmVjb3ZlcnlfaXRlbV9pZCByYXcoMTYpICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9UaHVtYm5haWw4OCBPTiBUaHVtYm5haWwgKGlucHV0X2RvY3VtZW50LCBlbGVtZW50X3NlcXVlbmNlX251bWJlcikgCkNSRUFURSBUQUJMRSBUaHVtYm5haWxSZXF1ZXN0KG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBoZWxkX3VudGlsX2RhdGUgdGltZXN0YW1wICwgbGVhc2VfaG9sZGVyX2lkIHJhdygxNikgLCBmYWlsdXJlX2NvdW50IG51bWJlcigxMCkgLCBsYXN0X2ZhaWx1cmVfcmVhc29uIGNsb2IgLCBlbnRyeV9zdGF0dXMgbnVtYmVyKDEwKSAsIGRlZmVycmFsX2NvdW50IG51bWJlcigxMCkgLCBkZWZlcnJhbF9kYXRhIGJsb2IgLCBpbnB1dF9kb2N1bWVudCByYXcoMTYpICwgZWxlbWVudF9zZXF1ZW5jZV9udW1iZXIgbnVtYmVyKDEwKSApIApDUkVBVEUgSU5ERVggSV9UaHVtYm5haWxSZXF1ZXN0OTMgT04gVGh1bWJuYWlsUmVxdWVzdCAobGVhc2VfaG9sZGVyX2lkKSAKQ1JFQVRFIFRBQkxFIFJlY292ZXJ5QmluKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBkaXNwbGF5X25hbWUgdmFyY2hhcjIoMTkyKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSApIApDUkVBVEUgVEFCTEUgUmVjb3ZlcnlJdGVtKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBob21lX2lkIHJhdygxNikgLCByZWNvdmVyeV9iaW5faWQgcmF3KDE2KSAsIGRlbGV0ZWRfb2JqZWN0X2Jsb2IgYmxvYiAsIGNsZWFudXBfY29tbWFuZHMgYmxvYiAsIHJlY292ZXJhYmxlX2NvdW50IG51bWJlcigxMCkgLCBvcmlnaW5hbF9vYmplY3RfaWQgcmF3KDE2KSAsIG9yaWdpbmFsX2NsYXNzX2lkIHJhdygxNikgLCBvcmlnaW5hbF9uYW1lIHZhcmNoYXIyKDc2NSkgLCBvcmlnaW5hbF9jcmVhdG9yIHZhcmNoYXIyKDI0MCkgLCBvcmlnaW5hbF9jcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBvcmlnaW5hbF9tb2RpZnlfdXNlciB2YXJjaGFyMigyNDApICwgb3JpZ2luYWxfbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgb3JpZ2luYWxfb2JqZWN0X2lkX2NsYXNzIHJhdygxNikgKSAKQ1JFQVRFIElOREVYIElfUmVjb3ZlcnlJdGVtODkgT04gUmVjb3ZlcnlJdGVtIChyZWNvdmVyeV9iaW5faWQpIApDUkVBVEUgVEFCTEUgVGltZXNsb3Qob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyByYXcoMTYpICwgc2xvdF93ZWVrZGF5IG51bWJlcigxMCkgLCBzdGFydF9taW5zX3Bhc3RfbWlkbmlnaHQgbnVtYmVyKDEwKSAsIHNsb3RfZHVyYXRpb24gbnVtYmVyKDEwKSApIApDUkVBVEUgSU5ERVggSV9UaW1lc2xvdDkwIE9OIFRpbWVzbG90IChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFRBQkxFIFN3ZWVwUmVzdWx0KG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBzb3VyY2Vfb2JqZWN0X2lkIHJhdygxNikgLCBzb3VyY2Vfb2JqZWN0X2lkX2NsYXNzIHJhdygxNikgLCBjb250cm9sbGluZ19vYmplY3RfaWQgcmF3KDE2KSAsIGNvbnRyb2xsaW5nX29iamVjdF9pZF9jbGFzcyByYXcoMTYpICwgZmFpbHVyZV9kZXNjcmlwdGlvbiB2YXJjaGFyMigzMDcyKSAsIGl0ZXJhdGlvbl9udW1iZXIgbnVtYmVyKDEwKSAsIHN3ZWVwX3Jlc3VsdF90eXBlIG51bWJlcigxMCkgKSAKQ1JFQVRFIFRBQkxFIEFkZE9uUmVjb3JkKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHJhdygxNikgTk9UIE5VTEwgLCBvcmRpbmFsIG51bWJlcigxMCkgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgcmF3KDE2KSAsIGluc3RhbGxlciB2YXJjaGFyMigyNDApICwgaW5zdGFsbF9kYXRlIHRpbWVzdGFtcCAsIGluc3RhbGxfc3RhdHVzIG51bWJlcigxMCkgLCBpbnN0YWxsX3JlcG9ydCBjbG9iICwgYWRkb25faWQgcmF3KDE2KSApIApDUkVBVEUgVEFCTEUgSW5kZXhlZENvbHVtbihvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCByYXcoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBudW1iZXIoMTApIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHJhdygxNikgLCB0YWJsZV9pZCByYXcoMTYpIE5PVCBOVUxMICwgY29sdW1uX25hbWUgdmFyY2hhcjIoOTApIE5PVCBOVUxMICwgc29ydF9vcmRlciBudW1iZXIoMTApIE5PVCBOVUxMICkgCkNSRUFURSBUQUJMRSBJbmRleERlZmluaXRpb24ob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIG9yZGluYWwgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyByYXcoMTYpICwgaW5kZXhfbmFtZSB2YXJjaGFyMigzODQpIE5PVCBOVUxMICwgc3lzX293bmVkX2Jvb2wgbnVtYmVyKDEpIE5PVCBOVUxMICwgc3RvcmFnZV9sb2NhdGlvbiB2YXJjaGFyMigzODQpICwgdW5pcXVlX2Jvb2wgbnVtYmVyKDEpIE5PVCBOVUxMICwgY2FzZV9pbnNlbnNpdGl2ZSBudW1iZXIoMSkgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0luZGV4RGVmaW5pdGlvbjk2IE9OIEluZGV4RGVmaW5pdGlvbiAoaW5kZXhfbmFtZSkgCkNSRUFURSBUQUJMRSBTdG9yYWdlRGV2aWNlKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpIE5PVCBOVUxMICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBkaXNwbGF5X25hbWUgdmFyY2hhcjIoMTkyKSBOT1QgTlVMTCAsIGRlc2NyaXB0aW9uIHZhcmNoYXIyKDc2NSkgLCBzaXRlX2lkIHJhdygxNikgLCBwcm9nX2lkX3N0cmluZyB2YXJjaGFyMig3NjUpICwgY29kZV9tb2R1bGVfaWQgcmF3KDE2KSAsIGZzX2Fkc19wYXRoIHZhcmNoYXIyKDM2MDApICwgdG9wX25vZGVzIG51bWJlcigxMCkgLCBib3R0b21fbm9kZXMgbnVtYmVyKDEwKSAsIHVzZXJuYW1lIHZhcmNoYXIyKDM4NCkgLCBwYXNzd29yZCByYXcoMTI4KSAsIGRldmljZV91cmwgdmFyY2hhcjIoMzA3MikgLCBhdXRoZW50aWNhdGlvbl91cmwgdmFyY2hhcjIoMzA3MikgLCBjb250YWluZXJfbmFtZSB2YXJjaGFyMigzODQpICwgc3luY19yZXBsX3N1cHBvcnRlZCBudW1iZXIoMSkgLCBkZWxldGVfbWV0aG9kX3N1cHBvcnRlZCBudW1iZXIoMTApICwgY2VydF92YWxpZGF0aW9uIG51bWJlcigxKSAsIHJlZ2lvbl9uYW1lIHZhcmNoYXIyKDM4NCkgLCBzZWN1cml0eV90b2tlbiBibG9iICkgCkNSRUFURSBUQUJMRSBEZXZpY2VDb25uZWN0aW9uKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHJhdygxNikgTk9UIE5VTEwgLCBvcmRpbmFsIG51bWJlcigxMCkgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgcmF3KDE2KSAsIGRldmljZV9pZCByYXcoMTYpICwgcmVwbGljYV90eXBlIG51bWJlcigxMCkgKSAKQ1JFQVRFIElOREVYIElfRGV2aWNlQ29ubmVjdGlvbjk3IE9OIERldmljZUNvbm5lY3Rpb24gKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpIApDUkVBVEUgVEFCTEUgU2l0ZVNldHRpbmdzKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHJhdygxNikgTk9UIE5VTEwgLCBvcmRpbmFsIG51bWJlcigxMCkgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgcmF3KDE2KSAsIHNpdGVfaWQgcmF3KDE2KSAsIHJlcGxpY2FfdHlwZSBudW1iZXIoMTApICkgCkNSRUFURSBJTkRFWCBJX1NpdGVTZXR0aW5nczk4IE9OIFNpdGVTZXR0aW5ncyAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgCkNSRUFURSBUQUJMRSBDb250ZW50QmFja291dFF1ZXVlKG9iamVjdF9pZCByYXcoMTYpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICwgb2JqZWN0X2NsYXNzX2lkIHJhdygxNikgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCByYXcoMTYpICwgZXBvY2hfaWQgbnVtYmVyKDEwKSBOT1QgTlVMTCAsIGhvbWVfaWQgcmF3KDE2KSAsIGNyZWF0b3IgdmFyY2hhcjIoMjQwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIyKDI0MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBoZWxkX3VudGlsX2RhdGUgdGltZXN0YW1wICwgbGVhc2VfaG9sZGVyX2lkIHJhdygxNikgLCBmYWlsdXJlX2NvdW50IG51bWJlcigxMCkgLCBsYXN0X2ZhaWx1cmVfcmVhc29uIGNsb2IgLCBlbnRyeV9zdGF0dXMgbnVtYmVyKDEwKSAsIGRlZmVycmFsX2NvdW50IG51bWJlcigxMCkgLCBkZWZlcnJhbF9kYXRhIGJsb2IgLCBleHBpcmF0aW9uX3RpbWUgdGltZXN0YW1wICwgc3RvcmFnZV9hcmVhX2lkIHJhdygxNikgLCBiYXRjaF9pZCByYXcoMTYpICwgb3BlcmF0aW9uX2RhdGEgYmxvYiAsIHJlcGxpY2FfZGF0YSBibG9iICkgCkNSRUFURSBJTkRFWCBJX0NvbnRlbnRCYWNrb3V0UXVldWU5OSBPTiBDb250ZW50QmFja291dFF1ZXVlIChsZWFzZV9ob2xkZXJfaWQpIApDUkVBVEUgVEFCTEUgQ29udGVudERlbGV0aW9uUXVldWUob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHJhdygxNikgLCBlcG9jaF9pZCBudW1iZXIoMTApIE5PVCBOVUxMICwgaG9tZV9pZCByYXcoMTYpICwgY3JlYXRvciB2YXJjaGFyMigyNDApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcjIoMjQwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGhlbGRfdW50aWxfZGF0ZSB0aW1lc3RhbXAgLCBsZWFzZV9ob2xkZXJfaWQgcmF3KDE2KSAsIGZhaWx1cmVfY291bnQgbnVtYmVyKDEwKSAsIGxhc3RfZmFpbHVyZV9yZWFzb24gY2xvYiAsIGVudHJ5X3N0YXR1cyBudW1iZXIoMTApICwgZGVmZXJyYWxfY291bnQgbnVtYmVyKDEwKSAsIGRlZmVycmFsX2RhdGEgYmxvYiAsIHJlcGxpY2FfZGF0YSBibG9iICwgb3BlcmF0aW9uX2RhdGEgYmxvYiAsIHN0b3JhZ2VfYXJlYV9pZCByYXcoMTYpICkgCkNSRUFURSBJTkRFWCBJX0NvbnRlbnREZWxldGlvblF1ZXVlMTAwIE9OIENvbnRlbnREZWxldGlvblF1ZXVlIChsZWFzZV9ob2xkZXJfaWQpIApDUkVBVEUgVEFCTEUgQ29udGVudFJlcGxpY2F0aW9uUXVldWUob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHJhdygxNikgLCBlcG9jaF9pZCBudW1iZXIoMTApIE5PVCBOVUxMICwgaG9tZV9pZCByYXcoMTYpICwgY3JlYXRvciB2YXJjaGFyMigyNDApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcjIoMjQwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGhlbGRfdW50aWxfZGF0ZSB0aW1lc3RhbXAgLCBsZWFzZV9ob2xkZXJfaWQgcmF3KDE2KSAsIGZhaWx1cmVfY291bnQgbnVtYmVyKDEwKSAsIGxhc3RfZmFpbHVyZV9yZWFzb24gY2xvYiAsIGVudHJ5X3N0YXR1cyBudW1iZXIoMTApICwgZGVmZXJyYWxfY291bnQgbnVtYmVyKDEwKSAsIGRlZmVycmFsX2RhdGEgYmxvYiAsIGNvbnRlbnRfaWQgcmF3KDE2KSAsIGhhc2hfc2VxdWVuY2UgbnVtYmVyICwgc3RvcmFnZV9hcmVhX2lkIHJhdygxNikgLCByZXBsaWNhX2RhdGEgYmxvYiAsIGNvbnRlbnRfc2l6ZSBudW1iZXIgLCBzaWduYXR1cmUgcmF3KDMyKSAsIG9wZXJhdGlvbl9kYXRhIGJsb2IgKSAKQ1JFQVRFIElOREVYIElfQ29udGVudFJlcGxpY2F0aW9uUXVldWUxMDEgT04gQ29udGVudFJlcGxpY2F0aW9uUXVldWUgKGxlYXNlX2hvbGRlcl9pZCkgCkNSRUFURSBUQUJMRSBTaWRUb0d1aWQob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBzaWQgcmF3KDc1MCkgTk9UIE5VTEwgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1NpZFRvR3VpZDEwMyBPTiBTaWRUb0d1aWQgKHNpZCkgCkNSRUFURSBUQUJMRSBDb252ZXJzaW9uU2V0dGluZ3Mob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHJhdygxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBudW1iZXIoMTApIE5PVCBOVUxMICwgaG9tZV9pZCByYXcoMTYpICwgY3JlYXRvciB2YXJjaGFyMigyNDApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcjIoMjQwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyMigxOTIpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgcmF3KDE2KSAsIHJlY292ZXJ5X2l0ZW1faWQgcmF3KDE2KSApIApDUkVBVEUgVEFCTEUgUm9sZUFjY2Vzc0RlZihvYmplY3RfaWQgcmF3KDE2KSBOT1QgTlVMTCBQUklNQVJZIEtFWSAsIG9iamVjdF9jbGFzc19pZCByYXcoMTYpIE5PVCBOVUxMICwgcGFyZW50X2lkIHJhdygxNikgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCByYXcoMTYpIE5PVCBOVUxMICwgb3JkaW5hbCBudW1iZXIoMTApIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHJhdygxNikgLCBhY2Nlc3NfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIGFjY2Vzc19tYXNrIG51bWJlcigxMCkgKSAKQ1JFQVRFIElOREVYIElfUm9sZUFjY2Vzc0RlZjEwNSBPTiBSb2xlQWNjZXNzRGVmIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAKQ1JFQVRFIFRBQkxFIFJvbGVPYmplY3Qob2JqZWN0X2lkIHJhdygxNikgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBvYmplY3RfY2xhc3NfaWQgcmF3KDE2KSBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHJhdygxNikgTk9UIE5VTEwgLCBlcG9jaF9pZCBudW1iZXIoMTApIE5PVCBOVUxMICwgaG9tZV9pZCByYXcoMTYpICwgY3JlYXRvciB2YXJjaGFyMigyNDApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcjIoMjQwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyMigxOTIpIE5PVCBOVUxMICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgcmF3KDE2KSAsIHJlY292ZXJ5X2l0ZW1faWQgcmF3KDE2KSAsIHNlcmlhbGl6ZWRfZGF0YSBibG9iICwgY2FjaGVfdXNuIG51bWJlcigyMCkgLCB1c25faW5kZXggbnVtYmVyKDEwKSAsIGRlc2NyaXB0aW9uIHZhcmNoYXIyKDc2NSkgKSAKQ1JFQVRFIElOREVYIElfUm9sZU9iamVjdDEwNiBPTiBSb2xlT2JqZWN0ICh1c25faW5kZXgsIGNhY2hlX3Vzbiwgb2JqZWN0X2lkLCBlcG9jaF9pZCkgCkNSRUFURSBUQUJMRSBSb2xlQ2FjaGVVU04odXNuX2luZGV4IG51bWJlcigxMCkgTk9UIE5VTEwgUFJJTUFSWSBLRVkgLCBjYWNoZV91c24gbnVtYmVyKDIwKSBOT1QgTlVMTCApIApDUkVBVEUgU0VRVUVOQ0UgQ0lTZXF1ZW5jZSBJTkNSRU1FTlQgQlkgMSBTVEFSVCBXSVRIIDEgTk9NQVhWQUxVRSBOT0NZQ0xFIENBQ0hFIDEwMDAgT1JERVIgCkNSRUFURSBTRVFVRU5DRSBDb250ZW50UXVldWVTZXF1ZW5jZSBJTkNSRU1FTlQgQlkgMSBTVEFSVCBXSVRIIDEgTk9NQVhWQUxVRSBOT0NZQ0xFIENBQ0hFIDEwMDAgT1JERVIgCkNSRUFURSBTRVFVRU5DRSBSZXBsU2VxdWVuY2UgSU5DUkVNRU5UIEJZIDEgU1RBUlQgV0lUSCAxIE5PTUFYVkFMVUUgTk9DWUNMRSBDQUNIRSAxMDAwIE9SREVSIApDUkVBVEUgU0VRVUVOQ0UgQXVkaXRTZXF1ZW5jZSBJTkNSRU1FTlQgQlkgMSBTVEFSVCBXSVRIIDEgTk9NQVhWQUxVRSBOT0NZQ0xFIENBQ0hFIDEwMDAgT1JERVIgCkNSRUFURSBTRVFVRU5DRSBTY2ZTZXF1ZW5jZSBJTkNSRU1FTlQgQlkgMSBTVEFSVCBXSVRIIDEgTk9NQVhWQUxVRSBOT0NZQ0xFIENBQ0hFIDEwMDAgT1JERVIgCncEAEEAB3QAHkRJVEFSZW5kaXRpb25FbmdpbmVDb25uZWN0aW9uc3cGAAkHBQIEcQB+AAp1cQB+AAsAAAAQF2/QfVj1QE6dp4KbJyaH83EAfgBSdwQAAQAIdAAbT2JqZWN0U3RvcmVTY2hlbWFQb3N0Z3JlU1FMdLHvLS0gR2VuZXJhdGVkIGZvciBQb3N0Z3JlU1FMIGRhdGFiYXNlcyBvbjogVGh1IFNlcCAwNSAxNzo0MDozNiBDRFQgMjAxOQotLSBUaGUgZm9sbG93aW5nIFNjaGVtYVJldmlzaW9uIGNvbW1lbnQgbXVzdCBiZSBwcmVzZW50IGFuZCBtdXN0IGNvcnJlc3BvbmQgdG8KLS0gdGhlIHByb3BlciBzY2hlbWEgcmV2aXNpb24gbGV2ZWwgYXQgdGhlIHRpbWUgdGhlIE9iamVjdFN0b3JlIGlzIGNyZWF0ZWQuCi0tIFNjaGVtYVJldmlzaW9uOiAyNC4xLjUKLS0gCkNSRUFURSBUQUJMRSBEb2NWZXJzaW9uKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBzdG9yYWdlX2NsYXNzIHV1aWQgLCBpc19yZXNlcnZlZCBzbWFsbGludCBOT1QgTlVMTCAsIGlzX2N1cnJlbnQgc21hbGxpbnQgTk9UIE5VTEwgLCBpc19mcm96ZW4gc21hbGxpbnQgTk9UIE5VTEwgLCB2ZXJzaW9uX3Nlcmllc19pZCB1dWlkIE5PVCBOVUxMICwgY29udGVudF9zaXplIGRvdWJsZSBwcmVjaXNpb24gLCBsb2NrX3Rva2VuIHV1aWQgLCBsb2NrX3RpbWVvdXQgaW50ZWdlciAsIGxvY2tfb3duZXIgdmFyY2hhcig2NCkgLCBkb2NfbGlmZWN5Y2xlX3BvbGljeSB1dWlkICwgZG9jX3N0YXRlIHZhcmNoYXIoNjQpICwgaXNfaW5fZXhjZXB0aW9uX3N0YXRlIHNtYWxsaW50ICwgc3RvcmFnZV9sb2NhdGlvbiB2YXJjaGFyKDEpICwgY29tcG9uZW50X3R5cGVzIGJ5dGVhICwgcmV0cmlldmFsX25hbWVzIGJ5dGVhICwgY29tcG9uZW50X3R5cGVzXzIgYnl0ZWEgLCByZXRyaWV2YWxfbmFtZXNfMiBieXRlYSAsIG1pbWVfdHlwZSB2YXJjaGFyKDk2KSAsIGNvbnRlbnRfaW5mbyBieXRlYSAsIGNvbnRlbnRfaW5mb18yIGJ5dGVhICwgbmV4dF9jb250ZW50X3VuaXF1ZV9pZCBpbnRlZ2VyICwgdndfdmVyc2lvbiB2YXJjaGFyKDI1NSkgLCB2ZXJzaW9uaW5nX2VuYWJsZWQgc21hbGxpbnQgTk9UIE5VTEwgLCB4bWxfZG9jX3R5cGUgdmFyY2hhcigyNTYpICwgeG1sX3RhcmdldF9jbGFzcyB1dWlkICwgY2xhc3NpZmljYXRpb25fc3RhdGUgaW50ZWdlciAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHV1aWQgLCByZWNvdmVyeV9pdGVtX2lkIHV1aWQgLCBsb2NrX3NpZCBieXRlYSAsIG1ham9yX3ZlcnNpb25fbnVtYmVyIGludGVnZXIgTk9UIE5VTEwgLCBtaW5vcl92ZXJzaW9uX251bWJlciBpbnRlZ2VyIE5PVCBOVUxMICwgdmVyc2lvbl9zdGF0dXMgaW50ZWdlciBOT1QgTlVMTCAsIHNlY3VyaXR5X3BvbGljeV9pZCB1dWlkICwgcmVzZXJ2YXRpb25fdHlwZSBpbnRlZ2VyICwgcmVzZXJ2YXRpb25fb3duZXJfc2lkIGJ5dGVhICwgY29udGVudF9sYXN0X2FjY2Vzc2VkX2RhdGUgdGltZXN0YW1wICwgY29udGVudF9yZWZlcnJhbF9ibG9iIGJ5dGVhICwgY29udGVudF9yZXRlbnRpb25fZGF0ZSB0aW1lc3RhbXAgLCBzdG9yYWdlX2FyZWFfaWQgdXVpZCAsIGluZGV4YXRpb25faWQgdXVpZCAsIGluZGV4X2ZhaWx1cmVfY29kZSBpbnRlZ2VyICwgY29tcG91bmRfZG9jdW1lbnRfc3RhdGUgaW50ZWdlciAsIGR5bmFtaWNfY3JfdXBkYXRlX3N0YXR1cyBpbnRlZ2VyICwgc2VjdXJpdHlfZm9sZGVyX2lkIHV1aWQgLCBjaGVja2VkX2luX2RhdGUgdGltZXN0YW1wICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9Eb2NWZXJzaW9uMjIgT04gRG9jVmVyc2lvbiAodmVyc2lvbl9zZXJpZXNfaWQsIG1ham9yX3ZlcnNpb25fbnVtYmVyIERFU0MsIG1pbm9yX3ZlcnNpb25fbnVtYmVyIERFU0MpICAKQ1JFQVRFIElOREVYIElfRG9jVmVyc2lvbjczIE9OIERvY1ZlcnNpb24gKHNlY3VyaXR5X2ZvbGRlcl9pZCkgIApDUkVBVEUgVEFCTEUgQ29udGVudChlbGVtZW50X2lkIHZhcmNoYXIoNDgpIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIGV4dGVuc2lvbiB2YXJjaGFyKDMpICwgY29udGVudCBieXRlYSAsIGNvbnRlbnRfc2l6ZSBpbnRlZ2VyIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgcmVmY291bnQgaW50ZWdlciAsIHNjZl9kYXRhIGJ5dGVhICkgCkNSRUFURSBUQUJMRSBHZW5lcmljKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBsb2NrX3Rva2VuIHV1aWQgLCBsb2NrX3RpbWVvdXQgaW50ZWdlciAsIGxvY2tfb3duZXIgdmFyY2hhcig2NCkgLCBsb2NrX3NpZCBieXRlYSAsIHNlY3VyaXR5X3BvbGljeV9pZCB1dWlkICwgaW5kZXhhdGlvbl9pZCB1dWlkICwgaW5kZXhfZmFpbHVyZV9jb2RlIGludGVnZXIgLCBzZWN1cml0eV9mb2xkZXJfaWQgdXVpZCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHV1aWQgLCByZXRlbnRpb25fZGF0ZSB0aW1lc3RhbXAgLCByZWNvdmVyeV9pdGVtX2lkIHV1aWQgKSAKQ1JFQVRFIElOREVYIElfR2VuZXJpYzc0IE9OIEdlbmVyaWMgKHNlY3VyaXR5X2ZvbGRlcl9pZCkgIApDUkVBVEUgVEFCTEUgQ2xhc3NEZWZpbml0aW9uKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBzdXBlcmNsYXNzX2lkIHV1aWQgLCByb290X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBzdXBfdXNlcl9pbnN0YW5jZXMgc21hbGxpbnQgTk9UIE5VTEwgLCBwZXJzaXN0ZW50X2Jvb2wgc21hbGxpbnQgTk9UIE5VTEwgLCBzeXNfb3duZWRfYm9vbCBzbWFsbGludCBOT1QgTlVMTCAsIHRhYmxlX2lkIHV1aWQgLCBzdXBfdXNlcl9zdWJjbGFzc2VzIHNtYWxsaW50IE5PVCBOVUxMICwgZGVmYXVsdF9pbnN0YW5jZV9zZWN1cml0eV9pZCB1dWlkIE5PVCBOVUxMICwgc3VwX3VzZXJfcHJvcHMgc21hbGxpbnQgTk9UIE5VTEwgLCBzeW1ib2xpY19uYW1lIHZhcmNoYXIoNjQpICwgaXNfaGlkZGVuIHNtYWxsaW50ICwgaXNfY2JyX2VuYWJsZWQgc21hbGxpbnQgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1dWlkICwgYWRkb25faWQgdXVpZCAsIHJldGVudGlvbl9wZXJpb2QgaW50ZWdlciAsIHJldGVudGlvbl91bml0cyBpbnRlZ2VyICwgYWN0aW9uX2lkIHV1aWQgKSAKQ1JFQVRFIElOREVYIElfQ2xhc3NEZWZpbml0aW9uMjkgT04gQ2xhc3NEZWZpbml0aW9uIChzdXBlcmNsYXNzX2lkKSAgCkNSRUFURSBUQUJMRSBHbG9iYWxQcm9wZXJ0eURlZihvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB1dWlkICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGF0YXR5cGUgaW50ZWdlciBOT1QgTlVMTCAsIGNhcmRpbmFsaXR5IGludGVnZXIgTk9UIE5VTEwgLCB2YWx1ZV9yZXF1aXJlZF9ib29sIHNtYWxsaW50ICwgaGlkZGVuX2Jvb2wgc21hbGxpbnQgLCBuYW1lX3Byb3BlcnR5X2Jvb2wgc21hbGxpbnQgLCBtYXhfbGVuZ3RoX3N0cmluZyBpbnRlZ2VyICwgbWF4X2xlbmd0aF9iaW5hcnkgaW50ZWdlciAsIGRlZmF1bHRfYmluYXJ5IGJ5dGVhICwgZGVmYXVsdF9ib29sIHNtYWxsaW50ICwgZGVmYXVsdF9kYXRldGltZSB0aW1lc3RhbXAgLCBkZWZhdWx0X2lkIHV1aWQgLCBkZWZhdWx0X2ludDMyIGludGVnZXIgLCBkZWZhdWx0X2Zsb2F0NjQgZG91YmxlIHByZWNpc2lvbiAsIGRlZmF1bHRfc3RyaW5nIHZhcmNoYXIoNDAwMCkgLCBtaW5pbXVtX2RhdGV0aW1lIHRpbWVzdGFtcCAsIG1pbmltdW1faW50MzIgaW50ZWdlciAsIG1pbmltdW1fZmxvYXQ2NCBkb3VibGUgcHJlY2lzaW9uICwgbWF4aW11bV9kYXRldGltZSB0aW1lc3RhbXAgLCBtYXhpbXVtX2ludDMyIGludGVnZXIgLCBtYXhpbXVtX2Zsb2F0NjQgZG91YmxlIHByZWNpc2lvbiAsIGN2bF9pZCB1dWlkICwgbGlzdF9pc19zZXRfYm9vbCBzbWFsbGludCAsIHN5bWJvbGljX25hbWUgdmFyY2hhcig2NCkgLCBzZXR0YWJpbGl0eSBpbnRlZ2VyICwgZGlzcGxheV9jYXRlZ29yeSB2YXJjaGFyKDY0KSAsIG1vZGlmaWNhdGlvbl9hY2Nlc3MgaW50ZWdlciAsIGFsbG93c19mb3JlaWduX29iamVjdCBzbWFsbGludCAsIHNlY3VyaXR5X3Byb3h5X3R5cGUgaW50ZWdlciAsIG1hcmtpbmdfc2V0X2lkIHV1aWQgLCB1c2VfbG9uZ19jb2x1bW4gc21hbGxpbnQgLCBwZXJzaXN0ZW5jZV90eXBlIGludGVnZXIgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1dWlkICwgYWRkb25faWQgdXVpZCAsIGF1ZGl0X2FzX2lkIHV1aWQgLCBsb25nX2RlZmF1bHRfc3RyaW5nIHRleHQgLCBkYXRlX29ubHlfYm9vbCBzbWFsbGludCAsIHJlYWRfcHJvdGVjdGVkX2Jvb2wgc21hbGxpbnQgLCBjYnJfcHJvcGFnYXRpb24gaW50ZWdlciApIApDUkVBVEUgVEFCTEUgUHJvcGVydHlEZWZpbml0aW9uKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1dWlkIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHV1aWQgLCBkYmdfZGlzcGxheV9uYW1lIHZhcmNoYXIoMzIpICwgZGJnX2NsYXNzX25hbWUgdmFyY2hhcigzMikgLCBzeXNfb3duZWRfYm9vbCBzbWFsbGludCBOT1QgTlVMTCAsIHByaW1hcnlfaWQgdXVpZCBOT1QgTlVMTCAsIGdsb2JhbF9wcm9wX2lkIHV1aWQgLCBpbmhlcml0ZWRfYm9vbCBzbWFsbGludCBOT1QgTlVMTCAsIGRhdGF0eXBlIGludGVnZXIgTk9UIE5VTEwgLCBjYXJkaW5hbGl0eSBpbnRlZ2VyIE5PVCBOVUxMICwgdmFsdWVfcmVxdWlyZWRfYm9vbCBzbWFsbGludCBOT1QgTlVMTCAsIGhpZGRlbl9ib29sIHNtYWxsaW50IE5PVCBOVUxMICwgbmFtZV9wcm9wZXJ0eV9ib29sIHNtYWxsaW50IE5PVCBOVUxMICwgbWF4X2xlbmd0aCBpbnRlZ2VyICwgZGVmYXVsdF9iaW5hcnkgYnl0ZWEgLCBkZWZhdWx0X2Jvb2wgc21hbGxpbnQgLCBkZWZhdWx0X2RhdGV0aW1lIHRpbWVzdGFtcCAsIGRlZmF1bHRfaWQgdXVpZCAsIGRlZmF1bHRfaW50MzIgaW50ZWdlciAsIGRlZmF1bHRfZmxvYXQ2NCBkb3VibGUgcHJlY2lzaW9uICwgZGVmYXVsdF9vYmplY3RfaWQgdXVpZCAsIGRlZmF1bHRfb2JqZWN0X2lkX2NsYXNzIHV1aWQgLCBkZWZhdWx0X3N0cmluZyB2YXJjaGFyKDQwMDApICwgbWluaW11bV9kYXRldGltZSB0aW1lc3RhbXAgLCBtaW5pbXVtX2ludDMyIGludGVnZXIgLCBtaW5pbXVtX2Zsb2F0NjQgZG91YmxlIHByZWNpc2lvbiAsIG1heGltdW1fZGF0ZXRpbWUgdGltZXN0YW1wICwgbWF4aW11bV9pbnQzMiBpbnRlZ2VyICwgbWF4aW11bV9mbG9hdDY0IGRvdWJsZSBwcmVjaXNpb24gLCBjdmxfaWQgdXVpZCAsIHJlcXVpcmVkX2NsYXNzX2lkIHV1aWQgLCByZWZsZWN0aXZlX3Byb3BfaWQgdXVpZCAsIGRlbGV0aW9uX2FjdGlvbiBpbnRlZ2VyICwgc2VjdXJpdHlfcHJvcGFnYXRpb24gaW50ZWdlciAsIHRhYmxlX2lkIHV1aWQgLCBjb2x1bW5faWQgdXVpZCAsIGxpc3RfaXNfc2V0X2Jvb2wgc21hbGxpbnQgLCByZXF1aXJlZF9hY2Nlc3MgaW50ZWdlciAsIGFsbG93ZWRfY2hhbmdlcyBpbnRlZ2VyIE5PVCBOVUxMICwgc2V0dGFiaWxpdHkgaW50ZWdlciAsIGNvcHlfdG9fcmVzZXJ2YXRpb24gc21hbGxpbnQgLCBtb2RpZmljYXRpb25fYWNjZXNzIGludGVnZXIgLCBhbGxvd3NfZm9yZWlnbl9vYmplY3Qgc21hbGxpbnQgLCBtYXJraW5nX3NldF9pZCB1dWlkICwgdXNlX2xvbmdfY29sdW1uIHNtYWxsaW50ICwgaXNfY2JyX2VuYWJsZWQgc21hbGxpbnQgLCBwZXJzaXN0ZW5jZV90eXBlIGludGVnZXIgLCBhdWRpdF9hc19pZCB1dWlkICwgbG9uZ19kZWZhdWx0X3N0cmluZyB0ZXh0ICwgZGF0ZV9vbmx5X2Jvb2wgc21hbGxpbnQgLCByZWFkX3Byb3RlY3RlZF9ib29sIHNtYWxsaW50ICwgY2JyX3Byb3BhZ2F0aW9uIGludGVnZXIgKSAKQ1JFQVRFIElOREVYIElfUHJvcGVydHlEZWZpbml0aW9uMTkgT04gUHJvcGVydHlEZWZpbml0aW9uIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgCkNSRUFURSBUQUJMRSBUYWJsZURlZmluaXRpb24ob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1dWlkIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdXVpZCAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIHRhYmxlX25hbWUgdmFyY2hhcigzMCkgTk9UIE5VTEwgLCB0YWJsZV90eXBlIGludGVnZXIgTk9UIE5VTEwgLCBvdmVyZmxvd190YWJsZV9pZCB1dWlkICkgCkNSRUFURSBUQUJMRSBDb2x1bW5EZWZpbml0aW9uKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1dWlkIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHV1aWQgLCBkYmdfdGFibGVfbmFtZSB2YXJjaGFyKDMwKSAsIGNvbHVtbl9uYW1lIHZhcmNoYXIoMzApIE5PVCBOVUxMICwgY29sdW1uX2RhdGF0eXBlIGludGVnZXIgTk9UIE5VTEwgLCBjb2x1bW5fc2l6ZSBpbnRlZ2VyICwgYWxsb3dzX251bGxfYm9vbCBzbWFsbGludCBOT1QgTlVMTCAsIGFsbG93c191c2VyX2luZGV4IHNtYWxsaW50ICwgcHJvcF9pZCB1dWlkICwgaXNfc2luZ2xlX2luZGV4ZWQgc21hbGxpbnQgLCBpc19zeXN0ZW1fb3duZWQgc21hbGxpbnQgKSAKQ1JFQVRFIElOREVYIElfQ29sdW1uRGVmaW5pdGlvbjcgT04gQ29sdW1uRGVmaW5pdGlvbiAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgVU5JUVVFIElOREVYIElfQ29sdW1uRGVmaW5pdGlvbjIzIE9OIENvbHVtbkRlZmluaXRpb24gKHBhcmVudF9pZCwgcHJvcF9pZCkgIApDUkVBVEUgVEFCTEUgTG9jYWxpemVkU3RyaW5nKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1dWlkIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHV1aWQgLCBsb2NhbGVfbmFtZSB2YXJjaGFyKDE2KSBOT1QgTlVMTCAsIHRleHQgdmFyY2hhcig0MDAwKSBOT1QgTlVMTCApIApDUkVBVEUgSU5ERVggSV9Mb2NhbGl6ZWRTdHJpbmcxOCBPTiBMb2NhbGl6ZWRTdHJpbmcgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpICAKQ1JFQVRFIFRBQkxFIEFsaWFzSWQocGFyZW50X2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1dWlkIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgYWxpYXNfaWQgdXVpZCBOT1QgTlVMTCAsIGNsYXNzX2lkIHV1aWQgTk9UIE5VTEwgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0FsaWFzSWQ2IE9OIEFsaWFzSWQgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpICAKQ1JFQVRFIElOREVYIElfQWxpYXNJZDM2IE9OIEFsaWFzSWQgKGNsYXNzX2lkKSAgCkNSRUFURSBUQUJMRSBSZWxhdGlvbnNoaXAob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1dWlkIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdXVpZCAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGhlYWRfaWQgdXVpZCAsIGhlYWRfaWRfY2xhc3MgdXVpZCAsIHRhaWxfaWQgdXVpZCBOT1QgTlVMTCAsIHZlcnNpb25fc2VyaWVzX2lkIHV1aWQgLCBwcm9wYWdhdGVfc2VjdXJpdHkgc21hbGxpbnQgLCBuYW1lIHZhcmNoYXIoMjU1KSAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHV1aWQgLCByZWNvdmVyeV9pdGVtX2lkIHV1aWQgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1JlbGF0aW9uc2hpcDI3IE9OIFJlbGF0aW9uc2hpcCAodGFpbF9pZCwgbmFtZSkgIApDUkVBVEUgSU5ERVggSV9SZWxhdGlvbnNoaXAyOCBPTiBSZWxhdGlvbnNoaXAgKGhlYWRfaWQpICAKQ1JFQVRFIElOREVYIElfUmVsYXRpb25zaGlwNDEgT04gUmVsYXRpb25zaGlwICh2ZXJzaW9uX3Nlcmllc19pZCkgIApDUkVBVEUgVEFCTEUgQ3ZsKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBkaXNwbGF5X25hbWUgdmFyY2hhcig2NCkgTk9UIE5VTEwgLCBjdmxfZGF0YV90eXBlIGludGVnZXIgLCBkZXNjcmlwdGlvbiB2YXJjaGFyKDI1NSkgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1dWlkICwgYWRkb25faWQgdXVpZCApIApDUkVBVEUgVU5JUVVFIElOREVYIElfQ3ZsMzIgT04gQ3ZsIChkaXNwbGF5X25hbWUpICAKQ1JFQVRFIFRBQkxFIEN2bEVsZW1lbnQob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHV1aWQgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfY3ZsX2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdXVpZCAsIHZhbF9pbnRlZ2VyIGludGVnZXIgLCB2YWxfc3RyaW5nIHZhcmNoYXIoMTAyNCkgLCBjaG9pY2VfdHlwZSBpbnRlZ2VyIE5PVCBOVUxMICwgbmVzdGluZ19sZXZlbCBpbnRlZ2VyICkgCkNSRUFURSBJTkRFWCBJX0N2bEVsZW1lbnQxMSBPTiBDdmxFbGVtZW50IChwYXJlbnRfY3ZsX2lkKSAgCkNSRUFURSBUQUJMRSBDb250YWluZXIob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1dWlkIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdXVpZCAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIHBhcmVudF9jb250YWluZXJfaWQgdXVpZCAsIG5hbWUgdmFyY2hhcigyNTUpICwgaW5pdF9jb250YWluZXJfYm9vbCBzbWFsbGludCAsIGxvY2tfdG9rZW4gdXVpZCAsIGxvY2tfdGltZW91dCBpbnRlZ2VyICwgbG9ja19vd25lciB2YXJjaGFyKDY0KSAsIGxvY2tfc2lkIGJ5dGVhICwgc2VjdXJpdHlfcG9saWN5X2lkIHV1aWQgLCBpbmRleGF0aW9uX2lkIHV1aWQgLCBpbmRleF9mYWlsdXJlX2NvZGUgaW50ZWdlciAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHV1aWQgLCByZXRlbnRpb25fZGF0ZSB0aW1lc3RhbXAgLCByZWNvdmVyeV9pdGVtX2lkIHV1aWQgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0NvbnRhaW5lcjI0IE9OIENvbnRhaW5lciAocGFyZW50X2NvbnRhaW5lcl9pZCwgbmFtZSkgIApDUkVBVEUgVEFCTEUgR2xvYmFsUHJvcEFsaWFzSWQocGFyZW50X2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1dWlkIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgcGFyZW50X2lkX2NsYXNzIHV1aWQgLCBhbGlhc19pZCB1dWlkIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9HbG9iYWxQcm9wQWxpYXNJZDkgT04gR2xvYmFsUHJvcEFsaWFzSWQgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpICAKQ1JFQVRFIFRBQkxFIExpc3RPZkJpbmFyeShwYXJlbnRfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHV1aWQgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBlbGVtZW50X3ZhbHVlIGJ5dGVhIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgcGFyZW50X2lkX2NsYXNzIHV1aWQgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0xpc3RPZkJpbmFyeTEwIE9OIExpc3RPZkJpbmFyeSAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCwgcGFyZW50X2lkX2NsYXNzKSAgCkNSRUFURSBUQUJMRSBMaXN0T2ZCb29sZWFuKHBhcmVudF9pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdXVpZCBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIGVsZW1lbnRfdmFsdWUgc21hbGxpbnQgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBwYXJlbnRfaWRfY2xhc3MgdXVpZCApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mQm9vbGVhbjEyIE9OIExpc3RPZkJvb2xlYW4gKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwsIHBhcmVudF9pZF9jbGFzcykgIApDUkVBVEUgVEFCTEUgTGlzdE9mRGF0ZVRpbWUocGFyZW50X2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1dWlkIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSB0aW1lc3RhbXAgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBwYXJlbnRfaWRfY2xhc3MgdXVpZCApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mRGF0ZVRpbWUxMyBPTiBMaXN0T2ZEYXRlVGltZSAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCwgcGFyZW50X2lkX2NsYXNzKSAgCkNSRUFURSBUQUJMRSBMaXN0T2ZGbG9hdDY0KHBhcmVudF9pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdXVpZCBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIGVsZW1lbnRfdmFsdWUgZG91YmxlIHByZWNpc2lvbiBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIHBhcmVudF9pZF9jbGFzcyB1dWlkICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9MaXN0T2ZGbG9hdDY0MTQgT04gTGlzdE9mRmxvYXQ2NCAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCwgcGFyZW50X2lkX2NsYXNzKSAgCkNSRUFURSBUQUJMRSBMaXN0T2ZJZChwYXJlbnRfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHV1aWQgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBlbGVtZW50X3ZhbHVlIHV1aWQgTk9UIE5VTEwgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBwYXJlbnRfaWRfY2xhc3MgdXVpZCApIApDUkVBVEUgVU5JUVVFIElOREVYIElfTGlzdE9mSWQxNSBPTiBMaXN0T2ZJZCAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCwgcGFyZW50X2lkX2NsYXNzKSAgCkNSRUFURSBUQUJMRSBMaXN0T2ZJbnRlZ2VyMzIocGFyZW50X2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1dWlkIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSBpbnRlZ2VyIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgcGFyZW50X2lkX2NsYXNzIHV1aWQgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0xpc3RPZkludGVnZXIzMjE2IE9OIExpc3RPZkludGVnZXIzMiAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCwgcGFyZW50X2lkX2NsYXNzKSAgCkNSRUFURSBUQUJMRSBMaXN0T2ZTdHJpbmcocGFyZW50X2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1dWlkIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgZWxlbWVudF92YWx1ZSB2YXJjaGFyKDQwMDApIE5PVCBOVUxMICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgcGFyZW50X2lkX2NsYXNzIHV1aWQgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0xpc3RPZlN0cmluZzE3IE9OIExpc3RPZlN0cmluZyAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCwgcGFyZW50X2lkX2NsYXNzKSAgCkNSRUFURSBUQUJMRSBTZWN1cml0eURlc2Moc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCByZWZlcmVuY2VfY291bnQgaW50ZWdlciBOT1QgTlVMTCAsIGhhc2ggaW50ZWdlciBOT1QgTlVMTCAsIG50X3NlY3VyaXR5X2Rlc2NyaXB0b3IgYnl0ZWEgTk9UIE5VTEwgLCBjYWNoZV9wcmVfbG9hZCBzbWFsbGludCApIApDUkVBVEUgSU5ERVggSV9TZWN1cml0eURlc2MzNyBPTiBTZWN1cml0eURlc2MgKGhhc2gpICAKQ1JFQVRFIFRBQkxFIEREU3RhdGUoaWQgdXVpZCBOT1QgTlVMTCAsIHNjaGVtYV9yZXZpc2lvbl9zdHJpbmcgdmFyY2hhcig2NCkgLCBmb2xkZXJfY2FjaGVfZXBvY2ggaW50ZWdlciBOT1QgTlVMTCAsIGxhc3RfZ29vZF9jaV9zbiBpbnRlZ2VyIE5PVCBOVUxMICwgbGFzdF9nb29kX3BpX3NuIGludGVnZXIgTk9UIE5VTEwgLCBsYXN0X2dvb2RfYW5ub19waV9zbiBpbnRlZ2VyIE5PVCBOVUxMICwgaW5kZXhfaG9zdF9uYW1lIHZhcmNoYXIoMTUpICwgaW5kZXhfbGVhc2VfZXhwaXJ5IHRpbWVzdGFtcCAsIGluZGV4X2FyZWFfZXBvY2ggaW50ZWdlciAsIHN0b3JhZ2VfYXJlYV9lcG9jaCBpbnRlZ2VyICwgc3RvcmFnZV9wb2xpY3lfZXBvY2ggaW50ZWdlciAsIGFzeW5jX3VwZ3JhZGVfc3RhdGUgaW50ZWdlciAsIGlzX2N1c3RvbV9zY2hlbWEgc21hbGxpbnQgLCBzY2hlbWFfc2NyaXB0IHRleHQgLCBleHRlcm5hbF9tZF9lcG9jaCB1dWlkICwgc3FsX3RyYW5zbGF0aW9uX2Vwb2NoIGludGVnZXIgLCBsYXN0X3B1cmdlX3RpbWUgdGltZXN0YW1wICwgZXZlbnRfYWN0aW9uX2Vwb2NoIGludGVnZXIgLCBhdWRpdF9kaXNwX2xlYXNlX2V4cGlyeSB0aW1lc3RhbXAgLCBhdWRpdF9kaXNwX3Jlc3RhcnQgYmlnaW50ICwgY29udGludWl0eV9kYXRhIGJ5dGVhICwgc3RvcmVfaWQgdXVpZCAsIHN1YnNjcmlwdGlvbl9lcG9jaCBpbnRlZ2VyICwgaW5kZXhpbmdfYmFsYW5jaW5nX3RpbWUgdGltZXN0YW1wICkgCkNSRUFURSBUQUJMRSBTdG9yYWdlQ2xhc3Mob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1dWlkIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdXVpZCAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyKDY0KSBOT1QgTlVMTCAsIGRlc2NyaXB0aW9uIHZhcmNoYXIoMjU1KSAsIHJlcG9zaXRvcnlfdHlwZSB2YXJjaGFyKDE2KSAsIGZzX2Fkc19wYXRoIHZhcmNoYXIoMTIwMCkgLCBkYl9vcHRfaGludCBpbnRlZ2VyICwgY29udGVudF9jYWNoZWQgaW50ZWdlciAsIGFyZWFfc3RhdHVzIGludGVnZXIgLCBjbG9zdXJlX2RhdGUgdGltZXN0YW1wICwgZWxlbWVudF9jb3VudCBkb3VibGUgcHJlY2lzaW9uICwgZWxlbWVudHNfY3JlYXRlZCBkb3VibGUgcHJlY2lzaW9uICwgZWxlbWVudHNfZGVsZXRlZCBkb3VibGUgcHJlY2lzaW9uICwgZWxlbWVudF9rYnl0ZXMgZG91YmxlIHByZWNpc2lvbiAsIG1heF9lbGVtZW50cyBkb3VibGUgcHJlY2lzaW9uICwgbWF4X3NpemUgZG91YmxlIHByZWNpc2lvbiAsIGRhdGFiYXNlX3R5cGUgaW50ZWdlciAsIGpuZGlfZGF0YV9zb3VyY2UgdmFyY2hhcig2NCkgLCBqbmRpX3hhX2RhdGFfc291cmNlIHZhcmNoYXIoNjQpICwgZGVsZXRlX21ldGhvZCBpbnRlZ2VyICwgZnJlZV90aHJlc2hvbGQgaW50ZWdlciAsIGZyZWVfd2FybmluZyBpbnRlZ2VyICwgZmlsdGVyX2V4cHJlc3Npb24gdGV4dCAsIGZpeGVkX2NvbnRlbnRfZGV2aWNlX2lkIHV1aWQgLCBzaXRlX2lkIHV1aWQgLCByZXNvdXJjZV9zdHJpbmcgdmFyY2hhcig1MTIpICwgYWxsb3dzX2RlbGV0ZSBzbWFsbGludCAsIGluZGV4X2FyZWFfaWQgdXVpZCAsIG9yaWdpbmFsX2ZpbGVzdG9yZV9pZCB1dWlkICwgZGlyZWN0b3J5X3N0cnVjdHVyZSBpbnRlZ2VyICwgc3RhbmRieV9hY3RpdmF0aW9uX3ByaW9yaXR5IGludGVnZXIgLCByZXRlbnRpb25fcGVyaW9kIGludGVnZXIgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1dWlkICwgc2lzX2VuYWJsZWQgc21hbGxpbnQgLCBzaXNfdGFibGVfbmFtZSB2YXJjaGFyKDMwKSAsIHJldGVudGlvbl9tb2RlIGludGVnZXIgLCBlbmNyeXB0aW9uX2VuYWJsZWQgc21hbGxpbnQgLCBzY2ZfaW5kZXggaW50ZWdlciAsIGNvbXByZXNzaW9uX2VuYWJsZWQgc21hbGxpbnQgLCBjb21wcmVzc2lvbl90aHJlc2hvbGQgaW50ZWdlciAsIHZlcmlmaWNhdGlvbl9tb2RlIGludGVnZXIgLCBpZF9iYXRjaF9zaXplIGludGVnZXIgLCBzeW5jX3JlcXVpcmVkIGludGVnZXIgLCBzeW5jX2Rlc2lyZWQgaW50ZWdlciAsIGJhdGNoX3R0bCBpbnRlZ2VyICwgb3Blbl90aW1lX2xpbWl0IGludGVnZXIgLCBlbmNyeXB0aW9uX21ldGhvZCBpbnRlZ2VyICwgdXNlX2RldmljZV9ob2xkIHNtYWxsaW50ICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9TdG9yYWdlQ2xhc3MyNSBPTiBTdG9yYWdlQ2xhc3MgKGRpc3BsYXlfbmFtZSkgIApDUkVBVEUgVEFCTEUgQ29udGVudFNlYXJjaChvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgcXVlcmllZF9vYmplY3RfaWQgdXVpZCBOT1QgTlVMTCAsIGNvbnRlbnQgdmFyY2hhcigxMCkgLCByYW5rIGRvdWJsZSBwcmVjaXNpb24gLCBoaXRjb3VudCBpbnRlZ2VyICwgY29udGVudF9zaXplIGRvdWJsZSBwcmVjaXNpb24gLCBzZXFfbnVtYmVyIGludGVnZXIgLCBzdW1tYXJ5IHZhcmNoYXIoNTEyKSAsIGhpZ2hsaWdodF9ibG9iIGJ5dGVhICkgCkNSRUFURSBUQUJMRSBBbm5vdGF0aW9uKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBzdG9yYWdlX2NsYXNzIHV1aWQgLCBjb250ZW50X3NpemUgZG91YmxlIHByZWNpc2lvbiAsIGFubm90YXRlZF9pZCB1dWlkIE5PVCBOVUxMICwgYW5ub3RhdGVkX2lkX2NsYXNzIHV1aWQgLCBhbm5vdGF0ZWRfZWxlbWVudCBpbnRlZ2VyICwgZGVzY3JpcHRpb24gdmFyY2hhcigyNTUpICwgc3RvcmFnZV9sb2NhdGlvbiB2YXJjaGFyKDEpICwgY29tcG9uZW50X3R5cGVzIGJ5dGVhICwgcmV0cmlldmFsX25hbWVzIGJ5dGVhICwgY29tcG9uZW50X3R5cGVzXzIgYnl0ZWEgLCByZXRyaWV2YWxfbmFtZXNfMiBieXRlYSAsIG1pbWVfdHlwZSB2YXJjaGFyKDk2KSAsIGNvbnRlbnRfaW5mbyBieXRlYSAsIGNvbnRlbnRfaW5mb18yIGJ5dGVhICwgbmV4dF9jb250ZW50X3VuaXF1ZV9pZCBpbnRlZ2VyICwgY29udGVudF9sYXN0X2FjY2Vzc2VkX2RhdGUgdGltZXN0YW1wICwgc3RvcmFnZV9hcmVhX2lkIHV1aWQgLCBpbmRleGF0aW9uX2lkIHV1aWQgLCBpbmRleF9mYWlsdXJlX2NvZGUgaW50ZWdlciAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHV1aWQgLCByZXRlbnRpb25fZGF0ZSB0aW1lc3RhbXAgLCByZWNvdmVyeV9pdGVtX2lkIHV1aWQgKSAKQ1JFQVRFIElOREVYIElfQW5ub3RhdGlvbjMxIE9OIEFubm90YXRpb24gKGFubm90YXRlZF9pZCkgIApDUkVBVEUgVEFCTEUgU3Vic2NyaXB0aW9uKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBkaXNwbGF5X25hbWUgdmFyY2hhcig2NCkgLCBkZXNjcmlwdGlvbiB2YXJjaGFyKDI1NSkgLCB0YXJnZXRfaWQgdXVpZCAsIHRhcmdldF9pZF9jbGFzcyB1dWlkICwgaW5jbHVkZV9zdWJjbGFzc2VzIHNtYWxsaW50ICwgcHJpb3JpdHkgaW50ZWdlciAsIGFjdGlvbl9pZCB1dWlkICwgaXNfZW5hYmxlZCBzbWFsbGludCAsIGlzX3N5bmNocm9ub3VzIHNtYWxsaW50ICwgdXNlcl9zdHJpbmcgdmFyY2hhcigyNTApICwgcHJvZ19pZF9zdHJpbmcgdmFyY2hhcigyNTUpICwgc2NyaXB0X3RleHQgdGV4dCAsIHJlc2V0X2xpZmVjeWNsZV9vbl9jaGVja2luIHNtYWxsaW50ICwgY2xhc3NpZnlfbWltZV90eXBlIHZhcmNoYXIoOTYpICwgd29ya2Zsb3dfZGVmaW5pdGlvbl9pZCB1dWlkICwgaXNvbGF0ZWRfcmVnaW9uIGludGVnZXIgLCBleHByZXNzaW9uIHZhcmNoYXIoMjU1KSAsIHN1YmplY3QgdmFyY2hhcig4MCkgLCB2d192ZXJzaW9uIHZhcmNoYXIoMjU1KSAsIGVuYWJsZV9tYW51YWxfbGF1bmNoIHNtYWxsaW50ICwgZmlsdGVyX2V4cHJlc3Npb24gdGV4dCAsIGZpbHRlcmVkX3Byb3BlcnR5X25hbWUgdmFyY2hhcig2NCkgLCBjb21waWxlZF9maWx0ZXIgYnl0ZWEgLCBwcmVzZXJ2ZV9kaXJlY3RfcGVybWlzc2lvbnMgc21hbGxpbnQgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1dWlkICwgc2VhcmNoX2Z1bmN0aW9uX25hbWUgdmFyY2hhcigxMzApICwgY29udmVyc2lvbl9jbGFzc19pZCB1dWlkICkgCkNSRUFURSBJTkRFWCBJX1N1YnNjcmlwdGlvbjQ2IE9OIFN1YnNjcmlwdGlvbiAodGFyZ2V0X2lkKSAgCkNSRUFURSBUQUJMRSBRdWV1ZUl0ZW0ob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1dWlkICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdXVpZCAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRlcXVldWVfaG9zdCB2YXJjaGFyKDE1KSAsIHJldHJ5X2NvdW50IGludGVnZXIgTk9UIE5VTEwgLCBxdWV1ZWRfb2JqZWN0X2lkIHV1aWQgLCBxdWV1ZWRfb2JqZWN0X2lkX2NsYXNzIHV1aWQgLCBzZXJpYWxpemVkX2RhdGEgYnl0ZWEgLCBldmVudF9vcGVyYXRpb24gaW50ZWdlciAsIG5leHRfcmV0cnlfZGF0ZSB0aW1lc3RhbXAgLCBsZWFzZV9leHBpcnlfZGF0ZSB0aW1lc3RhbXAgLCBpbXBlcnNvbmF0aW9uX3VzZXIgdmFyY2hhcig0MDAwKSApIApDUkVBVEUgSU5ERVggSV9RdWV1ZUl0ZW00OSBPTiBRdWV1ZUl0ZW0gKG5leHRfcmV0cnlfZGF0ZSkgIApDUkVBVEUgVEFCTEUgRG9jdW1lbnRTdGF0ZShvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdXVpZCBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1dWlkICwgc3RhdGVfbmFtZSB2YXJjaGFyKDQwMDApICwgY2FuX2JlX2RlbW90ZWQgc21hbGxpbnQgLCBlbmFibGVfc3RhdGVfcGVybWlzc2lvbnMgc21hbGxpbnQgLCBzZWN1cml0eV9pZCB1dWlkIE5PVCBOVUxMICkgCkNSRUFURSBJTkRFWCBJX0RvY3VtZW50U3RhdGUzNSBPTiBEb2N1bWVudFN0YXRlIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgCkNSRUFURSBUQUJMRSBMaW5rKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBoZWFkX2lkIHV1aWQgLCBoZWFkX2lkX2NsYXNzIHV1aWQgLCB0YWlsX2lkIHV1aWQgTk9UIE5VTEwgLCB0YWlsX2lkX2NsYXNzIHV1aWQgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1dWlkICwgcmVjb3ZlcnlfaXRlbV9pZCB1dWlkICkgCkNSRUFURSBJTkRFWCBJX0xpbmszOCBPTiBMaW5rICh0YWlsX2lkKSAgCkNSRUFURSBJTkRFWCBJX0xpbmszOSBPTiBMaW5rIChoZWFkX2lkKSAgCkNSRUFURSBUQUJMRSBTZWN1cml0eVBvbGljeShvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB1dWlkICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmNoYXIoNjQpICwgZGVzY3JpcHRpb24gdmFyY2hhcigyNTUpICwgcHJlc2VydmVfZGlyZWN0X3Blcm1pc3Npb25zIHNtYWxsaW50IE5PVCBOVUxMICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdXVpZCApIApDUkVBVEUgVEFCTEUgU2VjdXJpdHlUZW1wbGF0ZShvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdXVpZCBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1dWlkICwgZGlzcGxheV9uYW1lIHZhcmNoYXIoNjQpICwgaXNfZW5hYmxlZCBzbWFsbGludCBOT1QgTlVMTCAsIGFwcGx5X3N0YXRlX2lkIHV1aWQgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1dWlkIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9TZWN1cml0eVRlbXBsYXRlNDUgT04gU2VjdXJpdHlUZW1wbGF0ZSAocGFyZW50X2lkLCBhcHBseV9zdGF0ZV9pZCkgIApDUkVBVEUgVEFCTEUgRXZlbnQob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1dWlkIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdXVpZCAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIHNvdXJjZV9vYmplY3RfaWQgdXVpZCAsIHNvdXJjZV9vYmplY3RfY2xhc3NfaWQgdXVpZCAsIHN0YXR1cyBpbnRlZ2VyICwgc2VyaWFsaXplZF9zb3VyY2Vfb2JqZWN0IGJ5dGVhICwgcXVlcnlfdGV4dCB0ZXh0ICwgdmVyc2lvbl9zZXJpZXNfaWQgdXVpZCAsIGxpZmVjeWNsZV9jaGFuZ2UgaW50ZWdlciAsIGVsZW1lbnRfbmFtZSB2YXJjaGFyKDI1NSkgLCBhdWRpdF9sZXZlbCBpbnRlZ2VyICwgaW5pdGlhdGluZ191c2VyIHZhcmNoYXIoMjU1KSAsIHNlcXVlbmNlX251bWJlciBpbnRlZ2VyICwgc2VyaWFsaXplZF9vcmlnX29iamVjdCBieXRlYSAsIGF1ZGl0X3NlcXVlbmNlIGJpZ2ludCAsIHNvdXJjZV9zdG9yYWdlX2FyZWFfaWQgdXVpZCAsIHRhcmdldF9zdG9yYWdlX2FyZWFfaWQgdXVpZCAsIHJlY292ZXJ5X2l0ZW1faWQgdXVpZCAsIHNvdXJjZV9yZXRhaW5lZCBzbWFsbGludCApIApDUkVBVEUgSU5ERVggSV9FdmVudDQ4IE9OIEV2ZW50IChzb3VyY2Vfb2JqZWN0X2lkLCBjcmVhdGVfZGF0ZSBERVNDKSAgCkNSRUFURSBJTkRFWCBJX0V2ZW50ODMgT04gRXZlbnQgKGF1ZGl0X3NlcXVlbmNlKSAgCkNSRUFURSBUQUJMRSBBdWRpdERlZmluaXRpb24ob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHV1aWQgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdXVpZCAsIGV2ZW50X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBhdWRpdF9zdWNjZXNzIHNtYWxsaW50IE5PVCBOVUxMICwgYXVkaXRfZmFpbHVyZSBzbWFsbGludCBOT1QgTlVMTCAsIGluY2x1ZGVfc3ViY2xhc3NlcyBzbWFsbGludCBOT1QgTlVMTCAsIHJlY29yZGluZ19sZXZlbCBpbnRlZ2VyICwgZmlsdGVyX2V4cHJlc3Npb24gdGV4dCAsIGZpbHRlcmVkX3Byb3BlcnR5X25hbWUgdmFyY2hhcig2NCkgLCBkaXNwbGF5X25hbWUgdmFyY2hhcig2NCkgLCBlbmFibGVkX2Jvb2wgc21hbGxpbnQgKSAKQ1JFQVRFIElOREVYIElfQXVkaXREZWZpbml0aW9uNDcgT04gQXVkaXREZWZpbml0aW9uIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgCkNSRUFURSBUQUJMRSBTdWJzY3JpYmVkRXZlbnQob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHV1aWQgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdXVpZCAsIGV2ZW50X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgKSAKQ1JFQVRFIElOREVYIElfU3Vic2NyaWJlZEV2ZW50NTAgT04gU3Vic2NyaWJlZEV2ZW50IChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgCkNSRUFURSBJTkRFWCBJX1N1YnNjcmliZWRFdmVudDUxIE9OIFN1YnNjcmliZWRFdmVudCAoZXZlbnRfY2xhc3NfaWQpICAKQ1JFQVRFIFRBQkxFIEluZGV4QXJlYShvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB1dWlkICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmNoYXIoNjQpIE5PVCBOVUxMICwgZGVzY3JpcHRpb24gdmFyY2hhcigyNTUpICwgYXJlYV9zdGF0dXMgaW50ZWdlciBOT1QgTlVMTCAsIHNpdGVfaWQgdXVpZCAsIHRlbXBsYXRlX3R5cGUgdmFyY2hhcigxMjgpICwgcm9vdF9kaXJlY3RvcnlfcGF0aCB2YXJjaGFyKDI1NSkgLCBzZWFyY2hfc2VydmVyc190b19hdHRhY2ggaW50ZWdlciAsIG1heF9jb2xsZWN0aW9ucyBpbnRlZ2VyICwgdGVtcF9kaXJlY3RvcnlfcGF0aCB2YXJjaGFyKDI1NSkgLCBtYXhfb2JqZWN0c19wZXJfaW5kZXggZG91YmxlIHByZWNpc2lvbiAsIG1heF9zaXplX3Blcl9pbmRleF9rYiBkb3VibGUgcHJlY2lzaW9uICwgc3RhbmRieV9hY3RpdmF0aW9uX3ByaW9yaXR5IGludGVnZXIgLCBhZmZpbml0eV9ncm91cF9pZCB1dWlkICkgCkNSRUFURSBUQUJMRSBJbmRleFJlcXVlc3RzKHRhcmdldF9pZCB1dWlkIE5PVCBOVUxMICwgdGFyZ2V0X2lkX2NsYXNzIHV1aWQgTk9UIE5VTEwgLCBvcGVyYXRpb24gaW50ZWdlciBOT1QgTlVMTCAsIGluZGV4YXRpb25faWQgdXVpZCAsIHN0YXR1cyBpbnRlZ2VyIE5PVCBOVUxMICwgcmVxdWVzdF90aW1lIHRpbWVzdGFtcCBOT1QgTlVMTCAsIHNlcW51bV9pZGVudGl0eSBiaWdpbnQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgcmV0cnlfY291bnQgaW50ZWdlciBOT1QgTlVMTCAsIGVsZW1lbnRfc2VxdWVuY2VfbnVtYmVyIGludGVnZXIgLCByZXRyaWV2YWxfbmFtZV9leHQgdmFyY2hhcig2NCkgLCBpbmRleF9qb2JfaWQgdXVpZCAsIGluZGV4X2FyZWFfaWQgdXVpZCBOT1QgTlVMTCAsIG9iamVjdF9pZCB1dWlkICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgLCBzZWN1cml0eV9pZCB1dWlkICwgZXBvY2hfaWQgaW50ZWdlciAsIGhvbWVfaWQgdXVpZCAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGxhc3RfZmFpbHVyZV9yZWFzb24gdGV4dCAsIGluZGV4aW5nX2ZhaWx1cmVfY29kZSBpbnRlZ2VyICwgcmVtb3ZhbF9pbmRleGF0aW9uX2lkIHV1aWQgKSAKQ1JFQVRFIElOREVYIElfSW5kZXhSZXF1ZXN0czU5IE9OIEluZGV4UmVxdWVzdHMgKHRhcmdldF9pZCkgIApDUkVBVEUgSU5ERVggSV9JbmRleFJlcXVlc3RzODQgT04gSW5kZXhSZXF1ZXN0cyAob2JqZWN0X2lkKSAgCkNSRUFURSBJTkRFWCBJX0luZGV4UmVxdWVzdHM4NSBPTiBJbmRleFJlcXVlc3RzIChpbmRleF9qb2JfaWQpICAKQ1JFQVRFIElOREVYIElfSW5kZXhSZXF1ZXN0czk0IE9OIEluZGV4UmVxdWVzdHMgKGluZGV4X2FyZWFfaWQsIGluZGV4YXRpb25faWQsIHRhcmdldF9pZCwgc2VxbnVtX2lkZW50aXR5KSAgCkNSRUFURSBUQUJMRSBDb21wb25lbnRSZWxhdGlvbihvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB1dWlkICwgY3JlYXRvciB2YXJjaGFyKDgwKSBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCBOT1QgTlVMTCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApIE5PVCBOVUxMICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wIE5PVCBOVUxMICwgY2hpbGRfY29tcG9uZW50X2lkIHV1aWQgLCBjaGlsZF92ZXJzaW9uX3Nlcmllc19pZCB1dWlkICwgcGFyZW50X2NvbXBvbmVudF9pZCB1dWlkIE5PVCBOVUxMICwgY29weV90b19yZXNlcnZhdGlvbiBzbWFsbGludCBOT1QgTlVMTCAsIG5hbWUgdmFyY2hhcigyNTUpICwgbGFiZWxfYmluZF92YWx1ZSB2YXJjaGFyKDY0KSAsIGNvbXBvbmVudF9yZWxhdGlvbnNoaXBfdHlwZSBpbnRlZ2VyIE5PVCBOVUxMICwgdXJpX3ZhbHVlIHZhcmNoYXIoMjA4MykgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1dWlkICwgY29tcG9uZW50X3NvcnRfb3JkZXIgaW50ZWdlciBOT1QgTlVMTCAsIHZlcnNpb25fYmluZF90eXBlIGludGVnZXIgLCBjYXNjYWRlX2RlbGV0ZSBpbnRlZ2VyIE5PVCBOVUxMICwgcHJldmVudF9kZWxldGUgaW50ZWdlciBOT1QgTlVMTCAsIGNoaWxkX2NvbXBvbmVudF9pZF9ob21lIHV1aWQgLCBjaGlsZF92ZXJzaW9uX3Nlcmllc19pZF9ob21lIHV1aWQgKSAKQ1JFQVRFIElOREVYIElfQ29tcG9uZW50UmVsYXRpb242OSBPTiBDb21wb25lbnRSZWxhdGlvbiAoY2hpbGRfdmVyc2lvbl9zZXJpZXNfaWQpICAKQ1JFQVRFIElOREVYIElfQ29tcG9uZW50UmVsYXRpb243MCBPTiBDb21wb25lbnRSZWxhdGlvbiAoY2hpbGRfY29tcG9uZW50X2lkKSAgCkNSRUFURSBJTkRFWCBJX0NvbXBvbmVudFJlbGF0aW9uNzEgT04gQ29tcG9uZW50UmVsYXRpb24gKHBhcmVudF9jb21wb25lbnRfaWQpICAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0NvbXBvbmVudFJlbGF0aW9uNzIgT04gQ29tcG9uZW50UmVsYXRpb24gKGNvbXBvbmVudF9zb3J0X29yZGVyLCBvYmplY3RfaWQpICAKQ1JFQVRFIFRBQkxFIFB1Ymxpc2hSZXF1ZXN0KG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBwdWJsaXNoaW5nX3N0YXR1cyBpbnRlZ2VyIE5PVCBOVUxMICwgc3RhdHVzX2Rlc2NyaXB0aW9uIHZhcmNoYXIoMjU1KSAsIGlucHV0X2RvY3VtZW50IHV1aWQgTk9UIE5VTEwgLCBvdXRwdXRfZm9sZGVyIHV1aWQgTk9UIE5VTEwgLCBwdWJsaXNoX3JlcXVlc3RfdHlwZSBpbnRlZ2VyICwgcHVibGlzaF90ZW1wbGF0ZSB1dWlkIE5PVCBOVUxMICwgcHVibGljYXRpb25fZG9jdW1lbnQgdXVpZCAsIHB1Ymxpc2hfc3R5bGVfdGVtcGxhdGUgdXVpZCAsIGFwcGx5X2RlZmluaXRpb24gdGV4dCAsIGluaXRpYXRpbmdfdXNlciB2YXJjaGFyKDI1NSkgLCBlcnJvcl9jb2RlIHZhcmNoYXIoMjU1KSAsIGVycm9yX2Rlc2NyaXB0aW9uIHZhcmNoYXIoMjU1KSAsIHJldHJ5X2NvdW50IGludGVnZXIgTk9UIE5VTEwgLCBuZXh0X3JldHJ5X2RhdGUgdGltZXN0YW1wICwgZGVxdWV1ZV9ob3N0IHZhcmNoYXIoMTUpICwgbGVhc2VfZXhwaXJ5X2RhdGUgdGltZXN0YW1wICkgCkNSRUFURSBJTkRFWCBJX1B1Ymxpc2hSZXF1ZXN0NjAgT04gUHVibGlzaFJlcXVlc3QgKG5leHRfcmV0cnlfZGF0ZSkgIApDUkVBVEUgVEFCTEUgSGllcmFyY2h5SW5kZXgocGFyZW50X2lkIHV1aWQgTk9UIE5VTEwgLCBjaGlsZF9pZCB1dWlkIE5PVCBOVUxMICkgCkNSRUFURSBJTkRFWCBJX0hpZXJhcmNoeUluZGV4NjEgT04gSGllcmFyY2h5SW5kZXggKHBhcmVudF9pZCwgY2hpbGRfaWQpICAKQ1JFQVRFIElOREVYIElfSGllcmFyY2h5SW5kZXg2MiBPTiBIaWVyYXJjaHlJbmRleCAoY2hpbGRfaWQpICAKQ1JFQVRFIFRBQkxFIEluZGV4Sm9iKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBkZXNjcmlwdGlvbiB2YXJjaGFyKDI1NSkgLCB0aW1lX2xhc3RfcHJvY2Vzc2VkIHRpbWVzdGFtcCAsIHRpbWVfYWxsX3N1Ym1pdHRlZCB0aW1lc3RhbXAgLCBqb2Jfc3RhdHVzIGludGVnZXIgTk9UIE5VTEwgLCBqb2JfYWJvcnRfcmVxdWVzdGVkIHNtYWxsaW50IE5PVCBOVUxMICwgc3VibWl0dGVkX2NvdW50IGludGVnZXIgLCBwaGFzZV9udW0gaW50ZWdlciAsIGl0ZW1fbnVtIGludGVnZXIgLCBwcmlvcl9vYmplY3RfaWQgdXVpZCAsIGxhc3RfbWF4X3NlcV9udW0gYmlnaW50ICwgYWN0aXZlX3NlcnZlciB2YXJjaGFyKDEyOCkgLCBzZXJpYWxpemVkX2RhdGEgYnl0ZWEgLCBqb2JfcGF1c2VfcmVxdWVzdGVkIHNtYWxsaW50ICwgaXNfbWlncmF0aW9uX2pvYiBzbWFsbGludCAsIGxhc3RfZmFpbHVyZV9kZXNjIHRleHQgLCBtYXhfcmVxdWVzdF9xdWV1ZV9zaXplIGludGVnZXIgKSAKQ1JFQVRFIFRBQkxFIEluZGV4Sm9iSXRlbShvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdXVpZCBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1dWlkICwgaW5kZXhhdGlvbl9pZCB1dWlkICwgaW5kZXhfYXJlYV9pZCB1dWlkICwgY2xhc3NfZGVmaW5pdGlvbl9pZCB1dWlkICwgc2luZ2xlX2l0ZW1faWQgdXVpZCAsIHNpbmdsZV9pdGVtX2lkX2NsYXNzIHV1aWQgLCBpbmNsdWRlX3N1YmNsYXNzZXMgc21hbGxpbnQgLCByZXN5bmNfbW9kaWZpY2F0aW9uX2RhdGUgdGltZXN0YW1wICkgCkNSRUFURSBUQUJMRSBDb250ZW50UXVldWUob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgLCBzZXFudW1faWRlbnRpdHkgYmlnaW50IE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgbGVhc2VfZXhwaXJ5X2RhdGUgdGltZXN0YW1wIE5PVCBOVUxMICwgc2Vzc2lvbl9pZCB1dWlkIE5PVCBOVUxMICwgZWxlbWVudF9zZXF1ZW5jZV9udW1iZXIgaW50ZWdlciBOT1QgTlVMTCAsIGNvbW1hbmRfdHlwZSBpbnRlZ2VyIE5PVCBOVUxMICwgcHJvY2Vzc19hdHRlbXB0cyBpbnRlZ2VyICwgc291cmNlX29iamVjdF9pZCB1dWlkICwgc3RvcmFnZV9hcmVhX2lkIHV1aWQgTk9UIE5VTEwgLCBjb250ZW50X3NpemUgZG91YmxlIHByZWNpc2lvbiBOT1QgTlVMTCAsIHNlcmlhbGl6ZWRfZGF0YSBieXRlYSBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCBOT1QgTlVMTCApIApDUkVBVEUgSU5ERVggSV9Db250ZW50UXVldWU2MyBPTiBDb250ZW50UXVldWUgKHNlc3Npb25faWQpICAKQ1JFQVRFIElOREVYIElfQ29udGVudFF1ZXVlNjQgT04gQ29udGVudFF1ZXVlIChvYmplY3RfaWQpICAKQ1JFQVRFIElOREVYIElfQ29udGVudFF1ZXVlNjUgT04gQ29udGVudFF1ZXVlIChsZWFzZV9leHBpcnlfZGF0ZSkgIApDUkVBVEUgVEFCTEUgQ29udGVudFVwbG9hZChlbGVtZW50X2lkIHZhcmNoYXIoNDgpIE5PVCBOVUxMICwgIm9mZnNldCIgaW50ZWdlciBOT1QgTlVMTCAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIGNvbnRlbnQgYnl0ZWEgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0NvbnRlbnRVcGxvYWQ2NiBPTiBDb250ZW50VXBsb2FkIChlbGVtZW50X2lkLCAib2Zmc2V0IikgIApDUkVBVEUgVEFCTEUgRXh0ZXJuYWxJZGVudGl0eShvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdXVpZCBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1dWlkICwgcmVwb3NpdG9yeV9pZCB1dWlkIE5PVCBOVUxMICwgZXh0ZXJuYWxfaWQgdmFyY2hhcigyNTYpIE5PVCBOVUxMICwgcmVwbGljYXRpb25fZGF0YSBieXRlYSApIApDUkVBVEUgSU5ERVggSV9FeHRlcm5hbElkZW50aXR5NzUgT04gRXh0ZXJuYWxJZGVudGl0eSAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgVU5JUVVFIElOREVYIElfRXh0ZXJuYWxJZGVudGl0eTc2IE9OIEV4dGVybmFsSWRlbnRpdHkgKGV4dGVybmFsX2lkLCByZXBvc2l0b3J5X2lkKSAgCkNSRUFURSBUQUJMRSBSZXBsaWNhdGlvblF1ZXVlKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBzb3VyY2Vfb2JqZWN0X2lkIHV1aWQgLCBzb3VyY2Vfb2JqZWN0X2lkX2NsYXNzIHV1aWQgLCBkZXN0aW5hdGlvbl9pZCB1dWlkIE5PVCBOVUxMICwgZGVzdGluYXRpb25faWRfY2xhc3MgdXVpZCAsIHJlcGxpY2F0aW9uX2dyb3VwX2lkIHV1aWQgTk9UIE5VTEwgLCBvcGVyYXRpb24gaW50ZWdlciAsIHNlcmlhbGl6ZWRfZGF0YSBieXRlYSAsIHNlcW51bV9pZGVudGl0eSBiaWdpbnQgTk9UIE5VTEwgLCBoZWxkX3VudGlsX2RhdGUgdGltZXN0YW1wICwgcmV0cnlfY291bnQgaW50ZWdlciAsIGxlYXNlX2hvbGRlcl9pZCB1dWlkICwgbGVhc2VfY291bnQgaW50ZWdlciAsIHN0YXR1cyBpbnRlZ2VyICwgbGFzdF9mYWlsdXJlX2Rlc2MgdGV4dCAsIGV4Y2x1c2lvbl9pZCB1dWlkICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9SZXBsaWNhdGlvblF1ZXVlNzcgT04gUmVwbGljYXRpb25RdWV1ZSAoc2VxbnVtX2lkZW50aXR5KSAgCkNSRUFURSBUQUJMRSBFeHRlcm5hbEFsaWFzKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1dWlkIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHV1aWQgLCBleHRlcm5hbF9yZXBvX2lkIHV1aWQgTk9UIE5VTEwgLCBhbGlhc19kaXJlY3Rpb24gaW50ZWdlciBOT1QgTlVMTCAsIGNsYXNzX2lkZW50aXR5IHZhcmNoYXIoMTI4KSBOT1QgTlVMTCAsIHByb3BlcnR5X2lkZW50aXR5IHZhcmNoYXIoMTI4KSApIApDUkVBVEUgSU5ERVggSV9FeHRlcm5hbEFsaWFzNzggT04gRXh0ZXJuYWxBbGlhcyAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgVEFCTEUgVGFzayhvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB1dWlkICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdXVpZCAsIHN0YXRlIGludGVnZXIgLCBjb29yZGluYXRvcl9pZCB1dWlkICwgY29vcmRpbmF0b3JfaWRfY2xhc3MgdXVpZCAsIHN0YXJ0X2RhdGUgdGltZXN0YW1wICwgY29tcGxldGVfZGF0ZSB0aW1lc3RhbXAgLCBsYXN0X2ZhaWx1cmVfZGVzYyB0ZXh0ICwgcmVjb3ZlcnlfaXRlbV9pZCB1dWlkICkgCkNSRUFURSBJTkRFWCBJX1Rhc2s4MCBPTiBUYXNrIChjb29yZGluYXRvcl9pZCkgIApDUkVBVEUgVEFCTEUgVGFza1JlbGF0aW9uc2hpcChvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB1dWlkICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdXVpZCAsIHByZWRlY2Vzc29yX2lkIHV1aWQgLCBzdWNjZXNzb3JfaWQgdXVpZCAsIGRlZmluZXNfYWx0X3ByZWRlY2Vzc29yIHNtYWxsaW50ICwgcmVjb3ZlcnlfaXRlbV9pZCB1dWlkICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9UYXNrUmVsYXRpb25zaGlwODEgT04gVGFza1JlbGF0aW9uc2hpcCAocHJlZGVjZXNzb3JfaWQsIHN1Y2Nlc3Nvcl9pZCkgIApDUkVBVEUgSU5ERVggSV9UYXNrUmVsYXRpb25zaGlwODIgT04gVGFza1JlbGF0aW9uc2hpcCAoc3VjY2Vzc29yX2lkKSAgCkNSRUFURSBUQUJMRSBUZXh0SW5kZXgob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHV1aWQgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdXVpZCAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIGluZGV4X25hbWUgdmFyY2hhcig0MDAwKSBOT1QgTlVMTCAsIHN0YXR1cyBpbnRlZ2VyIE5PVCBOVUxMICwgY3VycmVudF9pbmRleF9zZXJ2ZXIgdXVpZCAsIGxlYXNlX2V4cGlyeV90aW1lIHRpbWVzdGFtcCAsIGluZGV4X29iamVjdF9jb3VudCBkb3VibGUgcHJlY2lzaW9uICwgaW5kZXhfc2l6ZV9rYiBkb3VibGUgcHJlY2lzaW9uICwgaW5kZXhpbmdfc3RhdHVzIGludGVnZXIgLCByZWNlbnRfb3BzX3N1Ym1pdHRlZCBpbnRlZ2VyICwgcmVjZW50X29wc19kdXJhdGlvbiBkb3VibGUgcHJlY2lzaW9uICkgCkNSRUFURSBUQUJMRSBBdWRpdFBvbGljeShvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdXVpZCAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyKDY0KSBOT1QgTlVMTCAsIGhvbWVfaWQgdXVpZCAsIGRpc3Bvc2l0aW9uX3J1bGUgdmFyY2hhcigyNTUpICwgZW5hYmxlZF9ib29sIHNtYWxsaW50IE5PVCBOVUxMICwgY29tcGxldGlvbl93YWl0X2ludGVydmFsIGludGVnZXIgKSAKQ1JFQVRFIFRBQkxFIEF1ZGl0UHJvY2Vzc2luZyhvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmNoYXIoNjQpIE5PVCBOVUxMICwgaG9tZV9pZCB1dWlkICwgbGFzdF9wcm9jZXNzZWQgZG91YmxlIHByZWNpc2lvbiBOT1QgTlVMTCApIApDUkVBVEUgVEFCTEUgVGV4dEluZGV4UGFydGl0aW9uKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1dWlkIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHV1aWQgLCBwYXJ0aXRpb25fcHJvcF9uYW1lIHZhcmNoYXIoNDAwMCkgTk9UIE5VTEwgLCBkYXRhdHlwZSBpbnRlZ2VyIE5PVCBOVUxMICwgcGFydGl0aW9uX3N0YXJ0X2RhdGUgdGltZXN0YW1wICwgcGFydGl0aW9uX2VuZF9kYXRlIHRpbWVzdGFtcCAsIHBhcnRpdGlvbl9zdHJpbmdfdmFsIHZhcmNoYXIoNDAwMCkgKSAKQ1JFQVRFIFRBQkxFIFByZXByb2Nlc3NvckRlZmluaXRpb24ob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHV1aWQgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdXVpZCAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyKDY0KSBOT1QgTlVMTCAsIGVuYWJsZWRfYm9vbCBzbWFsbGludCBOT1QgTlVMTCAsIGFjdGlvbl9pZCB1dWlkIE5PVCBOVUxMICkgCkNSRUFURSBUQUJMRSBTY2ZEYXRhKHNjZl9pZCBpbnRlZ2VyIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIGJpbmFyeV9kYXRhIGJ5dGVhICkgCkNSRUFURSBUQUJMRSBIb2xkT2JqZWN0KG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBkaXNwbGF5X25hbWUgdmFyY2hhcig2NCkgLCBkZXNjcmlwdGlvbiB2YXJjaGFyKDI1NSkgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1dWlkICkgCkNSRUFURSBUQUJMRSBIb2xkUmVsYXRpb25zaGlwKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1dWlkICwgaG9sZF9pZCB1dWlkIE5PVCBOVUxMICwgaGVsZF9vYmplY3RfaWQgdXVpZCBOT1QgTlVMTCAsIGhlbGRfb2JqZWN0X2lkX2NsYXNzIHV1aWQgTk9UIE5VTEwgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0hvbGRSZWxhdGlvbnNoaXA4NiBPTiBIb2xkUmVsYXRpb25zaGlwIChoZWxkX29iamVjdF9pZCwgaG9sZF9pZCkgIApDUkVBVEUgVEFCTEUgU3dlZXAob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1dWlkIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGhvbWVfaWQgdXVpZCAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyKDY0KSAsIGRlc2NyaXB0aW9uIHZhcmNoYXIoMjU1KSAsIGxhc3Rfb2JqZWN0X2lkIHV1aWQgLCBoZWxkX3VudGlsX2RhdGUgdGltZXN0YW1wICwgc3RhcnRfZGF0ZSB0aW1lc3RhbXAgLCBlbmRfZGF0ZSB0aW1lc3RhbXAgLCBuZXh0X3N0YXJ0X3RpbWUgdGltZXN0YW1wICwgbWF4aW11bV93b3JrZXJzIGludGVnZXIgLCBpbnRlcl9zd2VlcF9kZWxheSBpbnRlZ2VyICwgb2JqZWN0c19leGFtaW5lZCBkb3VibGUgcHJlY2lzaW9uICwgb2JqZWN0c19wcm9jZXNzZWQgZG91YmxlIHByZWNpc2lvbiAsIG9iamVjdHNfZmFpbGVkIGRvdWJsZSBwcmVjaXNpb24gLCBpc19lbmFibGVkIHNtYWxsaW50ICwgbWF4aW11bV9mYWlsdXJlcyBpbnRlZ2VyICwgZWZmZWN0aXZlX2JlZ2luX2RhdGUgdGltZXN0YW1wICwgZWZmZWN0aXZlX2VuZF9kYXRlIHRpbWVzdGFtcCAsIHN0b3JhZ2VfcG9saWN5X2lkIHV1aWQgLCBzd2VlcF90YXJnZXRfaWQgdXVpZCAsIGluY2x1ZGVfc3ViY2xhc3NlcyBzbWFsbGludCAsIGZpbHRlcl9leHByZXNzaW9uIHRleHQgLCBsZWFzZV9ob2xkZXJfaWQgdXVpZCAsIGltYWdlX2Zvcm1hdCBpbnRlZ2VyICwgaW1hZ2Vfc2l6ZSBpbnRlZ2VyICwgaW1hZ2VfY29sb3IgaW50ZWdlciAsIHJldHJ5X3dhaXRfaW50ZXJ2YWwgaW50ZWdlciAsIGJhdGNoX3NpemUgaW50ZWdlciAsIHN3ZWVwX2FjdGlvbl9pZCB1dWlkICwgY3VycmVudF9vYmplY3RzX2V4YW1pbmVkIGRvdWJsZSBwcmVjaXNpb24gLCBjdXJyZW50X29iamVjdHNfcHJvY2Vzc2VkIGRvdWJsZSBwcmVjaXNpb24gLCBjdXJyZW50X29iamVjdHNfZmFpbGVkIGRvdWJsZSBwcmVjaXNpb24gLCByZXRlbnRpb25fZHVyYXRpb24gaW50ZWdlciAsIHJldGVudGlvbl91cGRhdGVfdGltZV91bml0IGludGVnZXIgLCBzcGVjaWZpY19kYXRlIHRpbWVzdGFtcCAsIGJhc2VfZGF0ZV9wcm9wZXJ0eV9uYW1lIHZhcmNoYXIoNjQpICwgY29tcGxldGVkX2l0ZXJhdGlvbnMgaW50ZWdlciAsIHJlY29yZF9mYWlsdXJlcyBzbWFsbGludCAsIGVuZF9yZXBsaWNhdGlvbl9hZnRlcl9tb3ZlIHNtYWxsaW50ICwgaW50ZXJfYmF0Y2hfZGVsYXkgaW50ZWdlciAsIHN3ZWVwX21vZGUgaW50ZWdlciAsIHF1ZXJ5X3RpbWVvdXQgaW50ZWdlciAsIGVmZmVjdGl2ZV9zcWwgdGV4dCAsIGxhc3RfZmFpbHVyZV9yZWFzb24gdGV4dCAsIGZhaWx1cmVfY291bnQgaW50ZWdlciAsIHNlYXJjaF9jb250aW51YXRpb25fY29va2llIHRleHQgLCBzZWFyY2hfb2JqZWN0X3N0b3JlX2lkIHV1aWQgLCBtYXhpbXVtX3Jvd19jb3VudCBpbnRlZ2VyICwgY3VycmVudF9vYmplY3RzX2RlZmVycmVkIGRvdWJsZSBwcmVjaXNpb24gLCBvYmplY3RzX2RlZmVycmVkIGRvdWJsZSBwcmVjaXNpb24gLCBjb3B5X3JldGFpbmVkIHNtYWxsaW50ICwgdXBkYXRlX3N0b3JhZ2VfcG9saWN5IHNtYWxsaW50ICkgCkNSRUFURSBUQUJMRSBTd2VlcFJlbGF0aW9uc2hpcChvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB1dWlkICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgcG9saWN5X2lkIHV1aWQgLCBwb2xpY3lfaWRfY2xhc3MgdXVpZCAsIHN3ZWVwX2lkIHV1aWQgTk9UIE5VTEwgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1N3ZWVwUmVsYXRpb25zaGlwODcgT04gU3dlZXBSZWxhdGlvbnNoaXAgKHBvbGljeV9pZCwgc3dlZXBfaWQpICAKQ1JFQVRFIFRBQkxFIFN3ZWVwUG9saWN5KG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBkaXNwbGF5X25hbWUgdmFyY2hhcig2NCkgLCBkZXNjcmlwdGlvbiB2YXJjaGFyKDI1NSkgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1dWlkICwgaXNfZW5hYmxlZCBzbWFsbGludCAsIGluY2x1ZGVfc3ViY2xhc3NlcyBzbWFsbGludCAsIGVmZmVjdGl2ZV9iZWdpbl9kYXRlIHRpbWVzdGFtcCAsIGVmZmVjdGl2ZV9lbmRfZGF0ZSB0aW1lc3RhbXAgLCBzdG9yYWdlX3BvbGljeV9pZCB1dWlkICwgZmlsdGVyX2V4cHJlc3Npb24gdGV4dCAsIHJldGVudGlvbl9kdXJhdGlvbiBpbnRlZ2VyICwgc3dlZXBfdGFyZ2V0X2lkIHV1aWQgLCBzcGVjaWZpY19kYXRlIHRpbWVzdGFtcCAsIGJhc2VfZGF0ZV9wcm9wZXJ0eV9uYW1lIHZhcmNoYXIoNjQpICwgcmV0ZW50aW9uX3VwZGF0ZV90aW1lX3VuaXQgaW50ZWdlciAsIG9iamVjdHNfZXhhbWluZWQgZG91YmxlIHByZWNpc2lvbiAsIG9iamVjdHNfcHJvY2Vzc2VkIGRvdWJsZSBwcmVjaXNpb24gLCBzd2VlcF9hY3Rpb25faWQgdXVpZCAsIG9iamVjdHNfZmFpbGVkIGRvdWJsZSBwcmVjaXNpb24gLCBjdXJyZW50X29iamVjdHNfZXhhbWluZWQgZG91YmxlIHByZWNpc2lvbiAsIGN1cnJlbnRfb2JqZWN0c19wcm9jZXNzZWQgZG91YmxlIHByZWNpc2lvbiAsIGN1cnJlbnRfb2JqZWN0c19mYWlsZWQgZG91YmxlIHByZWNpc2lvbiAsIGNvbXBsZXRlZF9pdGVyYXRpb25zIGludGVnZXIgLCBmYWlsX3JlY29yZF9pdGVyYXRpb25fa2VlcCBpbnRlZ2VyICwgZW5kX3JlcGxpY2F0aW9uX2FmdGVyX21vdmUgc21hbGxpbnQgLCBzd2VlcF9tb2RlIGludGVnZXIgLCB1cGRhdGVfc3RvcmFnZV9wb2xpY3kgc21hbGxpbnQgLCBhdXRob3JpemF0aW9uX21vZGUgaW50ZWdlciApIApDUkVBVEUgVEFCTEUgVGh1bWJuYWlsKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCByZXBsaWNhdGlvbl9ncm91cF9pZCB1dWlkICwgaW5wdXRfZG9jdW1lbnQgdXVpZCAsIGVsZW1lbnRfc2VxdWVuY2VfbnVtYmVyIGludGVnZXIgLCBpbWFnZSBieXRlYSAsIGltYWdlX3NpemUgaW50ZWdlciAsIG1pbWVfdHlwZSB2YXJjaGFyKDk2KSAsIGlzX3N5c3RlbV9nZW5lcmF0ZWQgc21hbGxpbnQgLCByZWNvdmVyeV9pdGVtX2lkIHV1aWQgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX1RodW1ibmFpbDg4IE9OIFRodW1ibmFpbCAoaW5wdXRfZG9jdW1lbnQsIGVsZW1lbnRfc2VxdWVuY2VfbnVtYmVyKSAgCkNSRUFURSBUQUJMRSBUaHVtYm5haWxSZXF1ZXN0KG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBoZWxkX3VudGlsX2RhdGUgdGltZXN0YW1wICwgbGVhc2VfaG9sZGVyX2lkIHV1aWQgLCBmYWlsdXJlX2NvdW50IGludGVnZXIgLCBsYXN0X2ZhaWx1cmVfcmVhc29uIHRleHQgLCBlbnRyeV9zdGF0dXMgaW50ZWdlciAsIGRlZmVycmFsX2NvdW50IGludGVnZXIgLCBkZWZlcnJhbF9kYXRhIGJ5dGVhICwgaW5wdXRfZG9jdW1lbnQgdXVpZCAsIGVsZW1lbnRfc2VxdWVuY2VfbnVtYmVyIGludGVnZXIgKSAKQ1JFQVRFIElOREVYIElfVGh1bWJuYWlsUmVxdWVzdDkzIE9OIFRodW1ibmFpbFJlcXVlc3QgKGxlYXNlX2hvbGRlcl9pZCkgIApDUkVBVEUgVEFCTEUgUmVjb3ZlcnlCaW4ob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBzZWN1cml0eV9pZCB1dWlkIE5PVCBOVUxMICwgZXBvY2hfaWQgaW50ZWdlciBOT1QgTlVMTCAsIGNyZWF0b3IgdmFyY2hhcig4MCkgLCBjcmVhdGVfZGF0ZSB0aW1lc3RhbXAgLCBtb2RpZnlfdXNlciB2YXJjaGFyKDgwKSAsIG1vZGlmeV9kYXRlIHRpbWVzdGFtcCAsIGRpc3BsYXlfbmFtZSB2YXJjaGFyKDY0KSBOT1QgTlVMTCAsIGhvbWVfaWQgdXVpZCApIApDUkVBVEUgVEFCTEUgUmVjb3ZlcnlJdGVtKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBob21lX2lkIHV1aWQgLCByZWNvdmVyeV9iaW5faWQgdXVpZCAsIGRlbGV0ZWRfb2JqZWN0X2Jsb2IgYnl0ZWEgLCBjbGVhbnVwX2NvbW1hbmRzIGJ5dGVhICwgcmVjb3ZlcmFibGVfY291bnQgaW50ZWdlciAsIG9yaWdpbmFsX29iamVjdF9pZCB1dWlkICwgb3JpZ2luYWxfY2xhc3NfaWQgdXVpZCAsIG9yaWdpbmFsX25hbWUgdmFyY2hhcigyNTUpICwgb3JpZ2luYWxfY3JlYXRvciB2YXJjaGFyKDgwKSAsIG9yaWdpbmFsX2NyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG9yaWdpbmFsX21vZGlmeV91c2VyIHZhcmNoYXIoODApICwgb3JpZ2luYWxfbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgb3JpZ2luYWxfb2JqZWN0X2lkX2NsYXNzIHV1aWQgKSAKQ1JFQVRFIElOREVYIElfUmVjb3ZlcnlJdGVtODkgT04gUmVjb3ZlcnlJdGVtIChyZWNvdmVyeV9iaW5faWQpICAKQ1JFQVRFIFRBQkxFIFRpbWVzbG90KG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1dWlkIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHV1aWQgLCBzbG90X3dlZWtkYXkgaW50ZWdlciAsIHN0YXJ0X21pbnNfcGFzdF9taWRuaWdodCBpbnRlZ2VyICwgc2xvdF9kdXJhdGlvbiBpbnRlZ2VyICkgCkNSRUFURSBJTkRFWCBJX1RpbWVzbG90OTAgT04gVGltZXNsb3QgKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpICAKQ1JFQVRFIFRBQkxFIFN3ZWVwUmVzdWx0KG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCBOT1QgTlVMTCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBzb3VyY2Vfb2JqZWN0X2lkIHV1aWQgLCBzb3VyY2Vfb2JqZWN0X2lkX2NsYXNzIHV1aWQgLCBjb250cm9sbGluZ19vYmplY3RfaWQgdXVpZCAsIGNvbnRyb2xsaW5nX29iamVjdF9pZF9jbGFzcyB1dWlkICwgZmFpbHVyZV9kZXNjcmlwdGlvbiB2YXJjaGFyKDEwMjQpICwgaXRlcmF0aW9uX251bWJlciBpbnRlZ2VyICwgc3dlZXBfcmVzdWx0X3R5cGUgaW50ZWdlciApIApDUkVBVEUgVEFCTEUgQWRkT25SZWNvcmQob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHV1aWQgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdXVpZCAsIGluc3RhbGxlciB2YXJjaGFyKDgwKSAsIGluc3RhbGxfZGF0ZSB0aW1lc3RhbXAgLCBpbnN0YWxsX3N0YXR1cyBpbnRlZ2VyICwgaW5zdGFsbF9yZXBvcnQgdGV4dCAsIGFkZG9uX2lkIHV1aWQgKSAKQ1JFQVRFIFRBQkxFIEluZGV4ZWRDb2x1bW4ob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHV1aWQgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdXVpZCAsIHRhYmxlX2lkIHV1aWQgTk9UIE5VTEwgLCBjb2x1bW5fbmFtZSB2YXJjaGFyKDMwKSBOT1QgTlVMTCAsIHNvcnRfb3JkZXIgaW50ZWdlciBOT1QgTlVMTCApIApDUkVBVEUgVEFCTEUgSW5kZXhEZWZpbml0aW9uKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfcHJvcF9pZCB1dWlkIE5PVCBOVUxMICwgb3JkaW5hbCBpbnRlZ2VyIE5PVCBOVUxMICwgcGFyZW50X2lkX2NsYXNzIHV1aWQgLCBpbmRleF9uYW1lIHZhcmNoYXIoMTI4KSBOT1QgTlVMTCAsIHN5c19vd25lZF9ib29sIHNtYWxsaW50IE5PVCBOVUxMICwgc3RvcmFnZV9sb2NhdGlvbiB2YXJjaGFyKDEyOCkgLCB1bmlxdWVfYm9vbCBzbWFsbGludCBOT1QgTlVMTCAsIGNhc2VfaW5zZW5zaXRpdmUgc21hbGxpbnQgKSAKQ1JFQVRFIFVOSVFVRSBJTkRFWCBJX0luZGV4RGVmaW5pdGlvbjk2IE9OIEluZGV4RGVmaW5pdGlvbiAoaW5kZXhfbmFtZSkgIApDUkVBVEUgVEFCTEUgU3RvcmFnZURldmljZShvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB1dWlkICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmNoYXIoNjQpIE5PVCBOVUxMICwgZGVzY3JpcHRpb24gdmFyY2hhcigyNTUpICwgc2l0ZV9pZCB1dWlkICwgcHJvZ19pZF9zdHJpbmcgdmFyY2hhcigyNTUpICwgY29kZV9tb2R1bGVfaWQgdXVpZCAsIGZzX2Fkc19wYXRoIHZhcmNoYXIoMTIwMCkgLCB0b3Bfbm9kZXMgaW50ZWdlciAsIGJvdHRvbV9ub2RlcyBpbnRlZ2VyICwgdXNlcm5hbWUgdmFyY2hhcigxMjgpICwgcGFzc3dvcmQgYnl0ZWEgLCBkZXZpY2VfdXJsIHZhcmNoYXIoMTAyNCkgLCBhdXRoZW50aWNhdGlvbl91cmwgdmFyY2hhcigxMDI0KSAsIGNvbnRhaW5lcl9uYW1lIHZhcmNoYXIoMTI4KSAsIHN5bmNfcmVwbF9zdXBwb3J0ZWQgc21hbGxpbnQgLCBkZWxldGVfbWV0aG9kX3N1cHBvcnRlZCBpbnRlZ2VyICwgY2VydF92YWxpZGF0aW9uIHNtYWxsaW50ICwgcmVnaW9uX25hbWUgdmFyY2hhcigxMjgpICwgc2VjdXJpdHlfdG9rZW4gYnl0ZWEgKSAKQ1JFQVRFIFRBQkxFIERldmljZUNvbm5lY3Rpb24ob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgb2JqZWN0X2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBwYXJlbnRfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9wcm9wX2lkIHV1aWQgTk9UIE5VTEwgLCBvcmRpbmFsIGludGVnZXIgTk9UIE5VTEwgLCBwYXJlbnRfaWRfY2xhc3MgdXVpZCAsIGRldmljZV9pZCB1dWlkICwgcmVwbGljYV90eXBlIGludGVnZXIgKSAKQ1JFQVRFIElOREVYIElfRGV2aWNlQ29ubmVjdGlvbjk3IE9OIERldmljZUNvbm5lY3Rpb24gKHBhcmVudF9pZCwgcGFyZW50X3Byb3BfaWQsIG9yZGluYWwpICAKQ1JFQVRFIFRBQkxFIFNpdGVTZXR0aW5ncyhvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdXVpZCBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1dWlkICwgc2l0ZV9pZCB1dWlkICwgcmVwbGljYV90eXBlIGludGVnZXIgKSAKQ1JFQVRFIElOREVYIElfU2l0ZVNldHRpbmdzOTggT04gU2l0ZVNldHRpbmdzIChwYXJlbnRfaWQsIHBhcmVudF9wcm9wX2lkLCBvcmRpbmFsKSAgCkNSRUFURSBUQUJMRSBDb250ZW50QmFja291dFF1ZXVlKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBoZWxkX3VudGlsX2RhdGUgdGltZXN0YW1wICwgbGVhc2VfaG9sZGVyX2lkIHV1aWQgLCBmYWlsdXJlX2NvdW50IGludGVnZXIgLCBsYXN0X2ZhaWx1cmVfcmVhc29uIHRleHQgLCBlbnRyeV9zdGF0dXMgaW50ZWdlciAsIGRlZmVycmFsX2NvdW50IGludGVnZXIgLCBkZWZlcnJhbF9kYXRhIGJ5dGVhICwgZXhwaXJhdGlvbl90aW1lIHRpbWVzdGFtcCAsIHN0b3JhZ2VfYXJlYV9pZCB1dWlkICwgYmF0Y2hfaWQgdXVpZCAsIG9wZXJhdGlvbl9kYXRhIGJ5dGVhICwgcmVwbGljYV9kYXRhIGJ5dGVhICkgCkNSRUFURSBJTkRFWCBJX0NvbnRlbnRCYWNrb3V0UXVldWU5OSBPTiBDb250ZW50QmFja291dFF1ZXVlIChsZWFzZV9ob2xkZXJfaWQpICAKQ1JFQVRFIFRBQkxFIENvbnRlbnREZWxldGlvblF1ZXVlKG9iamVjdF9pZCB1dWlkIE5PVCBOVUxMIFBSSU1BUlkgS0VZICAsIG9iamVjdF9jbGFzc19pZCB1dWlkIE5PVCBOVUxMICwgc2VjdXJpdHlfaWQgdXVpZCAsIGVwb2NoX2lkIGludGVnZXIgTk9UIE5VTEwgLCBob21lX2lkIHV1aWQgLCBjcmVhdG9yIHZhcmNoYXIoODApICwgY3JlYXRlX2RhdGUgdGltZXN0YW1wICwgbW9kaWZ5X3VzZXIgdmFyY2hhcig4MCkgLCBtb2RpZnlfZGF0ZSB0aW1lc3RhbXAgLCBoZWxkX3VudGlsX2RhdGUgdGltZXN0YW1wICwgbGVhc2VfaG9sZGVyX2lkIHV1aWQgLCBmYWlsdXJlX2NvdW50IGludGVnZXIgLCBsYXN0X2ZhaWx1cmVfcmVhc29uIHRleHQgLCBlbnRyeV9zdGF0dXMgaW50ZWdlciAsIGRlZmVycmFsX2NvdW50IGludGVnZXIgLCBkZWZlcnJhbF9kYXRhIGJ5dGVhICwgcmVwbGljYV9kYXRhIGJ5dGVhICwgb3BlcmF0aW9uX2RhdGEgYnl0ZWEgLCBzdG9yYWdlX2FyZWFfaWQgdXVpZCApIApDUkVBVEUgSU5ERVggSV9Db250ZW50RGVsZXRpb25RdWV1ZTEwMCBPTiBDb250ZW50RGVsZXRpb25RdWV1ZSAobGVhc2VfaG9sZGVyX2lkKSAgCkNSRUFURSBUQUJMRSBDb250ZW50UmVwbGljYXRpb25RdWV1ZShvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB1dWlkICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgaGVsZF91bnRpbF9kYXRlIHRpbWVzdGFtcCAsIGxlYXNlX2hvbGRlcl9pZCB1dWlkICwgZmFpbHVyZV9jb3VudCBpbnRlZ2VyICwgbGFzdF9mYWlsdXJlX3JlYXNvbiB0ZXh0ICwgZW50cnlfc3RhdHVzIGludGVnZXIgLCBkZWZlcnJhbF9jb3VudCBpbnRlZ2VyICwgZGVmZXJyYWxfZGF0YSBieXRlYSAsIGNvbnRlbnRfaWQgdXVpZCAsIGhhc2hfc2VxdWVuY2UgZG91YmxlIHByZWNpc2lvbiAsIHN0b3JhZ2VfYXJlYV9pZCB1dWlkICwgcmVwbGljYV9kYXRhIGJ5dGVhICwgY29udGVudF9zaXplIGRvdWJsZSBwcmVjaXNpb24gLCBzaWduYXR1cmUgYnl0ZWEgLCBvcGVyYXRpb25fZGF0YSBieXRlYSApIApDUkVBVEUgSU5ERVggSV9Db250ZW50UmVwbGljYXRpb25RdWV1ZTEwMSBPTiBDb250ZW50UmVwbGljYXRpb25RdWV1ZSAobGVhc2VfaG9sZGVyX2lkKSAgCkNSRUFURSBUQUJMRSBTaWRUb0d1aWQob2JqZWN0X2lkIHV1aWQgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgc2lkIGJ5dGVhIE5PVCBOVUxMICkgCkNSRUFURSBVTklRVUUgSU5ERVggSV9TaWRUb0d1aWQxMDMgT04gU2lkVG9HdWlkIChzaWQpICAKQ1JFQVRFIFRBQkxFIENvbnZlcnNpb25TZXR0aW5ncyhvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB1dWlkICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmNoYXIoNjQpICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdXVpZCAsIHJlY292ZXJ5X2l0ZW1faWQgdXVpZCApIApDUkVBVEUgVEFCTEUgUm9sZUFjY2Vzc0RlZihvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHBhcmVudF9pZCB1dWlkIE5PVCBOVUxMICwgcGFyZW50X3Byb3BfaWQgdXVpZCBOT1QgTlVMTCAsIG9yZGluYWwgaW50ZWdlciBOT1QgTlVMTCAsIHBhcmVudF9pZF9jbGFzcyB1dWlkICwgYWNjZXNzX2NsYXNzX2lkIHV1aWQgTk9UIE5VTEwgLCBhY2Nlc3NfbWFzayBpbnRlZ2VyICkgCkNSRUFURSBJTkRFWCBJX1JvbGVBY2Nlc3NEZWYxMDUgT04gUm9sZUFjY2Vzc0RlZiAocGFyZW50X2lkLCBwYXJlbnRfcHJvcF9pZCwgb3JkaW5hbCkgIApDUkVBVEUgVEFCTEUgUm9sZU9iamVjdChvYmplY3RfaWQgdXVpZCBOT1QgTlVMTCBQUklNQVJZIEtFWSAgLCBvYmplY3RfY2xhc3NfaWQgdXVpZCBOT1QgTlVMTCAsIHNlY3VyaXR5X2lkIHV1aWQgTk9UIE5VTEwgLCBlcG9jaF9pZCBpbnRlZ2VyIE5PVCBOVUxMICwgaG9tZV9pZCB1dWlkICwgY3JlYXRvciB2YXJjaGFyKDgwKSAsIGNyZWF0ZV9kYXRlIHRpbWVzdGFtcCAsIG1vZGlmeV91c2VyIHZhcmNoYXIoODApICwgbW9kaWZ5X2RhdGUgdGltZXN0YW1wICwgZGlzcGxheV9uYW1lIHZhcmNoYXIoNjQpIE5PVCBOVUxMICwgcmVwbGljYXRpb25fZ3JvdXBfaWQgdXVpZCAsIHJlY292ZXJ5X2l0ZW1faWQgdXVpZCAsIHNlcmlhbGl6ZWRfZGF0YSBieXRlYSAsIGNhY2hlX3VzbiBiaWdpbnQgLCB1c25faW5kZXggaW50ZWdlciAsIGRlc2NyaXB0aW9uIHZhcmNoYXIoMjU1KSApIApDUkVBVEUgSU5ERVggSV9Sb2xlT2JqZWN0MTA2IE9OIFJvbGVPYmplY3QgKHVzbl9pbmRleCwgY2FjaGVfdXNuLCBvYmplY3RfaWQsIGVwb2NoX2lkKSAgCkNSRUFURSBUQUJMRSBSb2xlQ2FjaGVVU04odXNuX2luZGV4IGludGVnZXIgTk9UIE5VTEwgUFJJTUFSWSBLRVkgICwgY2FjaGVfdXNuIGJpZ2ludCBOT1QgTlVMTCApIApDUkVBVEUgU0VRVUVOQ0UgQ0lTZXF1ZW5jZSBJTkNSRU1FTlQgQlkgMSBOTyBNQVhWQUxVRSBTVEFSVCBXSVRIIDEgQ0FDSEUgMSBOTyBDWUNMRSAKQ1JFQVRFIFNFUVVFTkNFIENvbnRlbnRRdWV1ZVNlcXVlbmNlIElOQ1JFTUVOVCBCWSAxIE5PIE1BWFZBTFVFIFNUQVJUIFdJVEggMSBDQUNIRSAxIE5PIENZQ0xFIApDUkVBVEUgU0VRVUVOQ0UgUmVwbFNlcXVlbmNlIElOQ1JFTUVOVCBCWSAxIE5PIE1BWFZBTFVFIFNUQVJUIFdJVEggMSBDQUNIRSAxIE5PIENZQ0xFIApDUkVBVEUgU0VRVUVOQ0UgQXVkaXRTZXF1ZW5jZSBJTkNSRU1FTlQgQlkgMSBOTyBNQVhWQUxVRSBTVEFSVCBXSVRIIDEgQ0FDSEUgMSBOTyBDWUNMRSAKQ1JFQVRFIFNFUVVFTkNFIFNjZlNlcXVlbmNlIElOQ1JFTUVOVCBCWSAxIE5PIE1BWFZBTFVFIFNUQVJUIFdJVEggMSBDQUNIRSAxIE5PIENZQ0xFIAp4","filenetConnection":"rO0ABXNyACdjb20uZmlsZW5ldC5hcGlpbXBsLmNvcmUuQ29ubmVjdGlvbkltcGz2cACCb+ktXwMAAHhwdwQAAAAPdAAiaWlvcDovL3A4ZGV2Y2U6OTgxMC9GaWxlTmV0L0VuZ2luZXNyACxjb20uZmlsZW5ldC5hcGkudXRpbC5Db25maWd1cmF0aW9uUGFyYW1ldGVyc/QsB82ueVOCAwAAeHB3CAAAAA8AAAAAeHg=","filenetSubject":"rO0ABXNyABtqYXZheC5zZWN1cml0eS5hdXRoLlN1YmplY3SMsjKTADP6aAMAAloACHJlYWRPbmx5TAAKcHJpbmNpcGFsc3QAD0xqYXZhL3V0aWwvU2V0O3hwAHNyACVqYXZhLnV0aWwuQ29sbGVjdGlvbnMkU3luY2hyb25pemVkU2V0BsPCeQLu3zwCAAB4cgAsamF2YS51dGlsLkNvbGxlY3Rpb25zJFN5bmNocm9uaXplZENvbGxlY3Rpb24qYfhNCZyZtQMAAkwAAWN0ABZMamF2YS91dGlsL0NvbGxlY3Rpb247TAAFbXV0ZXh0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyACVqYXZheC5zZWN1cml0eS5hdXRoLlN1YmplY3QkU2VjdXJlU2V0bcwygBdVficDAANJAAV3aGljaEwACGVsZW1lbnRzdAAWTGphdmEvdXRpbC9MaW5rZWRMaXN0O0wABnRoaXMkMHQAHUxqYXZheC9zZWN1cml0eS9hdXRoL1N1YmplY3Q7eHAAAAABc3IAFGphdmEudXRpbC5MaW5rZWRMaXN0DClTXUpgiCIDAAB4cHcEAAAAAXNyAC9jb20uaWJtLndzLnNlY3VyaXR5LmNvbW1vbi5hdXRoLldTUHJpbmNpcGFsSW1wbB2dEp9Cl1chAgADTAAIZnVsbG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztMAA5yZWFsbURlbGltaXRlcnEAfgAPTAAIdXNlcm5hbWVxAH4AD3hwdAAWRmVkZXJhdGVkUmVhbG0vVEVMSTAwM3QAAS90AAdURUxJMDAzeHEAfgACeHEAfgAHeHg=